Directory structure:
└── taller_dev/
    ├── README.md
    ├── angular.json
    ├── Dockerfile
    ├── nginx.conf
    ├── package.json
    ├── tsconfig.app.json
    ├── tsconfig.json
    ├── tsconfig.spec.json
    ├── .dockerignore
    ├── .editorconfig
    └── src/
        ├── index.html
        ├── main.ts
        ├── styles.scss
        ├── app/
        │   ├── angular-material.module.ts
        │   ├── app-routing.module.ts
        │   ├── app.component.html
        │   ├── app.component.scss
        │   ├── app.component.spec.ts
        │   ├── app.component.ts
        │   ├── app.module.ts
        │   ├── auth/
        │   │   ├── admin.guard.ts
        │   │   └── auth.guard.ts
        │   ├── components/
        │   │   ├── comprobante/
        │   │   │   ├── comprobante.component.html
        │   │   │   ├── comprobante.component.scss
        │   │   │   ├── comprobante.component.spec.ts
        │   │   │   └── comprobante.component.ts
        │   │   ├── dashboard-admin/
        │   │   │   ├── dashboard-admin-routing.module.ts
        │   │   │   ├── dashboard-admin.component.html
        │   │   │   ├── dashboard-admin.component.scss
        │   │   │   ├── dashboard-admin.component.spec.ts
        │   │   │   ├── dashboard-admin.component.ts
        │   │   │   ├── dashboard-admin.module.ts
        │   │   │   ├── ag-grid/
        │   │   │   │   ├── button-renderer/
        │   │   │   │   │   ├── button-renderer.component.html
        │   │   │   │   │   ├── button-renderer.component.scss
        │   │   │   │   │   └── button-renderer.component.ts
        │   │   │   │   ├── currency-format/
        │   │   │   │   │   └── currency-format.component.ts
        │   │   │   │   └── datetime-format/
        │   │   │   │       └── datetime-format.component.ts
        │   │   │   ├── clientes/
        │   │   │   │   ├── clientes.component.html
        │   │   │   │   ├── clientes.component.scss
        │   │   │   │   ├── clientes.component.spec.ts
        │   │   │   │   ├── clientes.component.ts
        │   │   │   │   └── cliente-dialog/
        │   │   │   │       ├── cliente-dialog.component.html
        │   │   │   │       ├── cliente-dialog.component.scss
        │   │   │   │       ├── cliente-dialog.component.spec.ts
        │   │   │   │       └── cliente-dialog.component.ts
        │   │   │   ├── express/
        │   │   │   │   ├── express.component.html
        │   │   │   │   ├── express.component.scss
        │   │   │   │   ├── express.component.spec.ts
        │   │   │   │   ├── express.component.ts
        │   │   │   │   └── express-admin/
        │   │   │   │       ├── express-admin.component.html
        │   │   │   │       ├── express-admin.component.scss
        │   │   │   │       ├── express-admin.component.spec.ts
        │   │   │   │       └── express-admin.component.ts
        │   │   │   ├── externos/
        │   │   │   │   ├── externos.component.html
        │   │   │   │   ├── externos.component.scss
        │   │   │   │   ├── externos.component.spec.ts
        │   │   │   │   ├── externos.component.ts
        │   │   │   │   └── externos-dialog/
        │   │   │   │       ├── externos-dialog.component.html
        │   │   │   │       ├── externos-dialog.component.scss
        │   │   │   │       ├── externos-dialog.component.spec.ts
        │   │   │   │       └── externos-dialog.component.ts
        │   │   │   ├── garantias/
        │   │   │   │   ├── garantias.component.html
        │   │   │   │   ├── garantias.component.scss
        │   │   │   │   ├── garantias.component.spec.ts
        │   │   │   │   ├── garantias.component.ts
        │   │   │   │   └── garantia-dialog/
        │   │   │   │       ├── garantia-dialog.component.html
        │   │   │   │       ├── garantia-dialog.component.scss
        │   │   │   │       ├── garantia-dialog.component.spec.ts
        │   │   │   │       └── garantia-dialog.component.ts
        │   │   │   ├── graficas/
        │   │   │   │   ├── earnings-chart/
        │   │   │   │   │   ├── earnings-chart.component.html
        │   │   │   │   │   ├── earnings-chart.component.scss
        │   │   │   │   │   ├── earnings-chart.component.spec.ts
        │   │   │   │   │   └── earnings-chart.component.ts
        │   │   │   │   ├── status-chart/
        │   │   │   │   │   ├── status-chart.component.html
        │   │   │   │   │   ├── status-chart.component.scss
        │   │   │   │   │   ├── status-chart.component.spec.ts
        │   │   │   │   │   └── status-chart.component.ts
        │   │   │   │   └── tech-chart/
        │   │   │   │       ├── tech-chart.component.html
        │   │   │   │       ├── tech-chart.component.scss
        │   │   │   │       ├── tech-chart.component.spec.ts
        │   │   │   │       └── tech-chart.component.ts
        │   │   │   ├── reportes/
        │   │   │   │   ├── reportes.component.html
        │   │   │   │   ├── reportes.component.scss
        │   │   │   │   ├── reportes.component.spec.ts
        │   │   │   │   ├── reportes.component.ts
        │   │   │   │   └── reporte-tabla/
        │   │   │   │       ├── reporte-tabla.component.html
        │   │   │   │       ├── reporte-tabla.component.scss
        │   │   │   │       ├── reporte-tabla.component.spec.ts
        │   │   │   │       └── reporte-tabla.component.ts
        │   │   │   ├── servicios/
        │   │   │   │   ├── servicios.component.html
        │   │   │   │   ├── servicios.component.scss
        │   │   │   │   ├── servicios.component.spec.ts
        │   │   │   │   ├── servicios.component.ts
        │   │   │   │   └── servicio-dialog/
        │   │   │   │       ├── servicio-dialog.component.html
        │   │   │   │       ├── servicio-dialog.component.scss
        │   │   │   │       ├── servicio-dialog.component.spec.ts
        │   │   │   │       └── servicio-dialog.component.ts
        │   │   │   └── usuarios/
        │   │   │       ├── usuarios.component.html
        │   │   │       ├── usuarios.component.scss
        │   │   │       ├── usuarios.component.spec.ts
        │   │   │       ├── usuarios.component.ts
        │   │   │       └── usuario-dialog/
        │   │   │           ├── usuario-dialog.component.html
        │   │   │           ├── usuario-dialog.component.scss
        │   │   │           ├── usuario-dialog.component.spec.ts
        │   │   │           └── usuario-dialog.component.ts
        │   │   ├── dashboard-tecnico/
        │   │   │   ├── dashboard-tecnico-routing.module.ts
        │   │   │   ├── dashboard-tecnico.component.html
        │   │   │   ├── dashboard-tecnico.component.scss
        │   │   │   ├── dashboard-tecnico.component.spec.ts
        │   │   │   ├── dashboard-tecnico.component.ts
        │   │   │   ├── dashboard-tecnico.module.ts
        │   │   │   ├── clientes/
        │   │   │   │   ├── clientes.component.html
        │   │   │   │   ├── clientes.component.scss
        │   │   │   │   ├── clientes.component.spec.ts
        │   │   │   │   ├── clientes.component.ts
        │   │   │   │   └── cliente-dialog/
        │   │   │   │       ├── cliente-dialog.component.html
        │   │   │   │       ├── cliente-dialog.component.scss
        │   │   │   │       ├── cliente-dialog.component.spec.ts
        │   │   │   │       └── cliente-dialog.component.ts
        │   │   │   ├── express/
        │   │   │   │   ├── express.component.html
        │   │   │   │   ├── express.component.scss
        │   │   │   │   ├── express.component.spec.ts
        │   │   │   │   ├── express.component.ts
        │   │   │   │   └── express-dialog/
        │   │   │   │       ├── express-dialog.component.html
        │   │   │   │       ├── express-dialog.component.scss
        │   │   │   │       └── express-dialog.component.ts
        │   │   │   └── tecnicos/
        │   │   │       ├── tecnicos.component.html
        │   │   │       ├── tecnicos.component.scss
        │   │   │       ├── tecnicos.component.spec.ts
        │   │   │       ├── tecnicos.component.ts
        │   │   │       └── tecnico-dialog/
        │   │   │           ├── tecnico-dialog.component.html
        │   │   │           ├── tecnico-dialog.component.scss
        │   │   │           ├── tecnico-dialog.component.spec.ts
        │   │   │           └── tecnico-dialog.component.ts
        │   │   ├── factura/
        │   │   │   ├── factura.component.html
        │   │   │   ├── factura.component.scss
        │   │   │   ├── factura.component.spec.ts
        │   │   │   └── factura.component.ts
        │   │   ├── log-in/
        │   │   │   ├── log-in.component.html
        │   │   │   ├── log-in.component.scss
        │   │   │   ├── log-in.component.spec.ts
        │   │   │   └── log-in.component.ts
        │   │   └── not-founds/
        │   │       ├── not-founds.component.html
        │   │       ├── not-founds.component.scss
        │   │       ├── not-founds.component.spec.ts
        │   │       └── not-founds.component.ts
        │   ├── interfaces/
        │   │   ├── chart.ts
        │   │   ├── clientes.ts
        │   │   ├── express.ts
        │   │   ├── externos.ts
        │   │   ├── garantias.ts
        │   │   ├── graficas.ts
        │   │   ├── marcas.ts
        │   │   ├── report.ts
        │   │   ├── response.ts
        │   │   ├── toolservice.ts
        │   │   └── user.ts
        │   └── services/
        │       ├── auth.service.ts
        │       ├── csv.service.ts
        │       ├── main.service.ts
        │       └── sse.service.ts
        ├── assets/
        │   └── .gitkeep
        └── enviroments/
            ├── enviroment.dev.ts
            ├── enviroment.prod.ts
            └── enviroment.ts

================================================
FILE: README.md
================================================
# Sistema de Control del Taller de Servicios 4.0.7
## Ambiente de Desarrollo
- [Angular CLI](https://github.com/angular/angular-cli) : 15.2.8.
- [Angular Material](https://material.angular.io/) : 15.2.9
- [Bootstrap](https://getbootstrap.com/docs/5.3/getting-started/introduction/): 5.3.0
- [Typescript](https://www.typescriptlang.org/) : 4.9.4 
- [AmCharts](https://www.amcharts.com/) : 4.10.36 


## Build and Run
### Development
1. AsegÃºrate de tener instalado [Node.js](https://nodejs.org/es)
2. AsegÃºrate de tener instalado el Angular CLI, para instalar la Ãºltima versiÃ³n, ejecuta `npm install -g @angular/cli` en una terminal o cmd, esto instalarÃ¡ la Ãºltima versiÃ³n disponible.
3. Abre la carpeta taller_dev en [VS Code](https://code.visualstudio.com/) y ejecuta en una neuva terminal el script `ng s --o`, esto abrirÃ¡ automÃ¡ticamente el proyecto en el navegador predeterminado, la direcciÃ³n por default es localhost:4200.

### Production
1. AsegÃºrate de tener instalado [Node.js](https://nodejs.org/es)
2. AsegÃºrate de tener instalado el Angular CLI, para instalar la Ãºltima versiÃ³n, ejecuta `npm install -g @angular/cli` en una terminal o cmd, esto instalarÃ¡ la Ãºltima versiÃ³n disponible.
3. Abre la carpeta taller_dev en [VS Code](https://code.visualstudio.com/) y ejecuta en una neuva terminal el script `ng build`, esto crearÃ¡ dentro del la carpeta dist, la carpeta taller_prod con los archivos del sitio web para ponerlo en producciÃ³n.
4. Clona el repositorio de [taller](https://bitbucket.org/gfdp/taller/src/master/), y reemplaza los archivos dentro de la carpeta reciÃ©n clonada, por los archivos de taller_prod.
5. Sube los cambios con los nuevos archivos de producciÃ³n y descargalos en la carpeta del servidor para realizar cambios en producciÃ³n.
6. AsegÃºrate de probar tus cambios en un ambiente dev antes de pasarlos a la carpeta del servidor.


================================================
FILE: angular.json
================================================
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "taller_prod": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "style": "scss"
        }
      },
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "outputPath": "dist/taller_prod",
            "index": "src/index.html",
            "main": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "inlineStyleLanguage": "scss",
            "assets": [
              "src/favicon.png",
              "src/assets"
            ],
            "styles": [
              "@angular/material/prebuilt-themes/indigo-pink.css",
              "./node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.scss"
            ],
            "scripts": [
              "./node_modules/jquery/dist/jquery.min.js",
              "./node_modules/@popperjs/core/dist/umd/popper.min.js",
              "./node_modules/bootstrap/dist/js/bootstrap.min.js"
            ]
          },
          "configurations": {
            "production": {
              "fileReplacements": [
                {
                  "replace": "src/enviroments/enviroment.ts",
                  "with": "src/enviroments/enviroment.prod.ts"
                }
              ],
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "5mb",
                  "maximumError": "4mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "4mb",
                  "maximumError": "5mb"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "fileReplacements": [
                {
                  "replace": "src/enviroments/enviroment.ts",
                  "with": "src/enviroments/enviroment.dev.ts"
                }
              ],
              "buildOptimizer": false,
              "optimization": false,
              "vendorChunk": true,
              "extractLicenses": false,
              "sourceMap": true,
              "namedChunks": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "browserTarget": "taller_prod:build:production"
            },
            "development": {
              "browserTarget": "taller_prod:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n",
          "options": {
            "browserTarget": "taller_prod:build"
          }
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "inlineStyleLanguage": "scss",
            "assets": [
              "src/favicon.png",
              "src/assets"
            ],
            "styles": [
              "@angular/material/prebuilt-themes/indigo-pink.css",
              "src/styles.scss"
            ],
            "scripts": []
          }
        }
      }
    }
  },
  "cli": {
    "analytics": false
  }
}



================================================
FILE: Dockerfile
================================================
FROM node:16-alpine AS build
WORKDIR /app

COPY . .
RUN npm install
RUN npm run build
# Serve Application using Nginx Server
FROM nginx:alpine
COPY ./nginx.conf /etc/nginx/conf.d/default.conf
COPY --from=build /app/dist/taller_prod/ /usr/share/nginx/html
EXPOSE 8200


================================================
FILE: nginx.conf
================================================
server {
    listen       80;
    server_name  localhost;

    location / {
        root   /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
        index  index.html index.htm;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

}


================================================
FILE: package.json
================================================
{
  "name": "taller",
  "version": "3.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@amcharts/amcharts4": "^4.10.36",
    "@angular-material-components/datetime-picker": "^9.0.0",
    "@angular-material-components/moment-adapter": "^9.0.0",
    "@angular/animations": "^15.2.0",
    "@angular/cdk": "~15.2.9",
    "@angular/common": "^15.2.0",
    "@angular/compiler": "^15.2.0",
    "@angular/core": "^15.2.0",
    "@angular/forms": "^15.2.0",
    "@angular/material": "~15.2.9",
    "@angular/material-moment-adapter": "^15.2.9",
    "@angular/platform-browser": "^15.2.0",
    "@angular/platform-browser-dynamic": "^15.2.0",
    "@angular/router": "^15.2.0",
    "ag-grid-angular": "^31.0.3",
    "ag-grid-community": "^31.0.3",
    "bootstrap": "^5.3.0",
    "jquery": "^3.7.0",
    "jspdf": "^2.5.1",
    "moment": "^2.29.4",
    "ngx-mat-select-search": "^7.0.2",
    "rxjs": "~7.8.0",
    "sweetalert2": "^11.7.12",
    "tslib": "^2.3.0",
    "zone.js": "~0.12.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^15.2.8",
    "@angular/cli": "~15.2.8",
    "@angular/compiler-cli": "^15.2.0",
    "@types/jasmine": "~4.3.0",
    "jasmine-core": "~4.5.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.1.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.0.0",
    "typescript": "~4.9.4"
  }
}



================================================
FILE: tsconfig.app.json
================================================
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}



================================================
FILE: tsconfig.json
================================================
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "./",
    "outDir": "./dist/out-tsc",
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022",
    "useDefineForClassFields": false,
    "lib": [
      "ES2022",
      "dom"
    ]
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}



================================================
FILE: tsconfig.spec.json
================================================
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}



================================================
FILE: .dockerignore
================================================
# Include any files or directories that you don't want to be copied to your
# container here (e.g., local build artifacts, temporary files, etc.).
#
# For more help, visit the .dockerignore file reference guide at
# https://docs.docker.com/engine/reference/builder/#dockerignore-file

**/.classpath
**/.dockerignore
**/.env
**/.git
**/.gitignore
**/.project
**/.settings
**/.toolstarget
**/.vs
**/.vscode
**/.next
**/.cache
**/*.*proj.user
**/*.dbmdl
**/*.jfm
**/charts
**/docker-compose*
**/compose*
**/Dockerfile*
**/node_modules
**/npm-debug.log
**/obj
**/secrets.dev.yaml
**/values.dev.yaml
**/build
**/dist
LICENSE
README.md



================================================
FILE: .editorconfig
================================================
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single

[*.md]
max_line_length = off
trim_trailing_whitespace = false



================================================
FILE: src/index.html
================================================
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Taller de Servicios</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.png">
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body class="mat-typography">
  <app-root></app-root>
</body>
</html>



================================================
FILE: src/main.ts
================================================
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';


platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));



================================================
FILE: src/styles.scss
================================================
@import "ag-grid-community/styles/ag-grid.css";
@import "ag-grid-community/styles/ag-theme-quartz.css";

/* You can add global styles to this file, and also import other style files */
html,
body {
  height: 100%;
  text-size-adjust: 100%;
}

body {
  margin: 0;
  text-size-adjust: 100%;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}

input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

/* Firefox */

input[type="number"] {
  -moz-appearance: textfield;
  appearance: textfield;
}

.mat-mdc-row:hover .mat-mdc-cell {
  background-color: rgb(222, 222, 222);
  cursor: default;
}
.ag-header-cell-label {
  justify-content: center !important;
}
.mat-mdc-card {
  border-radius: 10px !important;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1) !important;
}
@media (min-width: 1024px) {
  td {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    max-width: 12rem;
    padding: 0px 10px;
  }
}
.ag-theme-quartz {
  --ag-font-size: 14px;
  --ag-background-color: #FAFAFA;
  --ag-header-background-color: #FAFAFA;
}
.ag-theme-quartz .ag-header-cell {
  font-size: 14px;
  font-weight: 500;
  color: black;
}
.small-icon-button {
   width: 36px !important;
   height: 38px !important;
   padding: 0px !important;
   display: inline-flex !important;
   align-items: center;
   justify-content: center;

   & > *[role=img] {
      width: 24px;
      height: 24px;
      font-size: 24px;

      svg {
         width: 24px;
         height: 24px;
      }
   }

   .mat-mdc-button-touch-target {
      width: 30px !important;
      height: 30px !important;
   }
}
.green {
  background-color: #25D366;
}

.yellow {
  background-color: #f7f260;
}
.red {
  background-color: #f76060;
}


================================================
FILE: src/app/angular-material.module.ts
================================================
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { OverlayModule } from '@angular/cdk/overlay';
import { CdkTreeModule } from '@angular/cdk/tree';
import { PortalModule } from '@angular/cdk/portal';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatSelectModule } from '@angular/material/select';
import { MatSliderModule } from '@angular/material/slider';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTreeModule } from '@angular/material/tree';
import { MatBadgeModule } from '@angular/material/badge';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatRadioModule } from '@angular/material/radio';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatTooltipModule } from '@angular/material/tooltip';
import { NgxMatSelectSearchModule } from 'ngx-mat-select-search';
import {
  NgxMatDatetimePickerModule,
  NgxMatNativeDateModule,
  NgxMatTimepickerModule
} from '@angular-material-components/datetime-picker';
const materialModules = [
  CdkTreeModule,
  MatAutocompleteModule,
  MatButtonModule,
  MatCardModule,
  MatNativeDateModule,
  MatCheckboxModule,
  MatChipsModule,
  MatDialogModule,
  MatDividerModule,
  MatExpansionModule,
  MatIconModule,
  MatInputModule,
  MatListModule,
  MatMenuModule,
  MatProgressSpinnerModule,
  MatPaginatorModule,
  MatRippleModule,
  MatSelectModule,
  MatSidenavModule,
  MatSliderModule,
  MatSnackBarModule,
  MatSortModule,
  MatTableModule,
  MatTabsModule,
  MatToolbarModule,
  MatFormFieldModule,
  MatButtonToggleModule,
  MatTreeModule,
  OverlayModule,
  PortalModule,
  MatBadgeModule,
  MatGridListModule,
  MatRadioModule,
  MatDatepickerModule,
  MatTooltipModule,
  NgxMatSelectSearchModule,
  NgxMatDatetimePickerModule,
  NgxMatTimepickerModule,
  NgxMatNativeDateModule
];
@NgModule({
  imports: [
    CommonModule,
    ...materialModules
  ],
  exports: [
    ...materialModules
  ],
})
export class AngularMaterialModule { }



================================================
FILE: src/app/app-routing.module.ts
================================================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { FacturaComponent } from './components/factura/factura.component';
import { LogInComponent } from './components/log-in/log-in.component';

import { NotFoundsComponent } from './components/not-founds/not-founds.component';
import { authGuard } from './auth/auth.guard';
import { adminGuard } from './auth/admin.guard';
import { ReporteTablaComponent } from './components/dashboard-admin/reportes/reporte-tabla/reporte-tabla.component';
import { ComprobanteComponent } from './components/comprobante/comprobante.component';

const routes: Routes = [
  { path: '', pathMatch: 'full', redirectTo: 'taller/login' },
  { path: 'taller/login', component: LogInComponent },
  { path: 'taller/reporte/:start/:end', component: ReporteTablaComponent },
  { path: 'taller/factura/:id', component: FacturaComponent },
  { path: 'taller/comprobante/:id', component: ComprobanteComponent },
  { path: 'taller/notFound', component: NotFoundsComponent },
  { path: 'taller/dashboard-admin', canLoad: [adminGuard], loadChildren: () => import('./components/dashboard-admin/dashboard-admin.module').then(x => x.DashboardAdminModule) },
  { path: 'taller/dashboard-tecnico', canLoad: [authGuard], loadChildren: () => import('./components/dashboard-tecnico/dashboard-tecnico.module').then(x => x.DashboardTecnicoModule) },

];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule],
})
export class AppRoutingModule { }



================================================
FILE: src/app/app.component.html
================================================
<router-outlet></router-outlet>



================================================
FILE: src/app/app.component.scss
================================================



================================================
FILE: src/app/app.component.spec.ts
================================================
import { TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule
      ],
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'taller_prod'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('taller_prod');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('.content span')?.textContent).toContain('taller_prod app is running!');
  });
});



================================================
FILE: src/app/app.component.ts
================================================
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  title = 'taller_prod';
}
 


================================================
FILE: src/app/app.module.ts
================================================
import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { AngularMaterialModule } from './angular-material.module';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { LogInComponent } from './components/log-in/log-in.component';
import { FacturaComponent } from './components/factura/factura.component';
import { HashLocationStrategy, LocationStrategy } from '@angular/common';
import { NotFoundsComponent } from './components/not-founds/not-founds.component';
import { ReporteTablaComponent } from './components/dashboard-admin/reportes/reporte-tabla/reporte-tabla.component';
import { ComprobanteComponent } from './components/comprobante/comprobante.component';

@NgModule({
  declarations: [
    AppComponent,
    LogInComponent,
    FacturaComponent,
    NotFoundsComponent,
    ReporteTablaComponent,
    ComprobanteComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    BrowserAnimationsModule,
    AngularMaterialModule,
    HttpClientModule,
    FormsModule,
    ReactiveFormsModule,
  ],
  bootstrap: [AppComponent],
  schemas: [CUSTOM_ELEMENTS_SCHEMA]

})
export class AppModule { }



================================================
FILE: src/app/auth/admin.guard.ts
================================================
import { inject } from '@angular/core';
import { Router } from '@angular/router';
import { Convert } from 'src/app/interfaces/user';


export const adminGuard = () => {

  const router = inject(Router);
  const response = Convert.toUser(sessionStorage.getItem('user_taller') ?? '');
  if (response.tipo == 1) {
    return true;
  }

  // Redirect to the login page
  return router.parseUrl('/taller/notFound');
};



================================================
FILE: src/app/auth/auth.guard.ts
================================================
import { inject } from '@angular/core';
import { Router } from '@angular/router';


export const authGuard = () => {

  const router = inject(Router);
  const response = sessionStorage.getItem('user_taller');
  if (response) {
    return true;
  }

  // Redirect to the login page
  return router.parseUrl('/taller/notFound');
};



================================================
FILE: src/app/components/comprobante/comprobante.component.html
================================================
<div class="container-fluid" id="htmlData">
  <mat-spinner
    [mode]="mode"
    class="mx-auto centrar"
    diameter="50"
    *ngIf="isLoading"
  >
  </mat-spinner>
  <div *ngIf="!isLoading">
    <div class="row">
      <div class="col d-grid justify-content-center">
        <img class="mx-auto my-3" src="./assets/logo.png" width="100" alt="" />
        <h1 class="text-center text-primary">Centro de Servicio Profesional</h1>
      </div>

      <div class="col mt-5 text-center">
        <h1><b>GRUPO FERRETERO DON PEDRO</b></h1>
        <h3>
          CARRETERA SAN MIGUEL A CELAYA KM 2.4 POBLADO DE DON DIEGO CP. 37887
          SAN MIGUEL DE ALLENDE, GUANAJUATO
        </h3>
      </div>

      <div class="col d-grid align-content-center text-center">
        <h1 class="text-danger text-large">
          <b>FOLIO: {{ garantia.id }}</b>
        </h1>
      </div>
    </div>

    <div class="container-margen">
      <div class="row">
        <div class="col d-grid text-center align-content-center">
          <h1 class="titulo text-white">COMPROBANTE DE GARANTÍA</h1>
        </div>
      </div>
      <div class="row mt-5">
        <div class="col-3 d-grid text-center">
          <h1 class="text-primary"><b> DATOS DEL PRODUCTO</b></h1>
        </div>
        <hr />
      </div>
      <div class="row mt-5">
        <div class="col d-grid">
          <h2><b>Producto: </b> {{ garantia.producto }}</h2>
        </div>
        <div class="col d-grid">
          <h2><b>Marca: </b> {{ garantia.marca }}</h2>
        </div>
      </div>
      <div class="row">
        <div class="col d-grid">
          <h2><b>Modelo: </b> {{ garantia.modelo }}</h2>
        </div>
        <div class="col d-grid">
            <h2>
              <b>Fecha de Registro: </b>
              {{ garantia.fecha_registro | date : "dd/MM/yyyy" }}
            </h2>
          </div>
      </div>
      <div class="row mt-5">
        <div class="col-3 d-grid text-center">
          <h1 class="text-primary"><b> DIAGNÓSTICO</b></h1>
        </div>
        <hr />
      </div>
      <div class="row my-3">
        <div class="col">
          <h2>- {{ garantia.motivo }}</h2>
        </div>
      </div>
      <div class="row mt-5">
        <div class="col-3 d-grid text-center">
          <h1 class="text-primary"><b> DATOS DE COMPRA</b></h1>
        </div>
        <hr />
      </div>
      <div class="row mt-5">
        <div class="col d-grid">
          <h2><b>Cantidad: </b> {{ garantia.cantidad }}</h2>
        </div>
        <div class="col d-grid text-center">
          <h2>
            <b>Precio Unitario: </b>
            {{ garantia.costo_unitario | currency : "MXN" : "symbol-narrow" }}
          </h2>
        </div>
        <div class="col d-grid text-end">
          <h2>
            <b>Precio Total: </b>
            {{ garantia.total | currency : "MXN" : "symbol-narrow" }}
          </h2>
        </div>
      </div>
      <div class="row">
        <div class="col d-grid">
          <h2><b>Folio: </b> {{ garantia.folio }}</h2>
        </div>
      </div>
      <div class="row mt-5">
        <div class="col-3 d-grid text-center">
          <h1 class="text-primary"><b> SEGUIMIENTO DE CLIENTE</b></h1>
        </div>
        <hr />
      </div>
      <div class="row mt-5">
        <div class="col d-grid">
          <h2>
            <b> Fecha de Resolución: </b>
            {{ garantia.fecha_resuelto_cliente ?? "" | date : "dd/MM/yyyy" }}
          </h2>
        </div>
        <div class="col d-grid text-end">
          <h2><b>Estado: </b> {{ garantia.estado_cliente }}</h2>
        </div>
      </div>
      <div class="row">
        <div class="col d-grid">
          <h2><b> Autorizado por: </b> {{ garantia.autorizo }}</h2>
        </div>
      </div>
      <div class="row mt-5">
        <div class="col-3 d-grid text-center">
          <h1 class="text-primary"><b> SEGUIMIENTO DE PROVEEDOR</b></h1>
        </div>
        <hr />
      </div>
      <div class="row mt-5">
        <div class="col d-grid">
          <h2>
            <b> Fecha de Solicitud a Proveedor: </b>
            {{ garantia.fecha_proveedor ?? "" | date : "dd/MM/yyyy" }}
          </h2>
        </div>
        <div class="col d-grid text-end">
          <h2>
            <b>Fecha de Resolución con Proveedor: </b>
            {{ garantia.fecha_resuelto_proveedor | date : "dd/MM/yyyy" }}
          </h2>
        </div>
      </div>
      <div class="row">
        <div class="col d-grid">
          <h2><b> Estado: </b> {{ garantia.estado_proveedor }}</h2>
        </div>
      </div>
      <div class="row mt-10">
        <div class="col text-center mx-5">
          <div class="divider"></div>
          <h2>SELLO GRUPO FERRETERO DON PEDRO</h2>
        </div>
        <div class="col text-center mx-5">
          <div class="divider"></div>
          <h2>NOMBRE Y FIRMA DEL CLIENTE</h2>
        </div>
      </div>
    </div>
  </div>
</div>



================================================
FILE: src/app/components/comprobante/comprobante.component.scss
================================================
.titulo {
    padding-top: 15px;
    padding-bottom: 15px;
    background-color: #1368A9;
    font-size: 40px;
  }
  
  hr {
    height: 3px;
    background-color: black;
    opacity: 1;
  }
  .centrar {
    margin-top: 20%;
  }
  .divider {
    height: 2px;
    background-color: black;
    width: 100%;
    margin-top: 1.4rem;
    margin-left: 5px;
  }
  .container-margen {
    margin-right: 5rem;
    margin-left: 5rem;
  
  }
  td {
    border: solid black 1px;
  }
  
  .mt-10 {
    margin-top: 6rem;
  }
  .text-large{
    font-size: 40px;
  }
  
h2 {
  font-size: 25px;
}


================================================
FILE: src/app/components/comprobante/comprobante.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ComprobanteComponent } from './comprobante.component';

describe('ComprobanteComponent', () => {
  let component: ComprobanteComponent;
  let fixture: ComponentFixture<ComprobanteComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ComprobanteComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ComprobanteComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/comprobante/comprobante.component.ts
================================================
import { Component, OnInit } from '@angular/core';
import { ProgressSpinnerMode } from '@angular/material/progress-spinner';
import { ActivatedRoute } from '@angular/router';
import { GarantiasRes } from 'src/app/interfaces/garantias';
import { MainService } from 'src/app/services/main.service';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { Res } from 'src/app/interfaces/response';
@Component({
  selector: 'app-comprobante',
  templateUrl: './comprobante.component.html',
  styleUrls: ['./comprobante.component.scss']
})
export class ComprobanteComponent implements OnInit{
  private route = '/warranty';
  garantia!: GarantiasRes;
  isLoading : boolean = true;
  mode: ProgressSpinnerMode = 'indeterminate';
  constructor(private mainService: MainService, private router: ActivatedRoute, ) { }

  ngOnInit(): void {
    this.getGarantia();
  }

  getGarantia(){
    const routeParams = this.router.snapshot.paramMap;
    const id = routeParams.get('id') ?? '';
    this.mainService.getRequest({id:id}, `${this.route}/by_id`).subscribe((res: Res)=>{
      this.garantia = res.data;

      setTimeout(()=>{
        this.isLoading = false;
      }, 1000);
      setTimeout(()=>{
      this.openPDF();

      }, 1500);

    });
  }
  public openPDF(): void {
    let DATA: any = document.getElementById('htmlData');
    html2canvas(DATA).then((canvas) => {

      const FILEURI = canvas.toDataURL('image/png');
      let PDF = new jsPDF('p', 'mm', 'a4');
      let fileWidth = PDF.internal.pageSize.getWidth();
      let fileHeight =PDF.internal.pageSize.getHeight()-10;
      let y = 10;
      let x = 1;
      PDF.addImage(FILEURI, 'PNG', x, y, fileWidth, fileHeight-55);

      window.open(PDF.output('bloburl'));
    });
  }
}



================================================
FILE: src/app/components/dashboard-admin/dashboard-admin-routing.module.ts
================================================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { DashboardAdminComponent } from './dashboard-admin.component';
import { ReportesComponent } from './reportes/reportes.component';
import { UsuariosComponent } from './usuarios/usuarios.component';
import { ServiciosComponent } from './servicios/servicios.component';
import { ClientesComponent } from './clientes/clientes.component';
import { ExpressComponent } from './express/express.component';
import { GarantiasComponent } from './garantias/garantias.component';
import { ExternosComponent } from './externos/externos.component';
import { adminGuard } from 'src/app/auth/admin.guard';
import { ReporteTablaComponent } from './reportes/reporte-tabla/reporte-tabla.component';

const routes: Routes = [
  {
    path: '',
    component: DashboardAdminComponent,
    canActivate: [adminGuard],
    canLoad: [adminGuard],
    children: [
      { path: '', component: ReportesComponent },
      { path: 'usuarios', component: UsuariosComponent },
      { path: 'servicios', component: ServiciosComponent },
      { path: 'clientes', component: ClientesComponent },
      { path: 'express', component: ExpressComponent },
      { path: 'externos', component: ExternosComponent },
      { path: 'garantias', component: GarantiasComponent },
    ],
  },
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule],
})
export class DashboardAdminRoutingModule {}



================================================
FILE: src/app/components/dashboard-admin/dashboard-admin.component.html
================================================
<mat-toolbar class="justify-content-center"  *ngIf="sidenav.mode === 'over'">
  <button mat-icon-button *ngIf="sidenav.mode === 'over'" (click)="sidenav.toggle()">
    <mat-icon *ngIf="!sidenav.opened">
      menu
    </mat-icon>
    <mat-icon *ngIf="sidenav.opened">
      close
    </mat-icon>
  </button>
  Taller
</mat-toolbar>

<mat-sidenav-container>
  <mat-sidenav #sidenav="matSidenav" class="mat-elevation-z8 fixed">
    <img title="Don Pedro Logo" class="avatar mat-elevation-z8 mx-auto" src="assets/logo.png" />

    <h4>{{ user.nombre }} {{ user.apellido }}</h4>
    <h5>Administrador</h5>

    <mat-divider></mat-divider>
    <button [routerLink]="['/taller/dashboard-admin']" [routerLinkActive]="'selected'" [routerLinkActiveOptions]="{ exact: true }" mat-button class="menu-button">
      <mat-icon>assignment</mat-icon>
      <span>Reportes</span>
    </button>
    <button [routerLink]="['/taller/dashboard-admin/externos']" [routerLinkActive]="'selected'" [routerLinkActiveOptions]="{ exact: true }" mat-button class="menu-button">
      <mat-icon>airport_shuttle</mat-icon>
      <span>Externos</span>
    </button>
    <button [routerLink]="['/taller/dashboard-admin/garantias']" [routerLinkActive]="'selected'" [routerLinkActiveOptions]="{ exact: true }" mat-button class="menu-button">
      <mat-icon>verified</mat-icon>
      <span>GarantÃ­as</span>
    </button>

    <button [routerLink]="['/taller/dashboard-admin/servicios']" [routerLinkActive]="'selected'" [routerLinkActiveOptions]="{ exact: true }" mat-button class="menu-button">
      <mat-icon>build_circle</mat-icon>
      <span>Taller</span>
    </button>

    <button [routerLink]="['/taller/dashboard-admin/express']" [routerLinkActive]="'selected'" [routerLinkActiveOptions]="{ exact: true }" mat-button class="menu-button">
      <mat-icon>bolt</mat-icon>
      <span>Express</span>
    </button>

    <button [routerLink]="['/taller/dashboard-admin/clientes']" [routerLinkActive]="'selected'" [routerLinkActiveOptions]="{ exact: true }" mat-button class="menu-button">
      <mat-icon>groups</mat-icon>
      <span>Clientes</span>
    </button>

    <button [routerLink]="['/taller/dashboard-admin/usuarios']" [routerLinkActive]="'selected'" [routerLinkActiveOptions]="{ exact: true }" mat-button class="menu-button">
      <mat-icon>account_circle</mat-icon>
      <span>Usuarios</span>
    </button>

    <button (click)="logout()" mat-button class="menu-button">
      <mat-icon>logout</mat-icon>
      <span>Cerrar SesiÃ³n</span>
    </button>

  </mat-sidenav>
  <mat-sidenav-content>
    <div class="content d-grid">
      <router-outlet></router-outlet>


    </div>
  </mat-sidenav-content>
</mat-sidenav-container>



================================================
FILE: src/app/components/dashboard-admin/dashboard-admin.component.scss
================================================
.grid-container {
  margin: 20px;
}

.dashboard-card {
  position: absolute;
  top: 15px;
  left: 15px;
  right: 15px;
  bottom: 15px;
}

.more-button {
  position: absolute;
  top: 5px;
  right: 10px;
}

.dashboard-card-content {
  text-align: center;
}

mat-toolbar {
  background: #004a9f;
  stop-color: #003c69;
  color: white;
}
mat-sidenav-container {
  height: -webkit-fill-available;
}
mat-sidenav {
  background: #0062ad;
  color: white;
  padding: 25px;
  text-align: center;
}

mat-divider {
  background-color: white;
  margin-top: 10px;
  margin-bottom: 10px;
}

.menu-button {
  width: 100%;
  display: flex;
  align-items: center;
  font-size: 1rem;
  justify-content: flex-start;
  color: white !important;
  mat-icon {
      margin-right: 8px;
  }
}

.selected {
  color: white;
  background-color: #004a9f;
}

.avatar {
  margin-bottom: 16px;
  padding: 15px;
  width: 150px;
  height: 150px;
  border-radius: 10%;
  background-color: white;
}

.margin-start {
  margin-left: 3rem;
}

.content {
  min-height: 100vh;
}



================================================
FILE: src/app/components/dashboard-admin/dashboard-admin.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DashboardAdminComponent } from './dashboard-admin.component';

describe('DashboardAdminComponent', () => {
  let component: DashboardAdminComponent;
  let fixture: ComponentFixture<DashboardAdminComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ DashboardAdminComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(DashboardAdminComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/dashboard-admin.component.ts
================================================
import { map } from 'rxjs/operators';
import { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';
import { Component, ViewChild, OnInit } from '@angular/core';
import { MatSidenav } from '@angular/material/sidenav';
import { Router, NavigationEnd } from '@angular/router';
import { Convert, User } from 'src/app/interfaces/user';

@Component({
  selector: 'app-dashboard-admin',
  templateUrl: './dashboard-admin.component.html',
  styleUrls: ['./dashboard-admin.component.scss']
})
export class DashboardAdminComponent {
 /** Based on the screen size, switch from standard to one column per row */
 @ViewChild(MatSidenav)
 sidenav!: MatSidenav;
 user!: User;

 constructor(private breakpointObserver: BreakpointObserver, private observer: BreakpointObserver, private router: Router) {
  this.user = Convert.toUser(sessionStorage.getItem('user_taller')??'');
 }
 ngAfterViewInit() {
   this.observer.observe(['(max-width: 1200px)']).subscribe((res) => {
     setTimeout(() => {
       if (res.matches) {
         this.sidenav.mode = 'over';
         this.sidenav.close();
       } else {
         this.sidenav.mode = 'side';
         this.sidenav.open();
       }
     }, 300);

   });

 }
 logout(){
  sessionStorage.clear();
  this.router.navigate(['/taller/login']);
}

}



================================================
FILE: src/app/components/dashboard-admin/dashboard-admin.module.ts
================================================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { DashboardAdminRoutingModule } from './dashboard-admin-routing.module';
import { DashboardAdminComponent } from './dashboard-admin.component';
import { AngularMaterialModule } from '../../angular-material.module';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { ReportesComponent } from './reportes/reportes.component';
import { ServiciosComponent } from './servicios/servicios.component';
import { ClientesComponent } from './clientes/clientes.component';
import { UsuariosComponent } from './usuarios/usuarios.component';
import { ServicioDialogComponent } from './servicios/servicio-dialog/servicio-dialog.component';
import { ClienteDialogComponent } from './clientes/cliente-dialog/cliente-dialog.component';
import { UsuarioDialogComponent } from './usuarios/usuario-dialog/usuario-dialog.component';
import { CSVService } from '../../services/csv.service';
import { ExpressComponent } from './express/express.component';
import { ExpressAdminComponent } from './express/express-admin/express-admin.component';
import { GarantiasComponent } from './garantias/garantias.component';
import { GarantiaDialogComponent } from './garantias/garantia-dialog/garantia-dialog.component';
import { ExternosComponent } from './externos/externos.component';
import { ExternosDialogComponent } from './externos/externos-dialog/externos-dialog.component';
import { ReporteTablaComponent } from './reportes/reporte-tabla/reporte-tabla.component';
import { EarningsChartComponent } from './graficas/earnings-chart/earnings-chart.component';
import { StatusChartComponent } from './graficas/status-chart/status-chart.component';
import { TechChartComponent } from './graficas/tech-chart/tech-chart.component';
import { AgGridModule } from 'ag-grid-angular';
import { ButtonRendererComponent } from './ag-grid/button-renderer/button-renderer.component';
import { CurrencyFormatComponent } from './ag-grid/currency-format/currency-format.component';
import { DatetimeFormatComponent } from './ag-grid/datetime-format/datetime-format.component';


@NgModule({
  declarations: [
    DashboardAdminComponent,
    ReportesComponent,
    ServiciosComponent,
    ServicioDialogComponent,
    ClientesComponent,
    ClienteDialogComponent,
    UsuariosComponent,
    UsuarioDialogComponent,
    ExpressComponent,
    ExpressAdminComponent,
    ExternosComponent,
    GarantiasComponent,
    GarantiaDialogComponent,
    ExternosComponent,
    ExternosDialogComponent,
    EarningsChartComponent,
    StatusChartComponent,
    TechChartComponent,
    ButtonRendererComponent,
    CurrencyFormatComponent,
    DatetimeFormatComponent
  ],
  imports: [
    CommonModule,
    DashboardAdminRoutingModule,
    FormsModule,
    ReactiveFormsModule,
    AngularMaterialModule,
    AgGridModule,

  ],
  providers: [CSVService]
})
export class DashboardAdminModule { }



================================================
FILE: src/app/components/dashboard-admin/ag-grid/button-renderer/button-renderer.component.html
================================================
<button
mat-icon-button
[color]="color"
class="small-icon-button"
[matTooltip]="tooltip"
>
<mat-icon>{{icon}}</mat-icon>
</button>


================================================
FILE: src/app/components/dashboard-admin/ag-grid/button-renderer/button-renderer.component.scss
================================================
button {
    display: flex;
}


================================================
FILE: src/app/components/dashboard-admin/ag-grid/button-renderer/button-renderer.component.ts
================================================
import { Component } from '@angular/core';
import { ICellRendererAngularComp } from 'ag-grid-angular';

@Component({
  selector: 'app-button-renderer',
  templateUrl: './button-renderer.component.html',
  styleUrls: ['./button-renderer.component.scss'],
})
export class ButtonRendererComponent implements ICellRendererAngularComp {
  params: any;
  icon!: string;
  color!: string;
  tooltip!: string;
  agInit(params: any): void {
    this.params = params;
    this.icon = this.params.icon || null;
    this.color = this.params.color || null;
    this.tooltip = this.params.tooltip || null;

  }

  refresh(params: any): boolean {
    return true;
  }

}



================================================
FILE: src/app/components/dashboard-admin/ag-grid/currency-format/currency-format.component.ts
================================================
import { Component } from '@angular/core';
import { ICellRendererAngularComp } from 'ag-grid-angular';

@Component({
  selector: 'app-currency-format',
  template: `{{ value | currency:'USD':'symbol':'1.2-2' }}`,
})
export class CurrencyFormatComponent implements ICellRendererAngularComp {
  params: any;
  value!: number;
  constructor(){}
  agInit(params: any): void {
    this.params = params;
    this.value = this.params.value;
  }
  refresh(params: any): boolean {
    return true;
  }
}



================================================
FILE: src/app/components/dashboard-admin/ag-grid/datetime-format/datetime-format.component.ts
================================================
import { Component } from '@angular/core';
import { ICellRendererAngularComp } from 'ag-grid-angular';

@Component({
  selector: 'app-datetime-format',
  template: '{{ value | date : "dd/MM/yyyy, h:mm a" }}',
})
export class DatetimeFormatComponent implements ICellRendererAngularComp {
  params: any;
  value!: number;
  constructor(){}
  agInit(params: any): void {
    this.params = params;
    this.value = this.params.value;
  }
  refresh(params: any): boolean {
    return true;
  }
}



================================================
FILE: src/app/components/dashboard-admin/clientes/clientes.component.html
================================================
<div class="container-fluid">
  <div class="row">
    <div class="col text-center">
      <h2 class="mt-3">Clientes</h2>
    </div>
  </div>
  <div class="row">
    <div class="col">
      <mat-form-field [hidden]="!(this.dataSource.data.length > 0)">
        <mat-label>Buscar</mat-label>
        <input matInput (keyup)="applyFilter($event)" #input />
      </mat-form-field>
    </div>
    <div class="col text-end">
      <button
        mat-raised-button
        class="mt-3"
        color="primary"
        (click)="createCliente()"
      >
        <mat-icon>add</mat-icon> Agregar Cliente
      </button>
    </div>
  </div>

  <div class="w-100" [hidden]="!(this.dataSource.data!.length > 0)">
    <table
      mat-table
      [dataSource]="dataSource"
      class="w-100 text-center"
      matSort
      matSortActive="id"
      matSortDirection="desc"
      matSortDisableClear
    >
      <!--- Note that these columns can be defined in any order.
          The actual rendered columns are set as a property on the row definition" -->

      <!-- ID Column -->
      <ng-container matColumnDef="id">
        <th
          mat-header-cell
          *matHeaderCellDef
          mat-sort-header
          class="text-center"
        >
          No.
        </th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.id }}
        </td>
      </ng-container>

      <!-- Nombre Column -->
      <ng-container matColumnDef="nombre">
        <th mat-header-cell *matHeaderCellDef class="text-center">Nombre</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.nombre }}
        </td>
      </ng-container>

      <!-- Apellido Column -->
      <ng-container matColumnDef="apellido">
        <th mat-header-cell *matHeaderCellDef class="text-center">Apellido</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.apellido }}
        </td>
      </ng-container>

      <!-- Telefono Column -->
      <ng-container matColumnDef="telefono">
        <th mat-header-cell *matHeaderCellDef class="text-center">TelÃ©fono</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.telefono }}
        </td>
      </ng-container>

      <!-- CURP Column -->
      <ng-container matColumnDef="curp">
        <th mat-header-cell *matHeaderCellDef class="text-center">
          RFC sin homoclave
        </th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.curp }}
        </td>
      </ng-container>
      <!-- Acciones Column -->
      <ng-container matColumnDef="acciones">
        <th mat-header-cell *matHeaderCellDef class="text-center">Acciones</th>
        <td
          mat-cell
          *matCellDef="let element"
          class="text-center"
          class="text-center"
        >
          <button
            mat-icon-button
            (click)="updateCliente(element)"
            color="secondary"
            matTooltip="Editar Cliente"
          >
            <mat-icon>edit</mat-icon>
          </button>

          <button
            mat-icon-button
            (click)="deleteCliente(element.id, element.nombre)"
            color="warn"
            matTooltip="Eliminar Cliente"
          >
            <mat-icon>delete</mat-icon>
          </button>
        </td>
      </ng-container>

      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns"></tr>
    </table>
    <mat-paginator
      [pageSizeOptions]="[10, 25, 50, 100]"
      aria-label="Select page of users"
    ></mat-paginator>
  </div>
  <h2 *ngIf="this.dataSource.data.length === 0" class="text-center mt-5">
    No hay registros
  </h2>
</div>



================================================
FILE: src/app/components/dashboard-admin/clientes/clientes.component.scss
================================================
table, mat-paginator {
  background-color: transparent;
}



================================================
FILE: src/app/components/dashboard-admin/clientes/clientes.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ClientesComponent } from './clientes.component';

describe('ClientesComponent', () => {
  let component: ClientesComponent;
  let fixture: ComponentFixture<ClientesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ClientesComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ClientesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/clientes/clientes.component.ts
================================================
import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';
import { MainService } from 'src/app/services/main.service';
import Swal from 'sweetalert2';
import { ClientesRes } from '../../../interfaces/clientes';
import { ClienteDialogComponent } from './cliente-dialog/cliente-dialog.component';
import { Res } from 'src/app/interfaces/response';
import { MatSnackBar } from '@angular/material/snack-bar';

@Component({
  selector: 'app-clientes',
  templateUrl: './clientes.component.html',
  styleUrls: ['./clientes.component.scss'],
})
export class ClientesComponent implements OnInit {
  private route = '/client';
  clientes!: ClientesRes[];
  displayedColumns: string[] = [
    'id',
    'nombre',
    'apellido',
    'telefono',
    'acciones',
  ];
  dataSource = new MatTableDataSource<ClientesRes>();
  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;

  constructor(
    private snackbar: MatSnackBar,
    private mainService: MainService,
    public dialog: MatDialog
  ) {}
  ngAfterViewInit() {
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
  }

  ngOnInit(): void {
    this.getClientes();
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }

  getClientes() {
    this.mainService
      .getRequest({}, `${this.route}/get_active_clients`)
      .subscribe((res: Res) => {
        if (res.error) {
          this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
            duration: 4000,
            horizontalPosition: 'center',
            verticalPosition: 'top',
          });
        } else {
          this.dataSource.data = res.data;
        }
      });
  }
  deleteCliente(id: String, nombre: String) {
    Swal.fire({
      title:
        'Â¿Seguro que quiere eliminar a ' +
        nombre +
        ' del registro de clientes?',
      text: 'Esta operaciÃ³n no se puede revertir.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Eliminar',
      cancelButtonText: 'Cancelar',
    }).then((result) => {
      if (result.value) {
        this.mainService
          .deleteRequest({}, `${this.route}/${id}`)
          .subscribe((data) => {
            this.getClientes();
            Swal.fire(
              'Eliminado',
              nombre + ' ha sido eliminado del registro de clientes.',
              'success'
            );
          });
      } else if (result.dismiss === Swal.DismissReason.cancel) {
        Swal.fire(
          'Haz cancelado la operaciÃ³n.',
          'NingÃºn registro eliminado',
          'error'
        );
      }
    });
  }
  createCliente() {
    const dialogRef = this.dialog.open(ClienteDialogComponent, {
      width: '40%',
      data: null,
    });
    dialogRef.afterClosed().subscribe((result: ClientesRes) => {
      if (result) {
        Swal.fire(
          'Cliente Registrado',
          'Se ha registrado el cliente ' +
            result.nombre +
            ' ' +
            result.apellido,
          'success'
        );
        this.getClientes();
      }
    });
  }

  updateCliente(cliente: ClientesRes) {
    const dialogRef = this.dialog.open(ClienteDialogComponent, {
      width: '40%',
      data: cliente,
    });
    dialogRef.afterClosed().subscribe((result: ClientesRes) => {
      if (result) {
        Swal.fire(
          'Cliente Actualizado',
          'Se ha actualizado el cliente ' +
            result.nombre +
            ' ' +
            result.apellido,
          'success'
        );
        this.getClientes();
      }
    });
  }
}



================================================
FILE: src/app/components/dashboard-admin/clientes/cliente-dialog/cliente-dialog.component.html
================================================
<h1 mat-dialog-title class="text-center">{{ title }} Cliente</h1>
<form [formGroup]="form">
  <div mat-dialog-content class="text-center">
    <div class="row mb-2">
      <mat-form-field class="w-50">
        <mat-label>Nombre</mat-label>
        <input
          formControlName="nombre"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-error *ngIf="form.controls['nombre'].hasError('required')">
          El nombre es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>person</mat-icon>
      </mat-form-field>

      <mat-form-field class="w-50">
        <mat-label>Apellido</mat-label>

        <input
          formControlName="apellido"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-error *ngIf="form.controls['apellido'].hasError('required')">
          El apellido es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>people</mat-icon>
      </mat-form-field>
    </div>

    <mat-form-field class="w-100 mb-2">
      <mat-label>TelÃ©fono</mat-label>

      <input
        pattern="^[0-9]*$"
        formControlName="telefono"
        matInput
        type="text"
        maxlength="10"
        minlength="10"
      />
      <mat-error *ngIf="form.controls['telefono'].hasError('required')">
        El telÃ©fono es <strong> requerido </strong>
      </mat-error>
      <mat-error *ngIf="form.controls['telefono'].hasError('minlength')">
        El telÃ©fono debe tener mÃ­nimo <strong> 10 dÃ­gitos </strong>
      </mat-error>
      <mat-error *ngIf="form.controls['telefono'].hasError('pattern')">
        El telÃ©fono debe tener solo <strong> nÃºmeros </strong>
      </mat-error>

      <mat-icon matSuffix>phone</mat-icon>
    </mat-form-field>
    <mat-form-field class="w-100">
      <mat-label>RFC (opcional)</mat-label>

      <input formControlName="curp" matInput type="text" />
      <mat-icon matSuffix>badge</mat-icon>
    </mat-form-field>
  </div>
  <div mat-dialog-actions align="end">
    <button
      mat-button
      *ngIf="isCreateMode()"
      [disabled]="form.invalid"
      (click)="onAdd()"
    >
      Agregar
    </button>
    <button
      mat-button
      *ngIf="isUpdateMode()"
      [disabled]="form.invalid"
      (click)="onAdd()"
    >
      Actualizar
    </button>
    <button mat-button (click)="onNoClick()">Cancelar</button>
  </div>
</form>



================================================
FILE: src/app/components/dashboard-admin/clientes/cliente-dialog/cliente-dialog.component.scss
================================================



================================================
FILE: src/app/components/dashboard-admin/clientes/cliente-dialog/cliente-dialog.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ClienteDialogComponent } from './cliente-dialog.component';

describe('ClienteDialogComponent', () => {
  let component: ClienteDialogComponent;
  let fixture: ComponentFixture<ClienteDialogComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ClienteDialogComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ClienteDialogComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/clientes/cliente-dialog/cliente-dialog.component.ts
================================================
import { Component, Inject } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { ClientesRes } from '../../../../interfaces/clientes';
import { MainService } from 'src/app/services/main.service';
import { Res } from 'src/app/interfaces/response';

@Component({
  selector: 'app-cliente-dialog',
  templateUrl: './cliente-dialog.component.html',
  styleUrls: ['./cliente-dialog.component.scss'],
})
export class ClienteDialogComponent {
  private route = '/client';
  form!: FormGroup;
  mode!: Number;
  title!: String;
  constructor(
    private fb: FormBuilder,
    public dialogRef: MatDialogRef<ClienteDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: ClientesRes,
    private mainService: MainService,
    private snackbar: MatSnackBar
  ) {
    if (this.data) {
      this.mode = 1;
      this.title = 'Actualizar';
      this.form = this.fb.group({
        id: [this.data.id, Validators.required],
        nombre: [this.data.nombre, Validators.required],
        apellido: [this.data.apellido, Validators.required],
        telefono: [
          this.data.telefono,
          [
            Validators.required,
            Validators.minLength(10),
            Validators.pattern('^[0-9]*$'),
          ],
        ],
        curp: [this.data.curp],
      });
    } else {
      this.mode = 0;
      this.title = 'Nuevo';

      this.form = this.fb.group({
        nombre: ['', Validators.required],
        apellido: ['', Validators.required],
        telefono: [
          '',
          [
            Validators.required,
            Validators.minLength(10),
            Validators.pattern('^[0-9]*$'),
          ],
        ],
        curp: [null],
      });
    }
  }


  onAdd(): void {
    const cliente: ClientesRes = this.form.value;
    if (this.isCreateMode()) {
      this.mainService
        .postRequest(cliente, this.route)
        .subscribe((res: Res) => {
          if (res.error) {
            this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
              duration: 4000,
              horizontalPosition: 'center',
              verticalPosition: 'top',
            });
          } else {
            this.dialogRef.close(cliente);
          }
        });
    } else {
      this.mainService.putRequest(cliente, this.route).subscribe((res: Res) => {
        if (res.error) {
          this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
            duration: 4000,
            horizontalPosition: 'center',
            verticalPosition: 'top',
          });
        } else {
          this.dialogRef.close(cliente);
        }
      });
    }
  }
  isCreateMode() {
    return this.mode === 0;
  }

  isUpdateMode() {
    return this.mode === 1;
  }
  onNoClick(): void {
    this.dialogRef.close();
  }
}



================================================
FILE: src/app/components/dashboard-admin/express/express.component.html
================================================
<div class="container-fluid">
  <div class="row">
    <div class="col text-center">
      <h2 class="mt-3">Express</h2>
    </div>
  </div>
  <div class="row align-items-center">
    <div class="col">
      <button mat-raised-button class="me-2 csv-button" (click)="getCSVMes()">
        <mat-icon>save_alt</mat-icon> Descargar Excel
      </button>

    </div>
    <div class="col text-center">
      <mat-form-field class="mt-3">
        <mat-label>Mes y AÃ±o</mat-label>
        <input matInput [matDatepicker]="dp" [formControl]="date" />
        <mat-datepicker-toggle matSuffix [for]="dp"></mat-datepicker-toggle>
        <mat-datepicker
          #dp
          startView="year"
          (monthSelected)="setMonthAndYear($event, dp)"
          panelClass="month-picker"
        >
        </mat-datepicker>
      </mat-form-field>
    </div>
    <div class="col text-end">
   
      <button mat-raised-button color="primary" (click)="createServicio()">
        <mat-icon>add</mat-icon> Nuevo Express
      </button>
    </div>
  </div>
  <ag-grid-angular
    class="ag-theme-quartz d-grid"
    style="width: 100%; height: 80vh"
    [pagination]="true"
    [columnDefs]="columnDefs"
    [defaultColDef]="defaultColDef"
    [autoSizeStrategy]="autoSizeStrategy"
    [rowData]="rowData"
    [rowSelection]="'multiple'"
    [paginationPageSize]="paginationPageSize"
    [paginationPageSizeSelector]="paginationPageSizeSelector"
    [animateRows]="true"
    (gridReady)="onGridReady($event)"
    (cellClicked)="onCellClicked($event)"
  ></ag-grid-angular>
</div>



================================================
FILE: src/app/components/dashboard-admin/express/express.component.scss
================================================
.csv-button {
  color: white;
  background-color: #25D366;
}
table, mat-paginator {
  background-color: transparent;
}



================================================
FILE: src/app/components/dashboard-admin/express/express.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ExpressComponent } from './express.component';

describe('ExpressComponent', () => {
  let component: ExpressComponent;
  let fixture: ComponentFixture<ExpressComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ExpressComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ExpressComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/express/express.component.ts
================================================
import { Component, OnInit, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import {
  MomentDateAdapter,
  MAT_MOMENT_DATE_ADAPTER_OPTIONS,
} from '@angular/material-moment-adapter';
import {
  DateAdapter,
  MAT_DATE_FORMATS,
  MAT_DATE_LOCALE,
} from '@angular/material/core';
import { MatDatepicker } from '@angular/material/datepicker';
import * as _moment from 'moment';
// tslint:disable-next-line:no-duplicate-imports
import { Moment } from 'moment';
import 'moment/locale/es';
import Swal from 'sweetalert2';
import { UntypedFormControl } from '@angular/forms';
import * as moment from 'moment';
import { ExpressAdminComponent } from './express-admin/express-admin.component';
import { MainService } from 'src/app/services/main.service';
import { ExpressRes, Convert } from 'src/app/interfaces/express';
import { Res } from 'src/app/interfaces/response';
import { MatSnackBar } from '@angular/material/snack-bar';
import {
  CellClickedEvent,
  ColDef,
  GridReadyEvent,
  SizeColumnsToContentStrategy,
  SizeColumnsToFitGridStrategy,
  SizeColumnsToFitProvidedWidthStrategy,
  ValueFormatterParams,
} from 'ag-grid-community';
import { ButtonRendererComponent } from '../ag-grid/button-renderer/button-renderer.component';
import { AgGridAngular } from 'ag-grid-angular';
import { CurrencyFormatComponent } from '../ag-grid/currency-format/currency-format.component';
export const MY_FORMATS = {
  parse: {
    dateInput: 'MM/YYYY',
  },
  display: {
    dateInput: 'MM/YYYY',
    monthYearLabel: 'MMMM YYYY',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'MMMM YYYY',
  },
};
@Component({
  selector: 'app-express',
  templateUrl: './express.component.html',
  styleUrls: ['./express.component.scss'],
  providers: [
    { provide: MAT_DATE_LOCALE, useValue: 'es-ES' },
    {
      provide: DateAdapter,
      useClass: MomentDateAdapter,
      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],
    },

    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },
  ],
})
export class ExpressComponent {
  private route = '/express';
  date = new UntypedFormControl(moment());
  public columnDefs: ColDef[] = [
    {
      headerName: 'No.',
      field: 'id',
      cellStyle: { textAlign: 'center' },
      width: 250

    },
    {
      headerName: 'Fecha',
      field: 'fecha',
      hide: true
    },
    {
      headerName: 'Encargado',
      field: 'encargado',
      cellStyle: { textAlign: 'center' },
      width: 270
    },
    {
      headerName: 'Herramienta',
      field: 'herramienta',
      cellStyle: { textAlign: 'center' },
      width: 270
    },
    {
      headerName: 'Cotizacion',
      field: 'cotizacion',
      cellStyle: { textAlign: 'center' },
      width: 270

    },
    {
      headerName: 'Falla',
      field: 'falla',
      cellStyle: { textAlign: 'center' },
      width: 270

    },
    {
      headerName: 'Importe',
      field: 'importe',
      cellRenderer: CurrencyFormatComponent,
      cellStyle: { textAlign: 'center' },
      width: 260,
    },
    {
      headerName: '',
      field: 'delete',
      cellRenderer: ButtonRendererComponent,
      cellRendererParams: {
        icon: 'delete',
        color: 'warn',
        tooltip: 'Eliminar Registro',
      },
      cellStyle: { textAlign: 'center' },

      width: 80,
      flex: 1,
      filter: false
    },
  ];
  public defaultColDef: ColDef = {
    sortable: true,
    filter: true,
  };
  public autoSizeStrategy:
    | SizeColumnsToFitGridStrategy
    | SizeColumnsToFitProvidedWidthStrategy
    | SizeColumnsToContentStrategy = {
    type: 'fitGridWidth',

  };
  public rowData: ExpressRes[] = [];
  public paginationPageSizeSelector = [20, 50, 100];
  public paginationPageSize = 20;
  @ViewChild(AgGridAngular) agGrid!: AgGridAngular;

  constructor(
    private snackbar: MatSnackBar,
    private mainService: MainService,
    public dialog: MatDialog
  ) {}

  getExpress() {
    this.mainService
      .getRequest(
        { month: this.date.value.month() + 1, year: this.date.value.year() },
        `${this.route}/by_month`
      )
      .subscribe((res: Res) => {
        if (res.error) {
          this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
            duration: 4000,
            horizontalPosition: 'center',
            verticalPosition: 'top',
          });
        } else {
          this.rowData = res.data;
        }
      });
  }
  onGridReady(params: GridReadyEvent) {
    this.getExpress();
  }
  onCellClicked(e: CellClickedEvent): void {
    const id = e.column.getColId();
    if (id == 'delete') {
      this.deleteServicio(e.data);
    } else {
      this.updateServicio(e.data);
    }
  }
  setMonthAndYear(
    normalizedMonthAndYear: Moment,
    datepicker: MatDatepicker<Moment>
  ) {
    const ctrlValue = this.date.value;
    ctrlValue.month(normalizedMonthAndYear.month());
    ctrlValue.year(normalizedMonthAndYear.year());
    this.date.setValue(ctrlValue);
    this.getExpress();
    datepicker.close();
  }
  createServicio() {
    const dialogRef = this.dialog.open(ExpressAdminComponent, {
      width: '50%',
      data: null,
    });
    dialogRef.afterClosed().subscribe((result: ExpressRes) => {
      if (result) {
        Swal.fire({
          position: 'center',
          icon: 'success',
          title: 'Se ha registrado el servicio correctamente.',
          showConfirmButton: false,
          timer: 1500,
        });
        this.getExpress();
      }
    });
  }
  updateServicio(servicio: ExpressRes) {
    const dialogRef = this.dialog.open(ExpressAdminComponent, {
      width: '50%',
      data: servicio,
    });
    dialogRef.afterClosed().subscribe((result: ExpressRes) => {
      if (result) {
        Swal.fire({
          position: 'center',
          icon: 'success',
          title: 'Se ha actualizado el servicio correctamente.',
          showConfirmButton: false,
          timer: 1500,
        });
        this.getExpress();
      }
    });
  }

  deleteServicio(express:ExpressRes) {
    Swal.fire({
      title: 'Â¿Seguro que quiere eliminar el servicio #' + express.id + '?',
      text: 'Esta operaciÃ³n no se puede revertir.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Eliminar',
      cancelButtonText: 'Cancelar',
    }).then((result) => {
      if (result.value) {
        this.mainService
          .deleteRequest({}, `${this.route}/${express.id}`)
          .subscribe((data) => {
            this.getExpress();
            Swal.fire(
              'Eliminado',
              'El servicio #' + express.id + ' ha sido eliminado del registro.',
              'success'
            );
          });
      } else if (result.dismiss === Swal.DismissReason.cancel) {
        Swal.fire(
          'Haz cancelado la operaciÃ³n.',
          'NingÃºn registro eliminado',
          'error'
        );
      }
    });
    this.getExpress();
  }
  getCSVMes() {
    this.agGrid.api.exportDataAsCsv({ allColumns: true, columnSeparator: ';' });
  }
}



================================================
FILE: src/app/components/dashboard-admin/express/express-admin/express-admin.component.html
================================================
<div class="col text-center">
  <h1 mat-dialog-title>
    {{ title }} Express {{ isUpdateMode() ? data.id : "" }}
  </h1>
</div>

<form [formGroup]="form" class="mt-3">
  <div mat-dialog-content class="text-center">
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Encargado</mat-label>
        <mat-select [formControl]="usuariosControl" #singleSelectUsuarios>
          <mat-option>
            <ngx-mat-select-search
              placeholderLabel="Buscar usuario..."
              noEntriesFoundLabel="No se encontraron usuarios"
              [formControl]="usuariosFiltro"
            ></ngx-mat-select-search>
          </mat-option>
          <mat-option
            *ngFor="let usuario of usuariosFiltrados | async"
            [value]="usuario"
          >
            {{ usuario.nombre }} {{ usuario.apellido }} - {{ usuario.curp }}
          </mat-option>
        </mat-select>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Herramienta</mat-label>

        <input
          formControlName="herramienta"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-error *ngIf="form.controls['herramienta'].hasError('required')">
          La herramienta es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>build</mat-icon>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field>
        <mat-label>Falla Detectada</mat-label>
        <textarea
          oninput="this.value = this.value.toUpperCase()"
          matInput
          formControlName="falla"
        ></textarea>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Cotizacion</mat-label>

        <input formControlName="cotizacion" matInput type="text" />

        <mat-icon matSuffix>tag</mat-icon>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Importe</mat-label>

        <input formControlName="importe" matInput type="number" />

        <mat-icon matSuffix>attach_money</mat-icon>
      </mat-form-field>
    </div>
  </div>
  <div mat-dialog-actions align="end">
    <button
      mat-button
      *ngIf="isUpdateMode()"
      [disabled]="form.invalid"
      (click)="onAdd()"
    >
      Actualizar
    </button>
    <button
      mat-button
      *ngIf="isCreateMode()"
      [disabled]="form.invalid"
      (click)="onAdd()"
    >
      Agregar
    </button>
    <button mat-button (click)="onNoClick()">Cancelar</button>
  </div>
</form>



================================================
FILE: src/app/components/dashboard-admin/express/express-admin/express-admin.component.scss
================================================



================================================
FILE: src/app/components/dashboard-admin/express/express-admin/express-admin.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ExpressAdminComponent } from './express-admin.component';

describe('ExpressAdminComponent', () => {
  let component: ExpressAdminComponent;
  let fixture: ComponentFixture<ExpressAdminComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ExpressAdminComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ExpressAdminComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/express/express-admin/express-admin.component.ts
================================================
import { Component, Inject, OnInit, ViewChild } from '@angular/core';
import {
  UntypedFormBuilder,
  UntypedFormControl,
  UntypedFormGroup,
  Validators,
} from '@angular/forms';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatSelect } from '@angular/material/select';
import {
  MatDialog,
  MatDialogRef,
  MAT_DIALOG_DATA,
} from '@angular/material/dialog';
import {
  MomentDateAdapter,
  MAT_MOMENT_DATE_ADAPTER_OPTIONS,
} from '@angular/material-moment-adapter';
import {
  DateAdapter,
  MAT_DATE_FORMATS,
  MAT_DATE_LOCALE,
} from '@angular/material/core';
import * as _moment from 'moment';
import 'moment/locale/es';

import { User } from 'src/app/interfaces/user';
import { ReplaySubject, Subject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { MainService } from 'src/app/services/main.service';
import { ExpressRes } from 'src/app/interfaces/express';
import { Res } from 'src/app/interfaces/response';
import * as moment from 'moment';

export const MY_FORMATS = {
  parse: {
    dateInput: 'DD/MM/YYYY',
  },
  display: {
    dateInput: 'DD/MM/YYYY',
    monthYearLabel: 'DD MMMM YYYY',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'DD MMMM YYYY',
  },
};
@Component({
  selector: 'app-express-admin',
  templateUrl: './express-admin.component.html',
  styleUrls: ['./express-admin.component.scss'],
  providers: [
    { provide: MAT_DATE_LOCALE, useValue: 'es-ES' },
    {
      provide: DateAdapter,
      useClass: MomentDateAdapter,
      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],
    },

    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },
  ],
})
export class ExpressAdminComponent implements OnInit {
  private route = '/express';
  form!: UntypedFormGroup;
  mode!: Number;
  title!: String;
  usuarios!: User[];
  public usuariosFiltro: UntypedFormControl = new UntypedFormControl();
  public usuariosControl: UntypedFormControl = new UntypedFormControl();
  public usuariosFiltrados: ReplaySubject<User[]> = new ReplaySubject<User[]>(
    1
  );

  protected _onDestroy = new Subject<void>();

  @ViewChild('singleSelectUsuarios') singleSelectUsuarios!: MatSelect;
  constructor(
    private fb: UntypedFormBuilder,
    public dialogRef: MatDialogRef<ExpressAdminComponent>,
    @Inject(MAT_DIALOG_DATA) public data: ExpressRes,
    private mainService: MainService,
    private snackbar: MatSnackBar
  ) {
    if (this.data) {
      this.mode = 1;
      this.title = 'Actualizar';

      this.form = this.fb.group({
        id: [this.data.id, Validators.required],
        herramienta: [this.data.herramienta, Validators.required],
        fecha: [this.data.fecha, Validators.required],
        falla: [this.data.falla, Validators.required],
        id_usuario: [this.data.id_usuario, Validators.required],
        cotizacion: [this.data.cotizacion],
        importe: [this.data.importe],
      });
    } else {
      this.mode = 0;
      this.title = 'Nuevo';
      this.form = this.fb.group({
        herramienta: ['', Validators.required],
        fecha: [moment().format("YYYY-MM-DD")],
        falla: ['', Validators.required],
        id_usuario: ['', Validators.required],
        cotizacion: [null],
        importe: [null],
      });
    }
  }

  ngOnInit(): void {
    this.getMenus();
    this.usuariosControl.valueChanges.subscribe((data) => {
      this.form.controls['id_usuario'].setValue(data.id);
    });
    this.usuariosFiltro.valueChanges
      .pipe(takeUntil(this._onDestroy))
      .subscribe(() => {
        this.filtrarUsuarios();
      });
  }
  ngAfterViewInit(): void {
    this.setInitialValueUsuarios();
  }
  protected filtrarUsuarios() {
    if (!this.usuarios) {
      return;
    }
    // get the search keyword
    let search = this.usuariosFiltro.value;
    if (!search) {
      this.usuariosFiltrados.next(this.usuarios.slice());
      return;
    } else {
      search = search.toLowerCase();
    }
    this.usuariosFiltrados.next(
      this.usuarios.filter((usuario) => {
        let filtrado =
          usuario.nombre + ' ' + usuario.apellido + ' ' + usuario.curp;
        return filtrado.toLowerCase().indexOf(search) > -1;
      })
    );
  }
  protected setInitialValueUsuarios() {
    this.usuariosFiltrados
      .pipe(take(1), takeUntil(this._onDestroy))
      .subscribe(() => {
        this.singleSelectUsuarios.compareWith = (a: User, b: User) =>
          a && b && a.id === b.id;
      });
  }
  getMenus() {
    this.mainService
      .getRequest({}, `/user/get_active_users`)
      .subscribe((res: Res) => {
        if (this.isUpdateMode()) {
          this.usuarios = res.data;
          this.usuariosFiltrados.next(this.usuarios.slice());
          let filtro = res.data.filter(
            (usuario: User) => usuario.id == this.data.id_usuario
          );
          this.usuariosControl.setValue(filtro[0]);
        } else {
          this.usuarios = res.data;
          this.usuariosFiltrados.next(this.usuarios.slice());
        }
      });
  }
  onAdd(): void {
    const servicio: ExpressRes = this.form.value;
    if (this.isCreateMode()) {
      this.mainService
        .postRequest(servicio, this.route)
        .subscribe((res: Res) => {
          if (res.error) {
            this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
              duration: 4000,
              horizontalPosition: 'center',
              verticalPosition: 'top',
            });
          } else {
            this.dialogRef.close(servicio);
          }
        });
    } else {
      this.mainService
        .putRequest(servicio, this.route)
        .subscribe((res: Res) => {
          if (res.error) {
            this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
              duration: 4000,
              horizontalPosition: 'center',
              verticalPosition: 'top',
            });
          } else {
            this.dialogRef.close(servicio);
          }
        });
    }
  }
  isCreateMode() {
    return this.mode === 0;
  }
  onNoClick(): void {
    this.dialogRef.close();
  }
  isUpdateMode() {
    return this.mode === 1;
  }
}



================================================
FILE: src/app/components/dashboard-admin/externos/externos.component.html
================================================
<div class="container-fluid">
  <div class="row">
    <div class="col text-center">
      <h2 class="mt-3">Externos</h2>
    </div>
  </div>
  <div class="row align-items-center">
    <div class="col">
      <button mat-raised-button class="me-2 csv-button" (click)="getCSVMes()">
        <mat-icon>save_alt</mat-icon> Descargar Excel
      </button>
    </div>
    <div class="col text-center">
      <mat-form-field class="mt-3">
        <mat-label>Mes y AÃ±o</mat-label>
        <input matInput [matDatepicker]="dp" [formControl]="date" />
        <mat-datepicker-toggle matSuffix [for]="dp"></mat-datepicker-toggle>
        <mat-datepicker
          #dp
          startView="year"
          (monthSelected)="setMonthAndYear($event, dp)"
          panelClass="month-picker"
        >
        </mat-datepicker>
      </mat-form-field>
    </div>
    <div class="col text-end">
   

      <button mat-raised-button color="primary" (click)="createServicio()">
        <mat-icon>add</mat-icon> Agregar Externo
      </button>
    </div>
  </div>
  <ag-grid-angular
  class="ag-theme-quartz d-grid"
  style="width: 100%; height: 80vh"
  [pagination]="true"
  [columnDefs]="columnDefs"
  [defaultColDef]="defaultColDef"
  [autoSizeStrategy]="autoSizeStrategy"
  [rowData]="rowData"
  [rowSelection]="'multiple'"
  [paginationPageSize]="paginationPageSize"
  [paginationPageSizeSelector]="paginationPageSizeSelector"
  [animateRows]="true"
  (gridReady)="onGridReady($event)"
  (cellClicked)="onCellClicked($event)"
></ag-grid-angular>
</div>



================================================
FILE: src/app/components/dashboard-admin/externos/externos.component.scss
================================================
table, mat-paginator {
  background-color: transparent;
}
.terminado {
  background-color: #25D366;
}
.csv-button {
  color: white;
  background-color: #25D366;
}


================================================
FILE: src/app/components/dashboard-admin/externos/externos.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ExternosComponent } from './externos.component';

describe('ExternosComponent', () => {
  let component: ExternosComponent;
  let fixture: ComponentFixture<ExternosComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ExternosComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ExternosComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/externos/externos.component.ts
================================================
import { Component, OnInit, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';
import * as moment from 'moment';
import { MainService } from 'src/app/services/main.service';
// tslint:disable-next-line:no-duplicate-imports
import { Moment } from 'moment';
import 'moment/locale/es';
import Swal from 'sweetalert2';
import {
  MomentDateAdapter,
  MAT_MOMENT_DATE_ADAPTER_OPTIONS,
} from '@angular/material-moment-adapter';
import {
  DateAdapter,
  MAT_DATE_FORMATS,
  MAT_DATE_LOCALE,
} from '@angular/material/core';
import { MatDatepicker } from '@angular/material/datepicker';
import { UntypedFormControl } from '@angular/forms';
import { Convert, ExternosRes } from 'src/app/interfaces/externos';
import { ExternosDialogComponent } from './externos-dialog/externos-dialog.component';
import { CSVService } from 'src/app/services/csv.service';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Res } from 'src/app/interfaces/response';
import {
  CellClickedEvent,
  ColDef,
  GridReadyEvent,
  SizeColumnsToContentStrategy,
  SizeColumnsToFitGridStrategy,
  SizeColumnsToFitProvidedWidthStrategy,
} from 'ag-grid-community';
import { AgGridAngular } from 'ag-grid-angular';
import { DatetimeFormatComponent } from '../ag-grid/datetime-format/datetime-format.component';
import { ButtonRendererComponent } from '../ag-grid/button-renderer/button-renderer.component';
export const MY_FORMATS = {
  parse: {
    dateInput: 'MM/YYYY',
  },
  display: {
    dateInput: 'MM/YYYY',
    monthYearLabel: 'MMMM YYYY',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'MMMM YYYY',
  },
};
@Component({
  selector: 'app-externos',
  templateUrl: './externos.component.html',
  styleUrls: ['./externos.component.scss'],
  providers: [
    { provide: MAT_DATE_LOCALE, useValue: 'es-ES' },
    {
      provide: DateAdapter,
      useClass: MomentDateAdapter,
      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],
    },

    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },
  ],
})
export class ExternosComponent {
  private route = '/external';
  date = new UntypedFormControl(moment());
  public columnDefs: ColDef[] = [
    {
      headerName: 'No.',
      field: 'id',
      cellStyle: { textAlign: 'center' },
    },
    {
      headerName: 'Fecha de Registro',
      field: 'fecha_registro',
      cellStyle: { textAlign: 'center' },
      filter: 'agDateColumnFilter',
      hide: true
    },
    {
      headerName: 'GarantÃ­a',
      field: 'garantia',
      cellStyle: { textAlign: 'center' },
      hide: true
    },
    {
      headerName: 'Cliente',
      field: 'nombre_cliente',
      cellStyle: { textAlign: 'center' },
    },
    {
      headerName: 'Encargado',
      field: 'encargado',
      cellStyle: { textAlign: 'center' },
    },
    {
      headerName: 'Folio',
      field: 'folio',
      cellStyle: { textAlign: 'center' },
    },
    {
      headerName: 'Marca',
      field: 'marca',
      cellStyle: { textAlign: 'center' },
    },
    {
      headerName: 'CotizaciÃ³n',
      field: 'cotizacion',
      cellStyle: { textAlign: 'center' },
      width: 130,
    },
    {
      headerName: 'Estado',
      field: 'estado',
      cellStyle: { textAlign: 'center' },
    },
    {
      headerName: 'Cita',
      field: 'cita',
      cellRenderer: DatetimeFormatComponent,
      cellStyle: { textAlign: 'center' },
    },
    {
      headerName: 'Observaciones',
      field: 'observaciones',
      cellRenderer: DatetimeFormatComponent,
      cellStyle: { textAlign: 'center' },
      hide: true
    },
    {
      headerName: '',
      field: 'delete',
      cellRenderer: ButtonRendererComponent,
      cellRendererParams: {
        icon: 'delete',
        color: 'warn',
        tooltip: 'Eliminar Registro',
      },
      cellStyle: { textAlign: 'center' },

      filter: false,
      flex: 1,
    },
  ];
  public defaultColDef: ColDef = {
    sortable: true,
    filter: true,
  };
  public autoSizeStrategy:
    | SizeColumnsToFitGridStrategy
    | SizeColumnsToFitProvidedWidthStrategy
    | SizeColumnsToContentStrategy = {
    type: 'fitGridWidth',
  };
  public rowData: ExternosRes[] = [];
  public paginationPageSizeSelector = [20, 50, 100];
  public paginationPageSize = 20;
  @ViewChild(AgGridAngular) agGrid!: AgGridAngular;
  constructor(
    private snackbar: MatSnackBar,
    private mainService: MainService,
    public dialog: MatDialog
  ) {}
  onGridReady(params: GridReadyEvent) {
    this.getServicios();
  }
  onCellClicked(e: CellClickedEvent): void {
    const id = e.column.getColId();
    if (id == 'delete') {
      this.deleteServicio(e.data);
    } else {
      this.updateServicio(e.data);
    }
  }
  setMonthAndYear(
    normalizedMonthAndYear: Moment,
    datepicker: MatDatepicker<Moment>
  ) {
    const ctrlValue = this.date.value;
    ctrlValue.month(normalizedMonthAndYear.month());
    ctrlValue.year(normalizedMonthAndYear.year());
    this.date.setValue(ctrlValue);
    this.getServicios();
    datepicker.close();
  }
  getServicios() {
    this.mainService
      .getRequest(
        { month: this.date.value.month() + 1, year: this.date.value.year() },
        `${this.route}/by_month`
      )
      .subscribe((res: Res) => {
        if (res.error) {
          this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
            duration: 4000,
            horizontalPosition: 'center',
            verticalPosition: 'top',
          });
        } else {
          this.rowData = res.data;
        }
      });
  }

  deleteServicio(servicio: ExternosRes) {
    Swal.fire({
      title:
        'Â¿Seguro que quiere eliminar el servicio del cliente ' +
        servicio.nombre_cliente +
        '?',
      text: 'Esta operaciÃ³n no se puede revertir.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Eliminar',
      cancelButtonText: 'Cancelar',
    }).then((result) => {
      if (result.value) {
        this.mainService
          .deleteRequest({}, `${this.route}/${servicio.id}`)
          .subscribe((data) => {
            this.getServicios();
            Swal.fire(
              'Eliminado',
              'El servicio #' +
                servicio.id +
                ' ha sido eliminado del registro.',
              'success'
            );
          });
      } else if (result.dismiss === Swal.DismissReason.cancel) {
        Swal.fire(
          'Haz cancelado la operaciÃ³n.',
          'NingÃºn registro eliminado',
          'error'
        );
      }
    });
  }
  createServicio() {
    const dialogRef = this.dialog.open(ExternosDialogComponent, {
      width: '50%',
      data: null,
    });
    dialogRef.afterClosed().subscribe((result: ExternosRes) => {
      if (result) {
        Swal.fire({
          position: 'center',
          icon: 'success',
          title: 'Se ha registrado el servicio correctamente.',
          showConfirmButton: false,
          timer: 1500,
        });
        this.getServicios();
      }
    });
  }
  updateServicio(servicio: ExternosRes) {
    const dialogRef = this.dialog.open(ExternosDialogComponent, {
      width: '50%',
      data: servicio,
    });
    dialogRef.afterClosed().subscribe((result: ExternosRes) => {
      if (result) {
        Swal.fire({
          position: 'center',
          icon: 'success',
          title: 'Se ha actualizado el servicio correctamente.',
          showConfirmButton: false,
          timer: 1500,
        });
        this.getServicios();
      }
    });
  }
  getCSVMes() {
    this.agGrid.api.exportDataAsCsv({ allColumns: true, columnSeparator: ';' });
  }
}



================================================
FILE: src/app/components/dashboard-admin/externos/externos-dialog/externos-dialog.component.html
================================================
<div class="col text-center">
  <h1 mat-dialog-title>
    {{ title }} Externo {{ isUpdateMode() ? data.id : "" }}
  </h1>
</div>
<div *ngIf="isUpdateMode()" class="col d-flex justify-content-evenly">
  <button
    (click)="avisar()"
    *ngIf="this.data.estado === 'PENDIENTE'"
    mat-raised-button
    class="whatsapp-button"
  >
    <mat-icon>send_to_mobile</mat-icon> Avisar a Cliente
  </button>
</div>
<form [formGroup]="form" class="mt-3">
  <div mat-dialog-content class="text-center">
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Cliente</mat-label>
        <mat-select [formControl]="clientesControl" #singleSelectClientes>
          <mat-option>
            <ngx-mat-select-search
              placeholderLabel="Buscar cliente..."
              noEntriesFoundLabel="No se encontraron clientes"
              [formControl]="clientesFiltro"
            ></ngx-mat-select-search>
          </mat-option>
          <mat-option
            *ngFor="let cliente of clientesFiltrados | async"
            [value]="cliente"
          >
            {{ cliente.nombre }} {{ cliente.apellido }} - {{ cliente.telefono }}
          </mat-option>
        </mat-select>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Encargado</mat-label>
        <mat-select [formControl]="usuariosControl" #singleSelectUsuarios>
          <mat-option>
            <ngx-mat-select-search
              placeholderLabel="Buscar usuario..."
              noEntriesFoundLabel="No se encontraron usuarios"
              [formControl]="usuariosFiltro"
            ></ngx-mat-select-search>
          </mat-option>
          <mat-option
            *ngFor="let usuario of usuariosFiltrados | async"
            [value]="usuario"
          >
            {{ usuario.nombre }} {{ usuario.apellido }} - {{ usuario.curp }}
          </mat-option>
        </mat-select>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Folio</mat-label>

        <input formControlName="folio" matInput type="text" />

        <mat-icon matSuffix>confirmation_number</mat-icon>
      </mat-form-field>
    </div>

    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>GarantÃ­a</mat-label>
        <mat-select formControlName="garantia" name="garantia">
          <mat-option value="1">SI</mat-option>
          <mat-option value="0">NO</mat-option>
        </mat-select>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Marca</mat-label>
        <mat-select formControlName="marca" name="marca">
          <mat-option [value]="option.value" *ngFor="let option of marcas">{{
            option.value
          }}</mat-option>
        </mat-select>
      </mat-form-field>
    </div>

    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>CotizaciÃ³n/RemisiÃ³n</mat-label>

        <input formControlName="cotizacion" matInput type="text" />

        <mat-icon matSuffix>tag</mat-icon>
      </mat-form-field>

      <mat-form-field class="w-50">
        <mat-label>Importe</mat-label>

        <input formControlName="importe" matInput type="number" />

        <mat-icon matSuffix>attach_money</mat-icon>
      </mat-form-field>
    </div>

    <div class="row d-flex">
      <mat-form-field class="w-50">
        <mat-label>Estado</mat-label>
        <mat-select formControlName="estado" name="estado">
          <mat-option [value]="option.value" *ngFor="let option of estatus">{{
            option.value
          }}</mat-option>
        </mat-select>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Agendar Cita</mat-label>
        <input
          matInput
          [ngxMatDatetimePicker]="pickerCita"
          placeholder="Escoge la fecha de tu cita"
          formControlName="cita"
        />

        <mat-datepicker-toggle
          matSuffix
          [for]="$any(pickerCita)"
        ></mat-datepicker-toggle>

        <ngx-mat-datetime-picker
          [enableMeridian]="true"
          #pickerCita
        ></ngx-mat-datetime-picker>
      </mat-form-field>
    </div>
    <div class="row"></div>
    <div class="row">
      <mat-form-field>
        <mat-label>Observaciones</mat-label>
        <textarea
          oninput="this.value = this.value.toUpperCase()"
          matInput
          formControlName="observaciones"
        ></textarea>
      </mat-form-field>
    </div>
  </div>
  <div mat-dialog-actions align="center" class="row">
    <div class="col"></div>
    <div class="col text-end">
      <button
        mat-button
        *ngIf="isCreateMode()"
        [disabled]="form.invalid"
        (click)="onAdd()"
      >
        Agregar
      </button>
      <button
        mat-button
        *ngIf="isUpdateMode()"
        [disabled]="form.invalid"
        (click)="onAdd()"
      >
        Actualizar
      </button>
      <button mat-button (click)="onNoClick()">Cancelar</button>
    </div>
  </div>
</form>



================================================
FILE: src/app/components/dashboard-admin/externos/externos-dialog/externos-dialog.component.scss
================================================
.whatsapp-button {
  color: white;
  background-color: #25D366;
}



================================================
FILE: src/app/components/dashboard-admin/externos/externos-dialog/externos-dialog.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ExternosDialogComponent } from './externos-dialog.component';

describe('ExternosDialogComponent', () => {
  let component: ExternosDialogComponent;
  let fixture: ComponentFixture<ExternosDialogComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ExternosDialogComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ExternosDialogComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/externos/externos-dialog/externos-dialog.component.ts
================================================
import { MarcasRes } from './../../../../interfaces/marcas';
import { Component, Inject, OnInit, ViewChild } from '@angular/core';
import {
  FormBuilder,
  FormControl,
  FormGroup,
  Validators,
} from '@angular/forms';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatSelect } from '@angular/material/select';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import {
  MomentDateAdapter,
  MAT_MOMENT_DATE_ADAPTER_OPTIONS,
} from '@angular/material-moment-adapter';
import {
  DateAdapter,
  MAT_DATE_FORMATS,
  MAT_DATE_LOCALE,
} from '@angular/material/core';
import * as _moment from 'moment';
import 'moment/locale/es';
import { ClientesRes } from '../../../../interfaces/clientes';
import { ReplaySubject, Subject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { MainService } from 'src/app/services/main.service';
import { ExternosRes } from 'src/app/interfaces/externos';
import {
  NgxMatMomentModule,
  NgxMatMomentAdapter,
  NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS,
} from '@angular-material-components/moment-adapter';
import {
  NgxMatDatetimePickerModule,
  NgxMatTimepickerModule,
  NGX_MAT_DATE_FORMATS,
  NgxMatDateAdapter,
} from '@angular-material-components/datetime-picker';
import * as moment from 'moment';
import { User } from 'src/app/interfaces/user';
import { Res } from 'src/app/interfaces/response';

export const MY_FORMATS = {
  parse: {
    dateInput: 'DD/MM/YYYY, h:mm:ss',
  },
  display: {
    dateInput: 'DD/MM/YYYY, h:mm a',
    monthYearLabel: 'DD MMMM YYYY',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'DD MMMM YYYY',
  },
};
@Component({
  selector: 'app-externos-dialog',
  templateUrl: './externos-dialog.component.html',
  styleUrls: ['./externos-dialog.component.scss'],
  providers: [
    { provide: MAT_DATE_LOCALE, useValue: 'es-ES' },
    {
      provide: DateAdapter,
      useClass: MomentDateAdapter,
      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],
    },

    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },
    {
      provide: NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS,
      useValue: { useUtc: true },
    },
    { provide: NGX_MAT_DATE_FORMATS, useValue: MY_FORMATS },
    { provide: NgxMatDateAdapter, useClass: NgxMatMomentAdapter },
  ],
})
export class ExternosDialogComponent implements OnInit {
  private route = '/external';
  form!: FormGroup;
  mode!: Number;
  title!: String;
  clientes!: ClientesRes[];
  usuarios!: User[];
  estatus = [
    {
      value: 'PENDIENTE',
    },
    {
      value: 'AGENDADO',
    },
    {
      value: 'TERMINADO',
    },
  ];
  marcas = [
    {
      value: 'BOSCH',
    },
    {
      value: 'RHEEM',
    },
    {
      value: 'RINNAI',
    },
    {
      value: 'CALOREX',
    },
    {
      value: 'IUSA',
    },
    {
      value: 'OTRO',
    },
  ];
  public usuariosFiltro: FormControl = new FormControl();
  public usuariosControl: FormControl = new FormControl();
  public usuariosFiltrados: ReplaySubject<User[]> = new ReplaySubject<User[]>(
    1
  );

  public clientesFiltro: FormControl = new FormControl();
  public clientesControl: FormControl = new FormControl();
  public clientesFiltrados: ReplaySubject<ClientesRes[]> = new ReplaySubject<
    ClientesRes[]
  >(1);
  protected _onDestroy = new Subject<void>();

  @ViewChild('singleSelectUsuarios') singleSelectUsuarios!: MatSelect;
  @ViewChild('singleSelectClientes') singleSelectClientes!: MatSelect;

  constructor(
    private fb: FormBuilder,
    public dialogRef: MatDialogRef<ExternosDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: ExternosRes,
    private mainService: MainService,
    private snackbar: MatSnackBar
  ) {
    if (this.data) {
      this.mode = 1;
      this.title = 'Actualizar';
      this.form = this.fb.group({
        id: [this.data.id, Validators.required],
        fecha_registro: [this.data.fecha_registro],
        folio: [this.data.folio, Validators.required],
        garantia: [this.data.garantia.toString(), Validators.required],
        marca: [this.data.marca, Validators.required],
        id_cliente: [this.data.id_cliente, Validators.required],
        id_usuario: [this.data.id_usuario, Validators.required],
        cotizacion: [this.data.cotizacion],
        cita: [this.data.cita],
        importe: [this.data.importe],
        estado: [this.data.estado, Validators.required],
        observaciones: [this.data.observaciones],
        avisado: [this.data.avisado],
      });
    } else {
      this.mode = 0;
      this.title = 'Nuevo';
      this.form = this.fb.group({
        folio: ['', Validators.required],
        garantia: ['', Validators.required],
        fecha_registro: [moment().format("YYYY-MM-DD")],
        marca: ['BOSCH', Validators.required],
        id_cliente: ['', Validators.required],
        id_usuario: ['', Validators.required],
        cotizacion: [''],
        cita: [null],
        importe: [0, Validators.required],
        estado: [this.estatus[0].value, Validators.required],
        observaciones: [' '],
      });
    }
  }

  ngOnInit(): void {
    this.getMenus();
    this.clientesControl.valueChanges.subscribe((data) => {
      this.form.controls['id_cliente'].setValue(data.id);
    });
    this.usuariosControl.valueChanges.subscribe((data) => {
      this.form.controls['id_usuario'].setValue(data.id);
    });
    this.usuariosFiltro.valueChanges
      .pipe(takeUntil(this._onDestroy))
      .subscribe(() => {
        this.filtrarUsuarios();
      });
    this.clientesFiltro.valueChanges
      .pipe(takeUntil(this._onDestroy))
      .subscribe(() => {
        this.filtrarClientes();
      });
  }
  protected filtrarUsuarios() {
    if (!this.usuarios) {
      return;
    }
    // get the search keyword
    let search = this.usuariosFiltro.value;
    if (!search) {
      this.usuariosFiltrados.next(this.usuarios.slice());
      return;
    } else {
      search = search.toLowerCase();
    }
    this.usuariosFiltrados.next(
      this.usuarios.filter((usuario) => {
        let filtrado =
          usuario.nombre + ' ' + usuario.apellido + ' ' + usuario.curp;
        return filtrado.toLowerCase().indexOf(search) > -1;
      })
    );
  }
  protected filtrarClientes() {
    if (!this.clientes) {
      return;
    }
    // get the search keyword
    let search = this.clientesFiltro.value;
    if (!search) {
      this.clientesFiltrados.next(this.clientes.slice());
      return;
    } else {
      search = search.toLowerCase();
    }
    this.clientesFiltrados.next(
      this.clientes.filter((cliente) => {
        let filtrado =
          cliente.nombre + ' ' + cliente.apellido + ' ' + cliente.telefono;
        return filtrado.toLowerCase().indexOf(search) > -1;
      })
    );
  }
  onNoClick(): void {
    this.dialogRef.close();
  }
  ngOnDestroy() {
    this._onDestroy.next();
    this._onDestroy.complete();
  }
  ngAfterViewInit(): void {
    this.setInitialValueClientes();
    this.setInitialValueUsuarios();
  }
  getMenus() {
    if (this.isUpdateMode()) {
      this.mainService
        .getRequest({}, `/client/get_active_clients`)
        .subscribe((res: Res) => {
          this.clientes = res.data;
          this.clientesFiltrados.next(this.clientes.slice());
          let filtro = res.data.filter(
            (cliente: ClientesRes) => cliente.id == this.data.id_cliente
          );
          this.clientesControl.setValue(filtro[0]);
        });
      this.mainService
        .getRequest({}, `/user/get_active_users`)
        .subscribe((res: Res) => {
          this.usuarios = res.data;
          this.usuariosFiltrados.next(this.usuarios.slice());
          let filtro = res.data.filter(
            (usuario: User) => usuario.id == this.data.id_usuario
          );
          this.usuariosControl.setValue(filtro[0]);
        });
    } else {
      this.mainService
        .getRequest({}, `/client/get_active_clients`)
        .subscribe((res: Res) => {
          this.clientes = res.data;
          this.clientesFiltrados.next(this.clientes.slice());
        });
      this.mainService
        .getRequest({}, `/user/get_active_users`)
        .subscribe((res: Res) => {
          this.usuarios = res.data;
          this.usuariosFiltrados.next(this.usuarios.slice());
        });
    }
  }
  protected setInitialValueClientes() {
    this.clientesFiltrados
      .pipe(take(1), takeUntil(this._onDestroy))
      .subscribe(() => {
        this.singleSelectClientes.compareWith = (
          a: ClientesRes,
          b: ClientesRes
        ) => a && b && a.id === b.id;
      });
  }
  protected setInitialValueUsuarios() {
    this.usuariosFiltrados
      .pipe(take(1), takeUntil(this._onDestroy))
      .subscribe(() => {
        this.singleSelectUsuarios.compareWith = (a: User, b: User) =>
          a && b && a.id === b.id;
      });
  }
  onAdd(): void {
    const servicio: ExternosRes = this.form.value;
    if (this.isCreateMode()) {
      this.mainService
        .postRequest(servicio, this.route)
        .subscribe((res: Res) => {
          if (res.error) {
            this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
              duration: 4000,
              horizontalPosition: 'center',
              verticalPosition: 'top',
            });
          } else {
            this.dialogRef.close(servicio);
          }
        });
    } else {
      this.mainService
        .putRequest(servicio, this.route)
        .subscribe((res: Res) => {
          if (res.error) {
            this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
              duration: 4000,
              horizontalPosition: 'center',
              verticalPosition: 'top',
            });
          } else {
            this.dialogRef.close(servicio);
          }
        });
    }
  }
  isCreateMode() {
    return this.mode === 0;
  }

  isUpdateMode() {
    return this.mode === 1;
  }
  avisar() {
    let telefono = this.clientesControl.value.telefono;
    let fecha = moment(new Date(this.form.value.cita)).format(
      'dddd DD [de] MMMM [a las] h:mm a'
    );

    this.form.controls['avisado'].setValue('1');
    let mensaje =
      'Buen dÃ­a, estimado cliente. Centro de Servicio Don Pedro le informa hemos recibido su reporte reralizado a ' +
      this.form.value.marca +
      '. La fecha y hora asignadas para la visita del tÃ©cnico es ' +
      fecha +
      '. En caso de tener inconvenientes con la fecha y hora asignadas, favor mencionarlos en este mismo chat.';
    window.open(
      'https://web.whatsapp.com/send?phone=521' + telefono + '&text=' + mensaje,
      '_blank'
    );
  }
}



================================================
FILE: src/app/components/dashboard-admin/garantias/garantias.component.html
================================================
<div class="container-fluid">
  <div class="row">
    <div class="col text-center">
      <h2 class="mt-3">GarantÃ­as</h2>
    </div>
  </div>
  <div class="row align-items-center">
    <div class="col-12 col-lg-4">
      <button
        mat-raised-button
        class="me-2 csv-button"
        (click)="getCSVGarantia()"
      >
        <mat-icon>save_alt</mat-icon> Descargar Excel
      </button>
    </div>
    <div class="col-12 col-lg-4 text-center">
      <mat-form-field class="mt-3">
        <mat-label>Mes y AÃ±o</mat-label>
        <input matInput [matDatepicker]="dp" [formControl]="date" />
        <mat-datepicker-toggle matSuffix [for]="dp"></mat-datepicker-toggle>
        <mat-datepicker
          #dp
          startView="year"
          (monthSelected)="setMonthAndYear($event, dp)"
          panelClass="month-picker"
        >
        </mat-datepicker>
      </mat-form-field>
    </div>
    <div class="col-12 col-lg-4 text-end">
      <button mat-raised-button color="primary" (click)="createGarantia()">
        <mat-icon>add</mat-icon> Agregar GarantÃ­a
      </button>
    </div>
  </div>
  <ag-grid-angular
    class="ag-theme-quartz d-grid"
    style="width: 100%; height: 80vh"
    [pagination]="true"
    [columnDefs]="columnDefs"
    [defaultColDef]="defaultColDef"
    [autoSizeStrategy]="autoSizeStrategy"
    [rowData]="rowData"
    [rowClassRules]="rowClassRules"
    [rowSelection]="'multiple'"
    [paginationPageSize]="paginationPageSize"
    [paginationPageSizeSelector]="paginationPageSizeSelector"
    [animateRows]="true"
    (gridReady)="onGridReady($event)"
    (cellClicked)="onCellClicked($event)"
  ></ag-grid-angular>
</div>



================================================
FILE: src/app/components/dashboard-admin/garantias/garantias.component.scss
================================================
.csv-button {
  color: white;
  background-color: #25d366;
  @media (max-width: 1024px) {
    display: none;
  }
}
table,
mat-paginator {
  background-color: transparent;
}
.terminado {
  background-color: #25d366;
}

.tramite {
  background-color: #f7f260;
}

.merma {
  background-color: #f76060;
}
@media (max-width: 1024px) {
  .mat-mdc-table[matTableResponsive] {
    .mat-mdc-header-row {
      flex-wrap: wrap;
      height: auto;
      position: sticky;
      top: 0;
      z-index: 2;
      th.mat-mdc-header-cell {
        display: flex;
        flex: 1;
        align-items: center;
        padding: 1rem 0.5rem;
        justify-content: space-around;

        & > .mat-mdc-sort-header-container {
          padding-left: 15px; // padding is used to center the header table cells, due to the width of the sort icon
        }

        &:not([mat-sort-header]),
        &.mat-mdc-sort-header-disabled,
        &.mat-mdc-column-actions {
          display: none;
        }
      }
    }

    .mat-mdc-row {
      height: auto;

      td.mat-mdc-cell:not(.mat-mdc-column-actions) {
        display: grid;
        grid-template-columns: 50% 50%;
        padding: 0.5rem;
        text-align: right;
        word-break: break-word;

        & > * {
          grid-column: 2;
        }

        &:before {
          content: attr(data-column-name);
          text-align: left;
          font-weight: 500;
        }
      }

      td.mat-mdc-column-actions {
        display: flex;
        justify-content: center;
        padding: 0 0.5rem;

        & > button {
          margin: 0.5rem 0;
        }
      }

      &:last-of-type td:last-of-type {
        border: none;
      }
  
      &:not(:last-of-type) td:last-of-type {
        border-bottom: 0.5rem solid #fafafa;
      }
    }
  }

  .mat-mdc-card,
  .mat-mdc-expansion-panel {
    .mat-mdc-table[matTableResponsive] {
      border: 0.5rem solid #fafafa;
    }
  }
}


================================================
FILE: src/app/components/dashboard-admin/garantias/garantias.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { GarantiasComponent } from './garantias.component';

describe('GarantiasComponent', () => {
  let component: GarantiasComponent;
  let fixture: ComponentFixture<GarantiasComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ GarantiasComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(GarantiasComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/garantias/garantias.component.ts
================================================
import {
  AfterViewInit,
  Component,
  ElementRef,
  OnDestroy,
  OnInit,
  Renderer2,
  ViewChild,
} from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';
import {
  MomentDateAdapter,
  MAT_MOMENT_DATE_ADAPTER_OPTIONS,
} from '@angular/material-moment-adapter';
import {
  DateAdapter,
  MAT_DATE_FORMATS,
  MAT_DATE_LOCALE,
} from '@angular/material/core';
import { MatDatepicker } from '@angular/material/datepicker';
import {
  BehaviorSubject,
  combineLatest,
  interval,
  map,
  mapTo,
  Subject,
  Subscription,
  takeUntil,
} from 'rxjs';
import * as _moment from 'moment';
// tslint:disable-next-line:no-duplicate-imports
import { Moment } from 'moment';
import 'moment/locale/es';
import Swal from 'sweetalert2';
import { UntypedFormControl } from '@angular/forms';
import * as moment from 'moment';
import { MainService } from 'src/app/services/main.service';
import { GarantiasRes, Convert } from 'src/app/interfaces/garantias';
import { GarantiaDialogComponent } from './garantia-dialog/garantia-dialog.component';
import { CSVService } from 'src/app/services/csv.service';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Res } from 'src/app/interfaces/response';
import {
  CellClickedEvent,
  ColDef,
  GridReadyEvent,
  RowClassRules,
  SizeColumnsToContentStrategy,
  SizeColumnsToFitGridStrategy,
  SizeColumnsToFitProvidedWidthStrategy,
} from 'ag-grid-community';
import { ButtonRendererComponent } from '../ag-grid/button-renderer/button-renderer.component';
import { AgGridAngular } from 'ag-grid-angular';
import { ToolService } from 'src/app/interfaces/toolservice';
import { Router } from '@angular/router';
export const MY_FORMATS = {
  parse: {
    dateInput: 'MM/YYYY',
  },
  display: {
    dateInput: 'MM/YYYY',
    monthYearLabel: 'MMMM YYYY',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'MMMM YYYY',
  },
};
@Component({
  selector: 'app-garantias',
  templateUrl: './garantias.component.html',
  styleUrls: ['./garantias.component.scss'],
  providers: [
    { provide: MAT_DATE_LOCALE, useValue: 'es-ES' },
    {
      provide: DateAdapter,
      useClass: MomentDateAdapter,
      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],
    },

    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },
  ],
})
export class GarantiasComponent implements OnInit, OnDestroy {
  private onDestroy$ = new Subject<boolean>();

  private thead!: HTMLTableSectionElement;
  private tbody!: HTMLTableSectionElement;

  private theadChanged$ = new BehaviorSubject(true);
  private tbodyChanged$ = new Subject<boolean>();

  private theadObserver = new MutationObserver(() =>
    this.theadChanged$.next(true)
  );
  private tbodyObserver = new MutationObserver(() =>
    this.tbodyChanged$.next(true)
  );
  private route = '/warranty';

  dataSource = new MatTableDataSource<GarantiasRes>();
  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;
  date = new UntypedFormControl(moment());
  private eventSubscription!: Subscription;
  public columnDefs: ColDef[] = [
    {
      headerName: 'No.',
      field: 'id',
      cellStyle: { textAlign: 'center' },
      width: 120,
    },
    {
      headerName: 'Numero de Traspaso',
      field: 'traspaso',
      hide: true
    },
    {
      headerName: 'Autorizado por',
      field: 'autorizo',
      hide: true
    },
    {
      headerName: 'F. de Registro',
      field: 'fecha_registro',
      cellStyle: { textAlign: 'center' },
      valueFormatter: this.dateFormatter,
      filter: 'agDateColumnFilter',
      width: 140,
    },
    {
      headerName: 'Folio',
      field: 'folio',
      cellStyle: { textAlign: 'center' },
      width: 270,
    },
    {
      headerName: 'Producto',
      field: 'producto',
      cellStyle: { textAlign: 'center' },
      width: 270,
    },
    {
      headerName: 'Marca',
      field: 'marca',
      cellStyle: { textAlign: 'center' },
      width: 270,
    },
    {
      headerName: 'Modelo',
      field: 'modelo',
      hide: true
    },
    {
      headerName: 'Número de Serie',
      field: 'serie',
      hide: true
    },
    {
      headerName: 'Costo Unitario',
      field: 'costo_unitario',
      hide: true
    },
    {
      headerName: 'Total',
      field: 'total',
      hide: true
    },
    {
      headerName: 'Motivo',
      field: 'motivo',
      hide: true
    },
    {
      headerName: 'Estado de Cliente',
      field: 'estado_cliente',
      cellStyle: { textAlign: 'center' },
      width: 230,
    },
    {
      headerName: 'Fecha de Resuelto para Cliente',
      field: 'fecha_resuelto_cliente',
      hide: true
    },
    {
      headerName: 'Fecha de Solicitud a Proveedor',
      field: 'fecha_proveedor',
      hide: true
    },
    {
      headerName: 'Estado de Proveedor',
      field: 'estado_proveedor',
      cellStyle: { textAlign: 'center' },
      width: 230,
    },
    {
      headerName: 'Fecha de Resuelto para Proveedor',
      field: 'fecha_resuelto_proveedor',
      hide: true
    },
    {
      headerName: '',
      field: 'delete',
      cellRenderer: ButtonRendererComponent,
      cellRendererParams: {
        icon: 'delete',
        color: 'warn',
        tooltip: 'Eliminar Registro',
      },
      cellStyle: { textAlign: 'center' },

      width: 80,
      flex: 1,
      filter: false,
    },
    {
      headerName: '',
      field: 'receipt',
      cellRenderer: ButtonRendererComponent,
      cellRendererParams: {
        icon: 'receipt_log',
        color: '',
        tooltip: 'Generar Comprobante',
      },
      cellStyle: { textAlign: 'center' },

      filter: false,
      width: 80,
      flex: 1,
    },
  ];
  public rowClassRules: RowClassRules = {
    yellow: 'data.estado_proveedor == "EN TRÁMITE"',
    green: 'data.estado_proveedor != "PENDIENTE"',
    red: 'data.estado_proveedor == "MERMA"',
  };
  public defaultColDef: ColDef = {
    sortable: true,
    filter: true,
  };
  public autoSizeStrategy:
    | SizeColumnsToFitGridStrategy
    | SizeColumnsToFitProvidedWidthStrategy
    | SizeColumnsToContentStrategy = {
    type: 'fitGridWidth',
  };
  public rowData: ToolService[] = [];
  public paginationPageSizeSelector = [20, 50, 100];
  public paginationPageSize = 20;
  @ViewChild(AgGridAngular) agGrid!: AgGridAngular;
  constructor(
    private snackbar: MatSnackBar,
    private mainService: MainService,
    public dialog: MatDialog,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.eventSubscription = this.mainService
      .getServerEvent(`${this.route}/sse`)
      .subscribe(() => {
        this.getGarantias();
      });
  }
  onGridReady(params: GridReadyEvent) {
    this.getGarantias();
  }
  onCellClicked(e: CellClickedEvent): void {
    const id = e.column.getColId();
    if (id == 'delete') {
      this.deleteGarantia(e.data);
    } else if(id=='receipt') {
      this.printReceipt(e.data);
    }
    else {
      this.updateGarantia(e.data);
    }
  }

  dateFormatter(params: any) {
    if (params.value) {
      return moment(params.value).format('DD/MM/YYYY');
    } else {
      return '';
    }
  }
  getGarantias() {
    this.mainService
      .getRequest(
        { month: this.date.value.month() + 1, year: this.date.value.year() },
        `${this.route}/by_month`
      )
      .subscribe((res: Res) => {
        if (res.error) {
          this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
            duration: 4000,
            horizontalPosition: 'center',
            verticalPosition: 'top',
          });
        } else {
          this.rowData = res.data;
        }
      });
  }
  setMonthAndYear(
    normalizedMonthAndYear: Moment,
    datepicker: MatDatepicker<Moment>
  ) {
    const ctrlValue = this.date.value;
    ctrlValue.month(normalizedMonthAndYear.month());
    ctrlValue.year(normalizedMonthAndYear.year());
    this.date.setValue(ctrlValue);
    this.getGarantias();
    datepicker.close();
  }
  deleteGarantia(warranty:GarantiasRes) {
    Swal.fire({
      title: '¿Seguro que quiere eliminar el registro de la garantía?',
      text: 'Esta operación no se puede revertir.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Eliminar',
      cancelButtonText: 'Cancelar',
    }).then((result) => {
      if (result.value) {
        this.mainService
          .deleteRequest({}, `${this.route}/${warranty.id}`)
          .subscribe((data) => {
            Swal.fire('Eliminado', 'La garantía se ha eliminado', 'success');
          });
      } else if (result.dismiss === Swal.DismissReason.cancel) {
        Swal.fire(
          'Haz cancelado la operación.',
          'Ningún registro eliminado',
          'error'
        );
      }
    });
  }
  createGarantia() {
    const dialogRef = this.dialog.open(GarantiaDialogComponent, {
      width: '70%',
      data: null,
    });
    dialogRef.afterClosed().subscribe((result: GarantiasRes) => {
      if (result) {
        Swal.fire({
          position: 'center',
          icon: 'success',
          title: 'Se ha registrado la garantia correctamente.',
          showConfirmButton: false,
          timer: 1500,
        });
      }
    });
  }
  updateGarantia(garantia: GarantiasRes) {
    const dialogRef = this.dialog.open(GarantiaDialogComponent, {
      width: '70%',
      data: garantia,
    });
    dialogRef.afterClosed().subscribe((result: GarantiasRes) => {
      if (result) {
        Swal.fire({
          position: 'center',
          icon: 'success',
          title: 'Se ha actualizado la garantia correctamente.',
          showConfirmButton: false,
          timer: 1500,
        });
      }
    });
  }
  getCSVGarantia() {
    this.agGrid.api.exportDataAsCsv({ allColumns: true, columnSeparator: ';' });
  }
  printReceipt(data: GarantiasRes) {
    const url =  this.router.createUrlTree(['/taller/comprobante', data.id]).toString();
    window.open(url, '_blank');

  }
  ngOnDestroy(): void {
    this.theadObserver.disconnect();
    this.tbodyObserver.disconnect();
    this.mainService.disconnectEventSource();
    this.eventSubscription.unsubscribe();

    this.onDestroy$.next(true);
  }
}



================================================
FILE: src/app/components/dashboard-admin/garantias/garantia-dialog/garantia-dialog.component.html
================================================
<div class="col">
  <h1 mat-dialog-title class="text-center">
    {{ title }} GarantÃ­a {{ isUpdateMode() ? data.id : "" }}
  </h1>
</div>
<div class="row gutter justify-content-evenly">
  <div class="col-12 col-lg-3 text-center" *ngIf="form.controls['doc'].value">
    <button
    *ngIf="form.controls['doc'].value"
    (click)="verDoc()"
    type="button"
    mat-raised-button
    color="accent"
  >
    <mat-icon matSuffix>visibility</mat-icon> Ver Documento
  </button>
  </div>
  <div class="col-12 col-lg-3 text-center" *ngIf="form.controls['telefono'].value">
    <button
    (click)="avisar()"
    mat-raised-button
    class="whatsapp-button"
    >
      <mat-icon>phone</mat-icon> Avisar a Cliente
    </button>
  </div>
  <div class="col-12 col-lg-3 text-center" *ngIf="form.controls['doc'].value">

    <span>{{
      form.controls["doc"].value
    }}</span>
  </div>
  <div class="col-12 col-lg-3 text-center">
    <button
    type="button"
    mat-raised-button
    (click)="fileInput.click()"
    color="primary"
  >
    <mat-icon matSuffix>upload</mat-icon> Subir Documento
  </button>
  </div>


  <input hidden type="file" #fileInput (change)="uploadDocumento($event)" />
</div>

<form [formGroup]="form" class="mt-3">
  <div mat-dialog-content class="text-center content">
    <div class="row">
      <mat-form-field class="w-50 col">
        <mat-label>Folio Servicio</mat-label>
        <input
          formControlName="id_servicio"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-icon matSuffix>tag</mat-icon>
      </mat-form-field>
      <mat-form-field class="w-50 col">
        <mat-label>NÃºmero de Traspaso</mat-label>

        <input formControlName="traspaso" matInput type="number" />
        <mat-error *ngIf="form.controls['traspaso'].hasError('required')">
          El nÃºmero de traspaso es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>attach_money</mat-icon>
      </mat-form-field>
      <mat-form-field class="w-50 col">
        <mat-label>Folio de Ticket o Factura</mat-label>

        <input
          formControlName="folio"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-error *ngIf="form.controls['folio'].hasError('required')">
          El folio es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>tag</mat-icon>
      </mat-form-field>
    </div>

    <div class="row">
      <mat-form-field class="col w-50">
        <mat-label>Producto</mat-label>

        <input
          formControlName="producto"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-error *ngIf="form.controls['producto'].hasError('required')">
          El producto es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>inventory_2</mat-icon>
      </mat-form-field>
      <mat-form-field class="col w-50">
        <mat-label>Serie</mat-label>

        <input
          formControlName="serie"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-error *ngIf="form.controls['serie'].hasError('required')">
          El nÃºmero de serie es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>pin</mat-icon>
      </mat-form-field>
      <mat-form-field class="col w-50">
        <mat-label>Marca</mat-label>
        <input
          formControlName="marca"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-error *ngIf="form.controls['marca'].hasError('required')">
          La marca es <strong> requerida </strong>
        </mat-error>
        <mat-icon matSuffix>bookmark</mat-icon>
      </mat-form-field>
      <mat-form-field class="col w-50">
        <mat-label>TelÃ©fono</mat-label>

        <input
          pattern="^[0-9]*$"
          formControlName="telefono"
          matInput
          type="text"
          maxlength="10"
          minlength="10"
        />
        <mat-icon matSuffix>phone</mat-icon>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Modelo</mat-label>

        <input
          formControlName="modelo"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-error *ngIf="form.controls['modelo'].hasError('required')">
          El modelo es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>local_activity</mat-icon>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Cantidad</mat-label>
        <input formControlName="cantidad" matInput type="number" />
        <mat-error *ngIf="form.controls['cantidad'].hasError('required')">
          La cantidad es <strong> requerida </strong>
        </mat-error>
        <mat-icon matSuffix>plus_one</mat-icon>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Costo Unitario</mat-label>

        <input formControlName="costo_unitario" matInput type="number" />
        <mat-error *ngIf="form.controls['costo_unitario'].hasError('required')">
          El costo unitario es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>attach_money</mat-icon>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Total</mat-label>
        <input formControlName="total" matInput type="number" />
        <mat-error *ngIf="form.controls['total'].hasError('required')">
          El total es <strong> requerida </strong>
        </mat-error>
        <mat-icon matSuffix>monetization_on</mat-icon>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Fecha de Solicitud a Proveedor</mat-label>
        <input
          matInput
          [matDatepicker]="pickerProveedor"
          formControlName="fecha_proveedor"
          (dateChange)="onDateChange($event, 'fecha_proveedor')"
        />
        <mat-datepicker-toggle
          matSuffix
          [for]="pickerProveedor"
        ></mat-datepicker-toggle>
        <mat-datepicker #pickerProveedor></mat-datepicker>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Estado Proveedor</mat-label>
        <mat-select formControlName="estado_proveedor" name="estado">
          <mat-option [value]="option.value" *ngFor="let option of statusP">{{
            option.value
          }}</mat-option>
        </mat-select>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Fecha de Terminado Proveedor</mat-label>
        <input
          matInput
          [matDatepicker]="pickerTerminado"
          formControlName="fecha_resuelto_proveedor"
          (dateChange)="onDateChange($event, 'fecha_resuelto_proveedor')"
        />
        <mat-datepicker-toggle
          matSuffix
          [for]="pickerTerminado"
        ></mat-datepicker-toggle>
        <mat-datepicker #pickerTerminado></mat-datepicker>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>AutorizÃ³</mat-label>
        <input
          formControlName="autorizo"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-icon matSuffix>bookmark</mat-icon>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Fecha de Resuelto Cliente</mat-label>
        <input
          matInput
          [matDatepicker]="pickerCliente"
          formControlName="fecha_resuelto_cliente"
          (dateChange)="onDateChange($event, 'fecha_resuelto_cliente')"
        />
        <mat-datepicker-toggle
          matSuffix
          [for]="pickerCliente"
        ></mat-datepicker-toggle>
        <mat-datepicker #pickerCliente></mat-datepicker>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Estado Cliente</mat-label>
        <mat-select formControlName="estado_cliente" name="estado_cliente">
          <mat-option [value]="option.value" *ngFor="let option of statusC">{{
            option.value
          }}</mat-option>
        </mat-select>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field>
        <mat-label>Motivo</mat-label>
        <textarea
          oninput="this.value = this.value.toUpperCase()"
          matInput
          formControlName="motivo"
        ></textarea>
      </mat-form-field>
    </div>
  </div>
  <div mat-dialog-actions align="center" class="row">
    <div class="col">
      <p *ngIf="isUpdateMode()">Ultima modificacion: {{ data.modificador }}</p>
    </div>
    <div class="col text-end">
      <button
        mat-button
        *ngIf="isCreateMode()"
        [disabled]="form.invalid"
        (click)="onAdd()"
      >
        Agregar
      </button>
      <button
        mat-button
        *ngIf="isUpdateMode()"
        [disabled]="form.invalid"
        (click)="onAdd()"
      >
        Actualizar
      </button>
      <button mat-button (click)="onNoClick()">Cancelar</button>
    </div>
  </div>
</form>



================================================
FILE: src/app/components/dashboard-admin/garantias/garantia-dialog/garantia-dialog.component.scss
================================================
.gutter {
  --bs-gutter-x: 0;
}

.content {
  @media (max-width: 1024px) {
    display: none;
  }
}



================================================
FILE: src/app/components/dashboard-admin/garantias/garantia-dialog/garantia-dialog.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { GarantiaDialogComponent } from './garantia-dialog.component';

describe('GarantiaDialogComponent', () => {
  let component: GarantiaDialogComponent;
  let fixture: ComponentFixture<GarantiaDialogComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ GarantiaDialogComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(GarantiaDialogComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/garantias/garantia-dialog/garantia-dialog.component.ts
================================================
import { Component, Inject } from '@angular/core';
import {
  FormBuilder,
  FormControl,
  FormGroup,
  Validators,
} from '@angular/forms';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import {
  MomentDateAdapter,
  MAT_MOMENT_DATE_ADAPTER_OPTIONS,
} from '@angular/material-moment-adapter';
import {
  DateAdapter,
  MAT_DATE_FORMATS,
  MAT_DATE_LOCALE,
} from '@angular/material/core';
import * as _moment from 'moment';
import 'moment/locale/es';
import { Subject } from 'rxjs';
import { MainService } from 'src/app/services/main.service';
import { GarantiasRes } from 'src/app/interfaces/garantias';
import { Convert, User } from 'src/app/interfaces/user';
import { Res } from 'src/app/interfaces/response';
import * as moment from 'moment';

export const MY_FORMATS = {
  parse: {
    dateInput: 'DD/MM/YYYY',
  },
  display: {
    dateInput: 'DD/MM/YYYY',
    monthYearLabel: 'DD MMMM YYYY',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'DD MMMM YYYY',
  },
};

@Component({
  selector: 'app-garantia-dialog',
  templateUrl: './garantia-dialog.component.html',
  styleUrls: ['./garantia-dialog.component.scss'],
  providers: [
    { provide: MAT_DATE_LOCALE, useValue: 'es-ES' },
    {
      provide: DateAdapter,
      useClass: MomentDateAdapter,
      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],
    },

    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },
  ],
})
export class GarantiaDialogComponent {
  private route = '/warranty';
  form!: FormGroup;
  mode!: Number;
  title!: String;
  user!: User;

  statusP = [
    {
      value: 'PENDIENTE',
    },
    {
      value: 'CANCELADO',
    },
    {
      value: 'EN TRÁMITE',
    },
    {
      value: 'NOTA DE CRÉDITO',
    },
    {
      value: 'NO AUTORIZADO',
    },
    {
      value: 'CORTESÍA',
    },
    {
      value: 'REPARADO',
    },
    {
      value: 'MERMA',
    },
    {
      value: 'CAMBIO FÍSICO',
    }
  ];
  statusC = [
    {
      value: 'CANCELADO',
    },
    {
      value: 'EN TRÁMITE',
    },
    {
      value: 'DEVOLUCIÓN',
    },
    {
      value: 'NO AUTORIZADO',
    },
    {
      value: 'CORTESÍA',
    },
    {
      value: 'REPARADO',
    },
    {
      value: 'MERMA',
    },
    {
      value: 'CAMBIO FÍSICO',
    },
    {
      value: 'DEVOLUCIÓN',
    }
  ];
  comprobante = [
    {
      value: 'REMISIÓN',
    },
    {
      value: 'FACTURA ',
    },
  ];

  protected _onDestroy = new Subject<void>();
  constructor(
    private fb: FormBuilder,
    public dialogRef: MatDialogRef<GarantiaDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: GarantiasRes,
    private mainService: MainService,
    private snackbar: MatSnackBar
  ) {
    this.user = Convert.toUser(sessionStorage.getItem('user_taller') ?? '');

    if (this.data) {
      this.mode = 1;
      this.title = 'Actualizar';
      this.form = this.fb.group({
        id: [this.data.id, Validators.required],
        id_servicio: [this.data.id_servicio],
        traspaso: [this.data.traspaso, Validators.required],
        fecha_registro: [this.data.fecha_registro],
        folio: [this.data.folio, Validators.required],
        autorizo: [this.data.autorizo],
        producto: [this.data.producto, Validators.required],
        marca: [this.data.marca, Validators.required],
        telefono: [this.data.telefono,   
          [
          Validators.minLength(10),
          Validators.pattern('^[0-9]*$'),
        ],],
        serie: [this.data.serie],
        modelo: [this.data.modelo, Validators.required],
        cantidad: [this.data.cantidad, Validators.required],
        costo_unitario: [this.data.costo_unitario, Validators.required],
        total: [this.data.total, Validators.required],
        motivo: [this.data.motivo],
        fecha_proveedor: [this.data.fecha_proveedor],
        fecha_resuelto_proveedor: [this.data.fecha_resuelto_proveedor],
        fecha_resuelto_cliente: [this.data.fecha_resuelto_cliente],
        estado_cliente: [this.data.estado_cliente],
        estado_proveedor: [this.data.estado_proveedor],
        id_modificado: [this.user.id],
        doc: [this.data.doc],

      });
    } else {
      this.mode = 0;
      this.title = 'Nuevo';
      this.form = this.fb.group({
        traspaso: ['', Validators.required],
        id_servicio: [null],
        folio: ['', Validators.required],
        autorizo: [''],
        fecha_registro: [moment().format("YYYY-MM-DD h:mm:ss")],
        producto: ['', Validators.required],
        marca: ['', Validators.required],
        modelo: ['', Validators.required],
        telefono: ['',  [
          Validators.minLength(10),
          Validators.pattern('^[0-9]*$'),
        ],],
        serie: [''],
        cantidad: ['', Validators.required],
        costo_unitario: ['', Validators.required],
        total: ['', Validators.required],
        motivo: ['', Validators.required],
        fecha_proveedor: [null],
        fecha_resuelto_proveedor: [null],
        fecha_resuelto_cliente: [null],
        estado_proveedor: [this.statusP[0].value, Validators.required],
        estado_cliente: [this.statusC[0].value, Validators.required],
        id_modificado: [this.user.id],
        doc: [''],
      });
    }
  }

  onNoClick(): void {
    this.dialogRef.close();
  }
  onAdd(): void {
    const garantia = this.form.value;
    garantia.fecha_proveedor = garantia.fecha_proveedor
      ? _moment(garantia.fecha_proveedor).format('YYYY-MM-DD')
      : null;
    garantia.fecha_resuelto_proveedor = garantia.fecha_resuelto_proveedor
      ? _moment(garantia.fecha_resuelto_proveedor).format('YYYY-MM-DD')
      : null;
    garantia.fecha_resuelto_cliente = garantia.fecha_resuelto_cliente
      ? _moment(garantia.fecha_resuelto_cliente).format('YYYY-MM-DD')
      : null;
    if (this.isCreateMode()) {
      this.mainService
        .postRequest(garantia, this.route)
        .subscribe((res: Res) => {
          if (res.error) {
            this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
              duration: 4000,
              horizontalPosition: 'center',
              verticalPosition: 'top',
            });
          } else {
            this.dialogRef.close(garantia);
          }
        });
    } else {
      this.mainService
        .putRequest(garantia, this.route)
        .subscribe((res: Res) => {
          if (res.error) {
            this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
              duration: 4000,
              horizontalPosition: 'center',
              verticalPosition: 'top',
            });
          } else {
            this.dialogRef.close(garantia);
          }
        });
    }
  }
  onDateChange(event: any, controlName: string) {
    const selectedDate = event.value;
    
    if (selectedDate) {
      // Formatear la fecha seleccionada al formato "YYYY-MM-DD"
      const formattedDate = selectedDate.format('YYYY-MM-DD');
      
      // Actualizar el valor del FormControl con la fecha formateada
      this.form.controls[controlName].setValue(formattedDate);
    }
  }
  ngOnDestroy() {
    this._onDestroy.next();
    this._onDestroy.complete();
  }
  isCreateMode() {
    return this.mode === 0;
  }

  isUpdateMode() {
    return this.mode === 1;
  }
  uploadDocumento(event: any) {
    const file: File = event!.target.files ? event.target.files[0] : "";
    this.form.controls["doc"].setValue(file.name);
    const formData = new FormData();
    formData.append("doc", file);
    this.mainService.uploadFile(formData, "/file").subscribe((res: Res) => {
      this.snackbar.open(`${res.data} (${res.code})`, "Aceptar", {
        duration: 5000,
        horizontalPosition: "center",
        verticalPosition: "top",
      });
    });
  }
  avisar() {
    let telefono = this.form.controls["telefono"].value;
    let producto = this.form.controls["producto"].value;
    let marca = this.form.controls["marca"].value;

    let mensaje =
      `Buen día, estimado cliente. Centro de Servicio Don Pedro le informa que la garantía ${this.data.id} de su ${producto} ${marca} fue aprobada. Favor pasar al Centro de Servicio para su recolección.`;
    window.open(
      'https://web.whatsapp.com/send?phone=521' + telefono + '&text=' + mensaje,
      '_blank'
    );
  }

  verDoc() {
    this.mainService
      .getFile(`/file/${this.form.controls["doc"].value}`)
      .subscribe((file: Blob) => {
        const url = window.URL.createObjectURL(file);
        const a = document.createElement("a");
        a.href = url;
        a.download = this.form.controls["doc"].value;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
      });
  }
}



================================================
FILE: src/app/components/dashboard-admin/graficas/earnings-chart/earnings-chart.component.html
================================================
<mat-card class="dashboard-card-secondary absolute">
  <mat-card-header>
    <mat-card-title>Ventas del Taller por Servicios</mat-card-title>
    <mat-card-subtitle>Ventas divididas por mes</mat-card-subtitle>
  </mat-card-header>
  <mat-card-content class="text-center margen">
    <div class="container">
      <div class="row">
        <div class="col">
          <div id="chartdiv" style="height: 550px"></div>
        </div>
      </div>
    </div>
  </mat-card-content>
</mat-card>



================================================
FILE: src/app/components/dashboard-admin/graficas/earnings-chart/earnings-chart.component.scss
================================================
mat-card-header {
  display: grid;
  align-content: center;
  text-align: center;
}

.dashboard-card {
  position: absolute;
  display: grid;
  top: 15px;
  left: 15px;
  right: 15px;
  bottom: 15px;
}
.dashboard-card-secondary {
  position: absolute;
  display: grid;
  top: 0px;
  left: 15px;
  right: 15px;
  bottom: 15px;
}



================================================
FILE: src/app/components/dashboard-admin/graficas/earnings-chart/earnings-chart.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { EarningsChartComponent } from './earnings-chart.component';

describe('EarningsChartComponent', () => {
  let component: EarningsChartComponent;
  let fixture: ComponentFixture<EarningsChartComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ EarningsChartComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(EarningsChartComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/graficas/earnings-chart/earnings-chart.component.ts
================================================
import { Component, Inject, NgZone, OnInit, PLATFORM_ID } from '@angular/core';
import * as am4core from '@amcharts/amcharts4/core';
import * as am4charts from '@amcharts/amcharts4/charts';
import am4themes_animated from "@amcharts/amcharts4/themes/animated";
import am4themes_material from "@amcharts/amcharts4/themes/material";

import { MainService } from 'src/app/services/main.service';
import { Res } from 'src/app/interfaces/response';
import { isPlatformBrowser } from '@angular/common';
import { FormControl } from '@angular/forms';
import { Chart } from 'src/app/interfaces/chart';

@Component({
  selector: 'app-earnings-chart',
  templateUrl: './earnings-chart.component.html',
  styleUrls: ['./earnings-chart.component.scss'],
})
export class EarningsChartComponent implements OnInit {
  private route = '/chart/earnings';
  private earningsChart!: am4charts.XYChart;
  private chartData!: any;

  constructor(
    @Inject(PLATFORM_ID) private platformId: any,
    private zone: NgZone,
    public mainService: MainService
  ) {
    am4core.options.autoDispose = true;

  }
  ngOnInit(): void {
    this.getChart();
  }
  // Run the function only in the browser
  browserOnly(f: () => void) {
    if (isPlatformBrowser(this.platformId)) {
      this.zone.runOutsideAngular(() => {
        f();
      });
    }
  }
  getChart() {
    this.mainService
      .getRequest({},this.route)
      .subscribe((res: any) => {
        console.log(res);
        this.chartData = res.data;
        this.generateChart();
      });
  }

  generateChart() {
    this.browserOnly(() => {
      function am4themes_myTheme(target:any) {
        if (target instanceof am4core.ColorSet) {
          target.list = [
            am4core.color("#b53fa1"),
            am4core.color("#003c69"),
            am4core.color("#4f94bc"),
            am4core.color("#ad0071"),
            am4core.color("#a700ad"),

          ];
        }
      }
      am4core.useTheme(am4themes_myTheme);
      am4core.useTheme(am4themes_animated);

      let chart = am4core.create('chartdiv', am4charts.XYChart);

      chart.paddingRight = 20;

      chart.data = this.chartData.totals;

      let mainAxis = chart.xAxes.push(new am4charts.CategoryAxis());
      mainAxis.dataFields.category = 'main';
      this.chartData.years.forEach((year: number) => {
        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
          
        let series = chart.series.push(new am4charts.LineSeries());
        series.strokeWidth = 4;
        series.bullets.push(new am4charts.CircleBullet());
        series.dataFields.valueY = `${year}`;
        series.dataFields.categoryX = 'main';
        series.name = `${year}`;
        series.showOnInit = false;
        series.tooltipText = '{categoryX} ' + `${year}: ` + '${valueY.value}';
        chart.cursor = new am4charts.XYCursor();

      });
      chart.legend = new am4charts.Legend();
    

      this.earningsChart = chart;
    });
  }
}



================================================
FILE: src/app/components/dashboard-admin/graficas/status-chart/status-chart.component.html
================================================
<mat-card class="dashboard-card-secondary absolute">
    <mat-card-header>
      <mat-card-title>Estado de Servicios</mat-card-title>
    </mat-card-header>
    <mat-card-content class="text-center margen">
      <div class="container">
        <div class="row">
          <div class="col">
            <div id="chartdiv2" style="height: 300px"></div>
          </div>
        </div>
      </div>
    </mat-card-content>
    <mat-card-actions class="justify-content-evenly">
        <mat-form-field>
            <mat-label for="monthForm">Mes y AÃ±o</mat-label>
            <input id="monthForm" matInput [matDatepicker]="dp" [formControl]="monthForm">
            <mat-datepicker-toggle matSuffix [for]="dp"></mat-datepicker-toggle>
            <mat-datepicker #dp startView="year" (monthSelected)="setMonthAndYear($event, dp)" panelClass="month-picker">
            </mat-datepicker>
        </mat-form-field>
    </mat-card-actions>
  </mat-card>
  


================================================
FILE: src/app/components/dashboard-admin/graficas/status-chart/status-chart.component.scss
================================================
mat-card-header {
    display: grid;
    align-content: center;
    text-align: center;
  }
  
  .dashboard-card {
    position: absolute;
    display: grid;
    top: 15px;
    left: 15px;
    right: 15px;
    bottom: 15px;
  }
  
  .dashboard-card-secondary {
    position: absolute;
    display: grid;
    top: 0px;
    left: 15px;
    right: 15px;
    bottom: 15px;
  }


================================================
FILE: src/app/components/dashboard-admin/graficas/status-chart/status-chart.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { StatusChartComponent } from './status-chart.component';

describe('StatusChartComponent', () => {
  let component: StatusChartComponent;
  let fixture: ComponentFixture<StatusChartComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ StatusChartComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(StatusChartComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/graficas/status-chart/status-chart.component.ts
================================================
import { Component, Inject, NgZone, OnInit, PLATFORM_ID } from '@angular/core';
import * as am4core from '@amcharts/amcharts4/core';
import * as am4charts from '@amcharts/amcharts4/charts';
import am4themes_animated from '@amcharts/amcharts4/themes/animated';
import { UntypedFormControl } from '@angular/forms';
import {
  MomentDateAdapter,
  MAT_MOMENT_DATE_ADAPTER_OPTIONS,
} from '@angular/material-moment-adapter';
import {
  MAT_DATE_LOCALE,
  DateAdapter,
  MAT_DATE_FORMATS,
} from '@angular/material/core';
import * as moment from 'moment';
import { MatDatepicker } from '@angular/material/datepicker';
import { Res } from 'src/app/interfaces/response';
import { MainService } from 'src/app/services/main.service';
import { isPlatformBrowser } from '@angular/common';
import { Chart } from 'src/app/interfaces/chart';

export const MY_FORMATS = {
  parse: {
    dateInput: 'MM/YYYY',
  },
  display: {
    dateInput: 'MM/YYYY',
    monthYearLabel: 'MMMM YYYY',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'MMMM YYYY',
  },
};
@Component({
  selector: 'app-status-chart',
  templateUrl: './status-chart.component.html',
  styleUrls: ['./status-chart.component.scss'],
  providers: [
    { provide: MAT_DATE_LOCALE, useValue: 'es-ES' },
    {
      provide: DateAdapter,
      useClass: MomentDateAdapter,
      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],
    },

    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },
  ],
})
export class StatusChartComponent implements OnInit {
  private route = '/chart/status';
  private statusChart!: am4charts.PieChart;
  private data!: Chart[];
  public monthForm = new UntypedFormControl(moment());

  constructor(
    @Inject(PLATFORM_ID) private platformId: any,
    private zone: NgZone,
    public mainService: MainService
  ) {
    am4core.options.autoDispose = true;
  }
  ngOnInit(): void {
    this.getChart();
  }

  setMonthAndYear(
    normalizedMonthAndYear: moment.Moment,
    datepicker: MatDatepicker<moment.Moment>
  ) {
    const ctrlValue = this.monthForm.value;
    ctrlValue.month(normalizedMonthAndYear.month());
    ctrlValue.year(normalizedMonthAndYear.year());
    this.monthForm.setValue(ctrlValue);
    this.getChart();
    datepicker.close();
  }

  getChart() {
    this.mainService
      .getRequest(
        {
          month: this.monthForm.value.month() + 1,
          year: this.monthForm.value.year(),
        },
        this.route
      )
      .subscribe((res: Res) => {
        this.data = res.data;
        this.generateChart();
      });
  }
  // Run the function only in the browser
  browserOnly(f: () => void) {
    if (isPlatformBrowser(this.platformId)) {
      this.zone.runOutsideAngular(() => {
        f();
      });
    }
  }
  generateChart() {
    this.browserOnly(() => {
      am4core.useTheme(am4themes_animated);
      let chart = am4core.create('chartdiv2', am4charts.PieChart);

      chart.data = this.data;

      let series = chart.series.push(new am4charts.PieSeries());

      series.dataFields.value = "total";
      series.dataFields.category = "main";

      this.statusChart = chart;
    });
  }

}



================================================
FILE: src/app/components/dashboard-admin/graficas/tech-chart/tech-chart.component.html
================================================
<mat-card class="dashboard-card-secondary absolute">
  <mat-card-header>
    <mat-card-title>Servicios por TÃ©cnico</mat-card-title>
  </mat-card-header>
  <mat-card-content class="text-center margen">
    <div class="container">
      <div class="row">
        <div class="col">
          <div id="chartdiv3" style="height: 300px"></div>
        </div>
      </div>
    </div>
  </mat-card-content>
  <mat-card-actions class="justify-content-evenly">
    <mat-form-field>
      <mat-label for="monthYearForm">Mes y AÃ±o</mat-label>
      <input
        id="monthYearForm"
        matInput
        [matDatepicker]="dp"
        [formControl]="monthForm"
      />
      <mat-datepicker-toggle matSuffix [for]="dp"></mat-datepicker-toggle>
      <mat-datepicker
        #dp
        startView="year"
        (monthSelected)="setMonthAndYear($event, dp)"
        panelClass="month-picker"
      >
      </mat-datepicker>
    </mat-form-field>
  </mat-card-actions>
</mat-card>



================================================
FILE: src/app/components/dashboard-admin/graficas/tech-chart/tech-chart.component.scss
================================================
mat-card-header {
    display: grid;
    align-content: center;
    text-align: center;
  }
  
  .dashboard-card {
    position: absolute;
    display: grid;
    top: 15px;
    left: 15px;
    right: 15px;
    bottom: 15px;
  }
  .dashboard-card-secondary {
    position: absolute;
    display: grid;
    top: 0px;
    left: 15px;
    right: 15px;
    bottom: 15px;
  }


================================================
FILE: src/app/components/dashboard-admin/graficas/tech-chart/tech-chart.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TechChartComponent } from './tech-chart.component';

describe('TechChartComponent', () => {
  let component: TechChartComponent;
  let fixture: ComponentFixture<TechChartComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TechChartComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(TechChartComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/graficas/tech-chart/tech-chart.component.ts
================================================
import { Component, Inject, NgZone, OnInit, PLATFORM_ID } from '@angular/core';
import * as am4core from '@amcharts/amcharts4/core';
import * as am4charts from '@amcharts/amcharts4/charts';
import am4themes_animated from '@amcharts/amcharts4/themes/animated';
import { FormControl, UntypedFormControl } from '@angular/forms';
import {
  MomentDateAdapter,
  MAT_MOMENT_DATE_ADAPTER_OPTIONS,
} from '@angular/material-moment-adapter';
import {
  MAT_DATE_LOCALE,
  DateAdapter,
  MAT_DATE_FORMATS,
} from '@angular/material/core';
import * as moment from 'moment';
import { MatDatepicker } from '@angular/material/datepicker';
import { Res } from 'src/app/interfaces/response';
import { MainService } from 'src/app/services/main.service';
import { isPlatformBrowser } from '@angular/common';
import { Chart } from 'src/app/interfaces/chart';

export const MY_FORMATS = {
  parse: {
    dateInput: 'MM/YYYY',
  },
  display: {
    dateInput: 'MM/YYYY',
    monthYearLabel: 'MMMM YYYY',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'MMMM YYYY',
  },
};
@Component({
  selector: 'app-tech-chart',
  templateUrl: './tech-chart.component.html',
  styleUrls: ['./tech-chart.component.scss'],
  providers: [
    { provide: MAT_DATE_LOCALE, useValue: 'es-ES' },
    {
      provide: DateAdapter,
      useClass: MomentDateAdapter,
      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],
    },

    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },
  ],
})
export class TechChartComponent implements OnInit {
  private route = '/chart/tech';
  private techChart!: am4charts.PieChart;
  private data!: Chart[];
  public monthForm = new UntypedFormControl(moment());

  constructor(
    @Inject(PLATFORM_ID) private platformId: any,
    private zone: NgZone,
    public mainService: MainService
  ) {
    am4core.options.autoDispose = true;
  }
  ngOnInit(): void {
    this.getChart();
  }

  setMonthAndYear(
    normalizedMonthAndYear: moment.Moment,
    datepicker: MatDatepicker<moment.Moment>
  ) {
    const ctrlValue = this.monthForm.value;
    ctrlValue.month(normalizedMonthAndYear.month());
    ctrlValue.year(normalizedMonthAndYear.year());
    this.monthForm.setValue(ctrlValue);
    this.getChart();
    datepicker.close();
  }

  getChart() {
    this.mainService
      .getRequest(
        {
          month: this.monthForm.value.month() + 1,
          year: this.monthForm.value.year(),
        },
        this.route
      )
      .subscribe((res: Res) => {
        this.data = res.data;
  
        this.generateChart();
      });
  }
  // Run the function only in the browser
  browserOnly(f: () => void) {
    if (isPlatformBrowser(this.platformId)) {
      this.zone.runOutsideAngular(() => {
        f();
      });
    }
  }
  generateChart() {
    this.browserOnly(() => {
      am4core.useTheme(am4themes_animated);
      let chart = am4core.create('chartdiv3', am4charts.PieChart);

      chart.data = this.data;

      let series = chart.series.push(new am4charts.PieSeries());

      series.dataFields.value = "total";
      series.dataFields.category = "main";

      this.techChart = chart;
    });
  }

}



================================================
FILE: src/app/components/dashboard-admin/reportes/reportes.component.html
================================================
<mat-grid-list cols="3" [rowHeight]="475">
  <mat-grid-tile [colspan]="1" [rowspan]="1">
    <mat-card class="dashboard-card absolute">
      <mat-card-header>
        <mat-card-title>Reporte de Servicios Realizados</mat-card-title>
        <mat-card-subtitle
          >Seleccione el rango mensual para generar el
          reporte.</mat-card-subtitle
        >
      </mat-card-header>
      <mat-card-content class="text-center margen">
        <mat-form-field class="mt-5 w-75">
          <mat-label>DÃ­a, Mes y AÃ±o</mat-label>

          <mat-date-range-input
            [formGroup]="reportRange"
            [rangePicker]="reportPicker"
          >
            <input
              id="start_date"
              matStartDate
              formControlName="start_date"
              placeholder="Inicio"
            />
            <input
              id="end_date"
              matEndDate
              formControlName="end_date"
              placeholder="Fin"
            />
          </mat-date-range-input>

          <mat-datepicker-toggle
            matSuffix
            [for]="reportPicker"
          ></mat-datepicker-toggle>
          <mat-date-range-picker #reportPicker></mat-date-range-picker>
        </mat-form-field>
      </mat-card-content>
      <mat-card-actions class="justify-content-evenly">
        <a
          color="primary"
          target="_blank"
          class="mb-3"
          mat-raised-button
          (click)="getReport()"
        >
          <mat-icon>post_add</mat-icon> Generar Reporte</a
        >
      </mat-card-actions>
    </mat-card>
  </mat-grid-tile>
  <mat-grid-tile [colspan]="1" [rowspan]="1">
    <mat-card class="dashboard-card absolute">
      <mat-card-header>
        <mat-card-title>Excel de Servicios Registrados</mat-card-title>
        <mat-card-subtitle
          >Seleccione el rango mensual para generar el
          reporte.</mat-card-subtitle
        >
      </mat-card-header>
      <mat-card-content class="text-center margen">
        <mat-form-field class="mt-5 w-75">
          <mat-label>DÃ­a, Mes y AÃ±o</mat-label>

          <mat-date-range-input
            [formGroup]="serviceRange"
            [rangePicker]="picker"
          >
            <input
              id="start_dater"
              matStartDate
              formControlName="start_date"
              placeholder="Inicio"
            />
            <input
              id="end_dater"
              matEndDate
              formControlName="end_date"
              placeholder="Fin"
            />
          </mat-date-range-input>

          <mat-datepicker-toggle
            matSuffix
            [for]="picker"
          ></mat-datepicker-toggle>
          <mat-date-range-picker #picker></mat-date-range-picker>
        </mat-form-field>
      </mat-card-content>
      <mat-card-actions class="justify-content-evenly">
        <button
          mat-raised-button
          class="mb-3 csv-button"
          (click)="getCSVServicio()"
        >
          <mat-icon>save_alt</mat-icon> Descargar Excel
        </button>
      </mat-card-actions>
    </mat-card>
  </mat-grid-tile>
  <mat-grid-tile [colspan]="1" [rowspan]="1">
    <mat-card class="dashboard-card absolute">
      <mat-card-header>
        <mat-card-title>Excel de GarantÃ­as</mat-card-title>
        <mat-card-subtitle
          >Seleccione el rango mensual para generar el
          reporte.</mat-card-subtitle
        >
      </mat-card-header>
      <mat-card-content class="text-center margen">
        <mat-form-field class="mt-5 w-75">
          <mat-label>DÃ­a, Mes y AÃ±o</mat-label>

          <mat-date-range-input
            [formGroup]="warrantyRange"
            [rangePicker]="warrantyPicker"
          >
            <input
              id="start_dater"
              matStartDate
              formControlName="start_date"
              placeholder="Inicio"
            />
            <input
              id="end_dater"
              matEndDate
              formControlName="end_date"
              placeholder="Fin"
            />
          </mat-date-range-input>

          <mat-datepicker-toggle
            matSuffix
            [for]="warrantyPicker"
          ></mat-datepicker-toggle>
          <mat-date-range-picker #warrantyPicker></mat-date-range-picker>
        </mat-form-field>
      </mat-card-content>
      <mat-card-actions class="justify-content-evenly">
        <button
          mat-raised-button
          class="mb-3 csv-button"
          (click)="getCSVGarantia()"
        >
          <mat-icon>save_alt</mat-icon> Descargar Excel
        </button>
      </mat-card-actions>
    </mat-card>
  </mat-grid-tile>
  <mat-grid-tile [colspan]="3" [rowspan]="2">
    <app-earnings-chart></app-earnings-chart>
  </mat-grid-tile>
</mat-grid-list>
<mat-grid-list cols="2" [rowHeight]="475">
  <mat-grid-tile [colspan]="1" [rowspan]="1">
    <app-status-chart></app-status-chart>
  </mat-grid-tile>
  <mat-grid-tile [colspan]="1" [rowspan]="1">
    <app-tech-chart></app-tech-chart>
  </mat-grid-tile>
</mat-grid-list>



================================================
FILE: src/app/components/dashboard-admin/reportes/reportes.component.scss
================================================
.csv-button {
  color: white;
  background-color: #25D366;
}
mat-card-header {
  display: grid;
  align-content: center;
  text-align: center;
}

.dashboard-card {
  position: absolute;
  display: grid;
  top: 15px;
  left: 15px;
  right: 15px;
  bottom: 15px;
}

.dashboard-card-secondary {
  position: absolute;
  display: grid;
  top: 0px;
  left: 15px;
  right: 15px;
  bottom: 15px;
}



================================================
FILE: src/app/components/dashboard-admin/reportes/reportes.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ReportesComponent } from './reportes.component';

describe('ReportesComponent', () => {
  let component: ReportesComponent;
  let fixture: ComponentFixture<ReportesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ReportesComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ReportesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/reportes/reportes.component.ts
================================================
import { Component } from '@angular/core';
import {MomentDateAdapter, MAT_MOMENT_DATE_ADAPTER_OPTIONS} from '@angular/material-moment-adapter';
import {DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE} from '@angular/material/core';
import * as _moment from 'moment';
import 'moment/locale/es';
import { FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { Router, ActivatedRoute, ParamMap } from '@angular/router';
import * as moment from 'moment';
import { CSVService } from '../../../services/csv.service';
import { MainService } from 'src/app/services/main.service';
import { Convert, ToolService } from 'src/app/interfaces/toolservice';
import { Res } from 'src/app/interfaces/response';
import { formatDate } from '@angular/common';
import { GarantiasRes, Convert as ConvertG } from 'src/app/interfaces/garantias';


export const MY_FORMATS = {
  parse: {
    dateInput: 'MM/YYYY',
  },
  display: {
    dateInput: 'DD/MM/YYYY',
    monthYearLabel: 'MMMM YYYY',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'MMMM YYYY',
  },
};

@Component({
  selector: 'app-reportes',
  templateUrl: './reportes.component.html',
  styleUrls: ['./reportes.component.scss'],
  providers: [
    {provide: MAT_DATE_LOCALE, useValue: 'es-ES'},
    {
      provide: DateAdapter,
      useClass: MomentDateAdapter,
      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],
    },

    {provide: MAT_DATE_FORMATS, useValue: MY_FORMATS},
  ],
})
export class ReportesComponent {
  reportRange!: FormGroup;
  serviceRange! : FormGroup;
  warrantyRange! : FormGroup;

  route = "/service/by_range"
  
  constructor(public router: Router, private csv: CSVService, private fb: FormBuilder, private mainService: MainService) {
    this.serviceRange = this.fb.group({
      start_date : [moment()],
      end_date : [moment()]

    })
     this.reportRange = this.fb.group({
      start_date : [moment()],
      end_date : [moment()]

    })
    this.warrantyRange = this.fb.group({
      start_date : [moment()],
      end_date : [moment()]

    })
  }
  getReport(){
    const url = this.router.serializeUrl(
      this.router.createUrlTree([`/taller/reporte/${this.reportRange.value.start_date.format('YYYY-MM-DD')}/${this.reportRange.value.end_date.format('YYYY-MM-DD')}`])
    );
    window.open(url, '_blank');
  }
  getCSVServicio(){
    const obj = this.serviceRange.value;
    obj.start_date = obj.start_date.format('YYYY-MM-DD')
    obj.end_date = obj.end_date.format('YYYY-MM-DD')
    this.mainService.getRequest(obj, this.route).subscribe((res: Res)=>{
      const data: ToolService[] = res.data;
      data.forEach(servicio => {
        servicio.observaciones = servicio.observaciones.replace(/(\r\n|\n|\r)/gm, "");
        servicio.falla_detectada = servicio.falla_detectada.replace(/(\r\n|\n|\r)/gm, "");
      });
      let jsonReporte = Convert.toolServiceToJson(data);
      setTimeout(()=>{
        this.csv.downloadFile(jsonReporte, 'Reporte', ['id','id_cliente', 'id_usuario', 'nombre_cliente', 'telefono_cliente', 'encargado', 'fecha_ingreso', 'producto', 'marca', 'modelo', 'tipo', 'serie', 'garantia', 'falla_detectada', 'cotizacion', 'fecha_terminado', 'fecha_entrega', 'importe', 'estatus', 'observaciones'])

        }, 1500);
    });
  }
  getCSVGarantia(){
    const obj = this.warrantyRange.value;
    obj.start_date = obj.start_date.format('YYYY-MM-DD')
    obj.end_date = obj.end_date.format('YYYY-MM-DD')
    this.mainService.getRequest(obj, '/warranty/by_range').subscribe((res: Res)=>{
      const data: GarantiasRes[] = res.data;
      data.forEach(garantia => {
        garantia.motivo = garantia.motivo.replace(/(\r\n|\n|\r)/gm, "");
      });
      let jsonReporte = ConvertG.garantiasResToJson(data);
      setTimeout(()=>{
        this.csv.downloadFile(jsonReporte, 'Reporte', [
          'id',
          'traspaso',
          'autorizo',
          'folio',
          'fecha_registro',
          'producto',
          'marca',
          'modelo',
          'cantidad',
          'costo_unitario',
          'total',
          'motivo',
          'fecha_proveedor',
          'fecha_resuelto_proveedor',
          'fecha_resuelto_cliente',
          'estado_cliente',
          'estado_proveedor',
          'id_modificado',
          'modificador',
          'doc'
        ])

        }, 1500);
    });
  }

}



================================================
FILE: src/app/components/dashboard-admin/reportes/reporte-tabla/reporte-tabla.component.html
================================================
<div class="container-fluid" id="htmlData">
    <div class="margen-tabla">
        <!-- Just an image -->
        <nav class="navbar navbar-light bg-transparent">
            <a class="navbar-brand">
                <img src="./assets/logo.png" width="100" alt="">
            </a>
        </nav>
        <mat-spinner [mode]="mode" class="mx-auto centrar" diameter="50" *ngIf="isLoading">
        </mat-spinner>
        <div class="row">
            <div class="col">
  
                <h1 class="text-center" *ngIf="!isLoading">
                    <b>REPORTE MENSUAL DE SERVICIOS</b>
                </h1>
  
                <h2 class="text-center" *ngIf="!isLoading">
                    TALLER DE HERRAMIENTAS
                </h2>
            </div>
  
        </div>
        <div class="row" *ngIf="!isLoading">
            <div class="col d-flex justify-content-evenly">
                <h2>
                    <b>Inicio: {{start_date | date: "dd/MM/yyyy"}}</b>
                </h2>
                <h2>
                    <b>Fin: {{end_date | date: "dd/MM/yyyy"}}</b>
                </h2>
            </div>
        </div>
  
        <table *ngIf="!isLoading" class="mt-5 table table-light text-size">
            <thead class="text-center">
                <tr>
                    <th scope="col" class="td-width">ESTATUS</th>
                    <th scope="col" class="td-width">CANTIDAD</th>
                    <th scope="col" class="td-width">PORCENTAJE</th>
  
                </tr>
            </thead>
            <tbody class="text-center">
                <tr>
                    <th scope="row">POR AUTORIZAR</th>
                    <td> {{ report.service_report['por_autorizar'] }}</td>
                    <td> {{ report.service_report['porc_pa']  | number: '1.1-1' }}%</td>
                </tr>
                <tr>
                    <th scope="row">NO AUTORIZADO</th>
                    <td> {{ report.service_report['no_autorizado'] }}</td>
                    <td> {{ report.service_report['porc_na']  | number: '1.1-1' }}%</td>
                </tr>
                <tr>
                    <th scope="row">PENDIENTE</th>
                    <td> {{ report.service_report['pendiente'] }}</td>
                    <td> {{ report.service_report['porc_p']  | number: '1.1-1' }}%</td>
                </tr>
                <tr>
                    <th scope="row">TERMINADO</th>
                    <td> {{ report.service_report['terminado'] }}</td>
                    <td> {{ report.service_report['porc_t'] | number: '1.1-1' }}%</td>
                </tr>
                <tr>
                    <th scope="row">ENTREGADO</th>
                    <td> {{ report.service_report['entregado'] }}</td>
                    <td> {{ report.service_report['porc_e'] | number: '1.1-1' }}%</td>
                </tr>
                <tr>
                    <th scope="row">TOTAL</th>
                    <td> {{ report.service_report['total'] }}</td>
                    <td> {{ report.service_report['total'] != 0 ? 100 : 0 | number: '1.1-1' }}%</td>
                </tr>
            </tbody>
        </table>
        <table *ngIf="!isLoading" class="mt-5 text-center table table-light text-size">
            <thead>
                <tr>
                    <th scope="col" class="td-width">ENCARGADO</th>
                    <th scope="col" class="td-width">SERVICIOS ASIGNADOS</th>
                    <th scope="col" class="td-width">POR AUTORIZAR</th>
                    <th scope="col" class="td-width">NO AUTORIZADO</th>
                    <th scope="col" class="td-width">PENDIENTES</th>
                    <th scope="col" class="td-width">TERMINADOS</th>
                    <th scope="col" class="td-width">ENTREGADOS</th>
                    <th scope="col" class="td-width">PORCENTAJE</th>
    
                </tr>
            </thead>
            <tbody>
                <tr *ngFor="let user of report.user_report">
                    <td>{{ user.encargado }}</td>
                    <td>{{ user.servicios }}</td>
                    <td>{{ user.por_autorizar }}</td>
                    <td>{{ user.no_autorizado }}</td>
                    <td>{{ user.pendientes }}</td>
                    <td>{{ user.terminados }}</td>
                    <td>{{ user.entregados }}</td>
                    <td>{{ user.porcentaje | number: '1.1-1' }}%</td>
    
                </tr>
            </tbody>
        </table>
        <table *ngIf="!isLoading" class="mt-5 text-center table table-light text-size">
            <thead>
                <tr>
                    <th scope="col" class="td-width">ENCARGADO</th>
                    <th scope="col" class="td-width">IMPORTE GENERADO</th>
                    <th scope="col" class="td-width">PORCENTAJE</th>
    
                </tr>
            </thead>
            <tbody>
                <tr *ngFor="let user of report.earnings_report">
                    <td>{{ user.encargado }}</td>
                    <td>{{ user.importe | currency: 'MXN':'symbol-narrow' }}</td>
                    <td>{{ user.porcentaje | number: '1.1-1' }}%</td>
    
                </tr>
            </tbody>
        </table>
        <table *ngIf="!isLoading" class="mt-5 text-center table table-light text-size">
            <thead>
                <tr>
                    <th scope="col" class="td-width">ENCARGADO</th>
                    <th scope="col" class="td-width">IMPORTE GENERADO</th>
                    <th scope="col" class="td-width">SERVICIOS EXPRESS</th>
    
                </tr>
            </thead>
            <tbody>
                <tr *ngFor="let user of report.express_report">
                    <td>{{ user.encargado }}</td>
                    <td>{{ user.importe | currency: 'MXN':'symbol-narrow' }}</td>
                    <td>{{ user.servicios }}</td>
    
                </tr>
            </tbody>
        </table>
        <table *ngIf="!isLoading" class="mt-5 text-center table table-light text-size">
            <thead>
                <tr>
                    <th scope="col" class="td-width">ENCARGADO</th>
                    <th scope="col" class="td-width">SERVICIOS EXTERNOS</th>
                    <th scope="col" class="td-width">PENDIENTES</th>
                    <th scope="col" class="td-width">AGENDADOS</th>
                    <th scope="col" class="td-width">TERMINADOS</th>
      
                    <th scope="col" class="td-width">PORCENTAJE</th>
                </tr>
    
     
            </thead>
            <tbody>
                <tr *ngFor="let user of report.external_report">
                    <td>{{ user.encargado }}</td>
                    <td>{{ user.servicios }}</td>
                    <td>{{ user.pendientes }}</td>
                    <td>{{ user.agendado }}</td>
                    <td>{{ user.terminados }}</td>
                    <td>{{ user.porcentaje  | number: '1.1-1' }}%</td>
    
                </tr>
            </tbody>
        </table>
        <div class="row" *ngIf="!isLoading">
            <div class="col d-grid mt-5 justify-content-center">
                <h2>
                    <b>IMPORTE TOTAL:</b> {{ report.service_report['importe_total'] | currency: 'MXN':'symbol-narrow' }}
                </h2>
      
      
            </div>
        </div>
    </div>
  
  </div>
  
  <div class="row mt-4" *ngIf="!isLoading">
    <div class="col d-grid justify-content-center">
        <button color="accent" mat-raised-button (click)="openPDF()"> <mat-icon>description</mat-icon> Generar PDF</button>
  
    </div>
  </div>
  


================================================
FILE: src/app/components/dashboard-admin/reportes/reporte-tabla/reporte-tabla.component.scss
================================================
.text-size {
    font-size: 18px;
  }
  
  .centrar {
    margin-top: 20%;
  }
  
  
  .margen-tabla {
    margin-left: 2%;
    margin-right: 2%;
  }
  
  .row {
    margin-top: 5%;
  }
  


================================================
FILE: src/app/components/dashboard-admin/reportes/reporte-tabla/reporte-tabla.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ReporteTablaComponent } from './reporte-tabla.component';

describe('ReporteTablaComponent', () => {
  let component: ReporteTablaComponent;
  let fixture: ComponentFixture<ReporteTablaComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ReporteTablaComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ReporteTablaComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/reportes/reporte-tabla/reporte-tabla.component.ts
================================================
import { Component, OnInit } from '@angular/core';
import { ProgressSpinnerMode } from '@angular/material/progress-spinner';
import { ActivatedRoute } from '@angular/router';
import { Report } from 'src/app/interfaces/report';
import { Res } from 'src/app/interfaces/response';
import { MainService } from 'src/app/services/main.service';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
@Component({
  selector: 'app-reporte-tabla',
  templateUrl: './reporte-tabla.component.html',
  styleUrls: ['./reporte-tabla.component.scss']
})
export class ReporteTablaComponent implements OnInit {
  route = "/report"
  start_date!: string | null;
  end_date!: string | null;
  report!: Report;
  isLoading = true;
  mode: ProgressSpinnerMode = 'indeterminate';

  constructor(
    private router: ActivatedRoute,
    private  mainService: MainService,
  ) {}

  ngOnInit(): void {
    const routeParams = this.router.snapshot.paramMap;
    this.start_date = routeParams.get('start');
    this.end_date = routeParams.get('end');

    this.getReporte();
  }
  getReporte(){
    this.mainService.getRequest({ start_date: this.start_date, end_date: this.end_date }, `${this.route}/by_range`).subscribe((res: Res)=> {
      this.report = res.data;
      setTimeout(()=>{
        this.isLoading = false
    }, 300);
    });
  }
  public openPDF(): void {
    let DATA: any = document.getElementById('htmlData');
    html2canvas(DATA).then((canvas) => {
      let fileWidth = 208;
      let fileHeight = (canvas.height * fileWidth) / canvas.width;
      const FILEURI = canvas.toDataURL('image/png');
      let PDF = new jsPDF('p', 'mm', 'a4');
      let position = 5;
      PDF.addImage(FILEURI, 'PNG', 1, position, fileWidth, fileHeight);
      PDF.save('SERVICIOS:' + this.start_date + ' ' + this.end_date);
    });
  }
}





================================================
FILE: src/app/components/dashboard-admin/servicios/servicios.component.html
================================================
<div class="container-fluid">
  <div class="row">
    <div class="col text-center">
      <h2>Servicios</h2>
    </div>
  </div>
  
    <div class="row">
      <div class="col">
        <button mat-raised-button class="csv-button" (click)="getCSV()">
          <mat-icon>save_alt</mat-icon> Descargar Excel
        </button>
      </div>
      <div class="col text-center">
        <mat-form-field>
          <mat-label>Mes y AÃ±o</mat-label>
          <input matInput [matDatepicker]="dp" [formControl]="date" />
          <mat-datepicker-toggle matSuffix [for]="dp"></mat-datepicker-toggle>
          <mat-datepicker
            #dp
            startView="year"
            (monthSelected)="setMonthAndYear($event, dp)"
            panelClass="month-picker"
          >
          </mat-datepicker>
        </mat-form-field>
      </div>
      <div class="text-end col-lg-4">
        <button mat-raised-button color="primary" (click)="createServicio()">
          <mat-icon>add</mat-icon> Agregar Servicio
        </button>
      </div>
    </div>
    

  <ag-grid-angular
    class="ag-theme-quartz d-grid"
    style="width: 100%; height: 80vh"
    [pagination]="true"
    [columnDefs]="columnDefs"
    [defaultColDef]="defaultColDef"
    [rowData]="rowData"
    [rowClassRules]="rowClassRules"
    [rowSelection]="'multiple'"
    [paginationPageSize]="paginationPageSize"
    [paginationPageSizeSelector]="paginationPageSizeSelector"
    [animateRows]="true"
    (gridReady)="onGridReady($event)"
    (cellClicked)="onCellClicked($event)"
  ></ag-grid-angular>
</div>



================================================
FILE: src/app/components/dashboard-admin/servicios/servicios.component.scss
================================================
.row {
  padding-right: 0px;
}

.csv-button {
  color: white;
  background-color: #25D366;
}


================================================
FILE: src/app/components/dashboard-admin/servicios/servicios.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ServiciosComponent } from './servicios.component';

describe('ServiciosComponent', () => {
  let component: ServiciosComponent;
  let fixture: ComponentFixture<ServiciosComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ServiciosComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ServiciosComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/servicios/servicios.component.ts
================================================
import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import {
  MomentDateAdapter,
  MAT_MOMENT_DATE_ADAPTER_OPTIONS,
} from '@angular/material-moment-adapter';
import {
  DateAdapter,
  MAT_DATE_FORMATS,
  MAT_DATE_LOCALE,
} from '@angular/material/core';
import { MatDatepicker } from '@angular/material/datepicker';
import { interval, Subscription } from 'rxjs';
import * as _moment from 'moment';
// tslint:disable-next-line:no-duplicate-imports
import { Moment } from 'moment';
import 'moment/locale/es';
import Swal from 'sweetalert2';
import { UntypedFormControl } from '@angular/forms';
import { ServicioDialogComponent } from './servicio-dialog/servicio-dialog.component';
import * as moment from 'moment';
import { MainService } from 'src/app/services/main.service';
import { ToolService } from 'src/app/interfaces/toolservice';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Res } from 'src/app/interfaces/response';
import { AgGridAngular } from 'ag-grid-angular';
import {
  CellClickedEvent,
  ColDef,
  GridReadyEvent,
  RowClassRules,
  SizeColumnsToContentStrategy,
  SizeColumnsToFitGridStrategy,
  SizeColumnsToFitProvidedWidthStrategy,
} from 'ag-grid-community';
import { ButtonRendererComponent } from '../ag-grid/button-renderer/button-renderer.component';
import { Router } from '@angular/router';
export const MY_FORMATS = {
  parse: {
    dateInput: 'MM/YYYY',
  },
  display: {
    dateInput: 'MM/YYYY',
    monthYearLabel: 'MMMM YYYY',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'MMMM YYYY',
  },
};
@Component({
  selector: 'app-servicios',
  templateUrl: './servicios.component.html',
  styleUrls: ['./servicios.component.scss'],
  providers: [
    { provide: MAT_DATE_LOCALE, useValue: 'es-ES' },
    {
      provide: DateAdapter,
      useClass: MomentDateAdapter,
      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],
    },

    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },
  ],
})
export class ServiciosComponent implements OnDestroy {
  private route = '/service';
  eventSource!: EventSource;
  date = new UntypedFormControl(moment());
  private eventSubscription!: Subscription;
  private intervalId: any;

  public columnDefs: ColDef[] = [
    {
      headerName: 'No.',
      field: 'id',
      cellStyle: { textAlign: 'center' },
      width: 100,
    },
    {
      headerName: 'F. de Ingreso',
      field: 'fecha_ingreso',
      filter: 'agDateColumnFilter',
      cellStyle: { textAlign: 'center' },
      valueFormatter: this.datetimeFormatter,
      width: 140,
    },
    {
      headerName: 'Cliente',
      field: 'nombre_cliente',
      cellStyle: { textAlign: 'center' },
      width: 220,
    },
    {
      headerName: 'Telefono',
      field: 'telefono_cliente',
      hide: true,
    },
    {
      headerName: 'Producto',
      field: 'producto',
      cellStyle: { textAlign: 'center' },
    },
    {
      headerName: 'Marca',
      field: 'marca',
      cellStyle: { textAlign: 'center' },
      width: 100,
    },
    {
      headerName: 'Encargado',
      field: 'encargado',
      cellStyle: { textAlign: 'center' },
    },
    {
      headerName: 'Falla',
      field: 'falla_detectada',
      hide: true,
    },
    {
      headerName: 'CotizaciÃ³n',
      field: 'cotizacion',
      cellStyle: { textAlign: 'center', fontSize: '14px' },
      width: 90,
    },
    {
      headerName: 'Importe',
      field: 'importe',
      hide: true,
    },
    {
      headerName: 'F. de Terminado',
      field: 'fecha_terminado',
      cellStyle: { textAlign: 'center' },
      filter: 'agDateColumnFilter',
      valueFormatter: this.dateFormatter,
      width: 140,
    },
    {
      headerName: 'F. de Entrega',
      field: 'fecha_entrega',
      filter: 'agDateColumnFilter',
      cellStyle: { textAlign: 'center' },
      valueFormatter: this.dateFormatter,
      width: 140,
    },

    {
      headerName: 'Estado',
      field: 'estatus',
      cellStyle: { textAlign: 'center' },
      width: 140,

    },
    {
      headerName: 'GarantÃ­a',
      field: 'garantia',
      hide: true,
    },
    {
      headerName: 'Observaciones',
      field: 'observaciones',
      hide: true,
    },
    {
      headerName: '',
      field: 'delete',
      cellRenderer: ButtonRendererComponent,
      cellRendererParams: {
        icon: 'delete',
        color: 'warn',
        tooltip: 'Eliminar Registro',
      },
      cellStyle: { textAlign: 'center' },

      filter: false,
      width: 80,
      flex: 1,
    },
    {
      headerName: '',
      field: 'receipt',
      cellRenderer: ButtonRendererComponent,
      cellRendererParams: {
        icon: 'receipt_log',
        color: '',
        tooltip: 'Generar Recibo',
      },
      cellStyle: { textAlign: 'center' },

      filter: false,
      width: 80,
      flex: 1,
    },
  ];
  public rowClassRules: RowClassRules = {
    yellow: 'data.avisado == 1',
    green: 'data.avisado == 2',
  };

  public defaultColDef: ColDef = {
    sortable: true,
    filter: true,
  };
  public autoSizeStrategy:
    | SizeColumnsToFitGridStrategy
    | SizeColumnsToFitProvidedWidthStrategy
    | SizeColumnsToContentStrategy = {
    type: 'fitCellContents',
    skipHeader: true,
  };
  public rowData: ToolService[] = [];
  public paginationPageSizeSelector = [20, 50, 100];
  public paginationPageSize = 20;
  @ViewChild(AgGridAngular) agGrid!: AgGridAngular;

  constructor(
    private snackbar: MatSnackBar,
    private mainService: MainService,
    public dialog: MatDialog,
    private router: Router
  ) {}
  ngOnInit(): void {
    this.intervalId = setInterval(() => {
      this.getServicios();
    }, 180000);

    this.eventSubscription = this.mainService
      .getServerEvent(`${this.route}/sse`)
      .subscribe(() => {
        this.getServicios();
      });
  }

  dateFormatter(params: any) {
    console.log(params.value)
    if (params.value) {
      return moment(params.value).format('DD/MM/YYYY');
    } else {
      return '';
    }
  }

  datetimeFormatter(params: any) {
    console.log(params.value)
    if (params.value) {
      return moment(params.value).format('DD/MM/YYYY HH:mm:ss');
    } else {
      return '';
    }
  }
  getServicios() {
    this.mainService
      .getRequest(
        { month: this.date.value.month() + 1, year: this.date.value.year() },
        `${this.route}/by_month`
      )
      .subscribe((res: Res) => {
        if (res.error) {
          this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
            duration: 4000,
            horizontalPosition: 'center',
            verticalPosition: 'top',
          });
        } else {
          this.rowData = res.data;
        }
      });
  }
  onGridReady(params: GridReadyEvent) {
    this.getServicios();
  }
  onCellClicked(e: CellClickedEvent): void {
    const id = e.column.getColId();
    if (id == 'delete') {
      this.deleteServicio(e.data);
    } else if(id=='receipt') {
      this.printReceipt(e.data);
    } else {
      this.updateServicio(e.data);

    }
  }

  setMonthAndYear(
    normalizedMonthAndYear: Moment,
    datepicker: MatDatepicker<Moment>
  ) {
    const ctrlValue = this.date.value;
    ctrlValue.month(normalizedMonthAndYear.month());
    ctrlValue.year(normalizedMonthAndYear.year());
    this.date.setValue(ctrlValue);
    this.getServicios();
    datepicker.close();
  }
  deleteServicio(service: ToolService) {
    Swal.fire({
      title:
        'Â¿Seguro que quiere eliminar el servicio del cliente ' +
        service.nombre_cliente +
        '?',
      text: 'Esta operaciÃ³n no se puede revertir.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Eliminar',
      cancelButtonText: 'Cancelar',
    }).then((result) => {
      if (result.value) {
        this.mainService
          .deleteRequest({}, `${this.route}/${service.id}`)
          .subscribe((data) => {
            Swal.fire(
              'Eliminado',
              'El servicio de ' +
                service.nombre_cliente +
                ' ha sido eliminado del registro.',
              'success'
            );
          });
      } else if (result.dismiss === Swal.DismissReason.cancel) {
        Swal.fire(
          'Haz cancelado la operaciÃ³n.',
          'NingÃºn registro eliminado',
          'error'
        );
      }
    });
  }
  createServicio() {
    const dialogRef = this.dialog.open(ServicioDialogComponent, {
      width: '50%',
      data: null,
    });
    dialogRef.afterClosed().subscribe((result: ToolService) => {
      if (result) {
        this.getServicios();

        Swal.fire({
          position: 'center',
          icon: 'success',
          title: 'Se ha registrado el servicio correctamente.',
          showConfirmButton: false,
          timer: 1500,
        });
      }
    });
  }
  updateServicio(data: ToolService) {
    const dialogRef = this.dialog.open(ServicioDialogComponent, {
      width: '50%',
      data: data,
    });
    dialogRef.afterClosed().subscribe((result: ToolService) => {
      if (result) {
        this.getServicios();

        Swal.fire({
          position: 'center',
          icon: 'success',
          title: 'Se ha actualizado el registro correctamente.',
          showConfirmButton: false,
          timer: 1500,
        });
      }
    });
  }
  getCSV() {
    this.agGrid.api.exportDataAsCsv({ allColumns: true, columnSeparator: ';' });
  }
  printReceipt(data: ToolService) {
    const url =  this.router.createUrlTree(['/taller/factura', data.id]).toString();
    window.open(url, '_blank');
  }
  ngOnDestroy(): void {
    //Called once, before the instance is destroyed.
    if (this.intervalId) {
      clearInterval(this.intervalId);
    }
    this.mainService.disconnectEventSource();
    this.eventSubscription.unsubscribe();
  }
}



================================================
FILE: src/app/components/dashboard-admin/servicios/servicio-dialog/servicio-dialog.component.html
================================================
<div class="col text-center">
  <h1 mat-dialog-title>
    {{ title }} Servicio {{ isUpdateMode() ? data.id : "" }}
  </h1>
</div>

<div *ngIf="isUpdateMode()" class="col d-flex justify-content-evenly mb-3">
  <button
    mat-raised-button
    *ngIf="
      this.data.estatus === 'PENDIENTE' || this.data.estatus === 'POR AUTORIZAR'
    "
    color="primary"
    [disabled]="form.invalid"
    (click)="marcarTerminado()"
  >
    <mat-icon>done</mat-icon> Terminar
  </button>
  <button
    mat-raised-button
    *ngIf="this.data.estatus === 'TERMINADO'"
    color="primary"
    [disabled]="form.invalid"
    (click)="marcarEntregado()"
  >
    <mat-icon>done_all</mat-icon> Entregar
  </button>
  <button
    (click)="avisar()"
    *ngIf="this.data.estatus === 'TERMINADO'"
    mat-raised-button
    class="whatsapp-button"
  >
    <mat-icon>send_to_mobile</mat-icon> Avisar a Cliente
  </button>
  <button
    (click)="autorizar()"
    *ngIf="this.data.estatus === 'POR AUTORIZAR'"
    mat-raised-button
    class="whatsapp-button"
  >
    <mat-icon>send_to_mobile</mat-icon> Autorizar
  </button>
</div>

<form [formGroup]="form" *ngIf="!isLoading">
  <div mat-dialog-content class="text-center">
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Cliente</mat-label>
        <mat-select [formControl]="clientesControl" #singleSelectClientes>
          <mat-option>
            <ngx-mat-select-search
              placeholderLabel="Buscar cliente..."
              noEntriesFoundLabel="No se encontraron clientes"
              [formControl]="clientesFiltro"
            ></ngx-mat-select-search>
          </mat-option>
          <mat-option
            *ngFor="let cliente of clientesFiltrados | async"
            [value]="cliente"
          >
            {{ cliente.nombre }} {{ cliente.apellido }} - {{ cliente.telefono }}
          </mat-option>
        </mat-select>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Encargado</mat-label>
        <mat-select [formControl]="usuariosControl" #singleSelectUsuarios>
          <mat-option>
            <ngx-mat-select-search
              placeholderLabel="Buscar usuario..."
              noEntriesFoundLabel="No se encontraron usuarios"
              [formControl]="usuariosFiltro"
            ></ngx-mat-select-search>
          </mat-option>
          <mat-option
            *ngFor="let usuario of usuariosFiltrados | async"
            [value]="usuario"
          >
            {{ usuario.nombre }} {{ usuario.apellido }} - {{ usuario.curp }}
          </mat-option>
        </mat-select>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field>
        <mat-label>Falla Detectada</mat-label>
        <textarea
          oninput="this.value = this.value.toUpperCase()"
          matInput
          formControlName="falla_detectada"
        ></textarea>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Producto</mat-label>

        <input
          formControlName="producto"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-error *ngIf="form.controls['producto'].hasError('required')">
          El producto es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>build</mat-icon>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Tipo</mat-label>
        <mat-select formControlName="tipo" name="tipo">
          <mat-option [value]="option.value" *ngFor="let option of tipos">{{
            option.value
          }}</mat-option>
        </mat-select>
      </mat-form-field>
    </div>

    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Marca</mat-label>
        <mat-select formControlName="id_marca" name="marca">
          <mat-option [value]="option.id" *ngFor="let option of marcas">{{
            option.value
          }}</mat-option>
        </mat-select>
      </mat-form-field>

      <mat-form-field class="w-50">
        <mat-label>Modelo</mat-label>

        <input
          formControlName="modelo"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-error *ngIf="form.controls['modelo'].hasError('required')">
          El modelo es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>local_activity</mat-icon>
      </mat-form-field>
    </div>

    <div class="row d-flex">
      <mat-form-field class="w-50">
        <mat-label># de Serie</mat-label>

        <input
          formControlName="serie"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-error *ngIf="form.controls['serie'].hasError('required')">
          El nÃºmero de serie es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>pin</mat-icon>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>GarantÃ­a</mat-label>
        <mat-select formControlName="garantia" name="garantia">
          <mat-option value="1">SI</mat-option>
          <mat-option value="0">NO</mat-option>
        </mat-select>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>CotizaciÃ³n</mat-label>

        <input formControlName="cotizacion" matInput type="text" />

        <mat-icon matSuffix>tag</mat-icon>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Fecha de Ingreso</mat-label>
        <input
          matInput
          [matDatepicker]="pickerIngreso"
          formControlName="fecha_ingreso"
        />
        <mat-datepicker-toggle
          matSuffix
          [for]="pickerIngreso"
        ></mat-datepicker-toggle>
        <mat-datepicker #pickerIngreso></mat-datepicker>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Importe</mat-label>

        <input formControlName="importe" matInput type="number" />

        <mat-icon matSuffix>attach_money</mat-icon>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Fecha Terminado</mat-label>
        <input
          matInput
          [min]="minDateTerminado"
          [matDatepicker]="pickerTerminado"
          formControlName="fecha_terminado"
          (dateChange)="onDateChange($event, 'fecha_terminado')"

        />
        <mat-datepicker-toggle
          matSuffix
          [for]="pickerTerminado"
        ></mat-datepicker-toggle>
        <mat-datepicker #pickerTerminado></mat-datepicker>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Estatus</mat-label>
        <mat-select formControlName="estatus" name="estatus">
          <mat-option [value]="option.value" *ngFor="let option of estatus">{{
            option.value
          }}</mat-option>
        </mat-select>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Fecha de Entrega</mat-label>
        <input
          matInput
          [min]="minDateEntregado"
          [matDatepicker]="pickerEntrega"
          formControlName="fecha_entrega"
          (dateChange)="onDateChange($event, 'fecha_entrega')"
        />
        <mat-datepicker-toggle
          matSuffix
          [for]="pickerEntrega"
        ></mat-datepicker-toggle>
        <mat-datepicker #pickerEntrega></mat-datepicker>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field>
        <mat-label>Observaciones</mat-label>
        <textarea
          oninput="this.value = this.value.toUpperCase()"
          matInput
          formControlName="observaciones"
        ></textarea>
      </mat-form-field>
    </div>
  </div>
  <div mat-dialog-actions align="center" class="row">
    <div class="col">
      <p *ngIf="isUpdateMode()">Ultima modificacion: {{ data.modificador }}</p>
    </div>
    <div class="col text-end">
      <button
        mat-button
        *ngIf="isCreateMode()"
        [disabled]="form.invalid"
        (click)="onAdd()"
      >
        Agregar
      </button>
      <button
        mat-button
        *ngIf="isUpdateMode()"
        [disabled]="form.invalid"
        (click)="onAdd()"
      >
        Actualizar
      </button>
      <button mat-button (click)="onNoClick()">Cancelar</button>
    </div>
  </div>
</form>



================================================
FILE: src/app/components/dashboard-admin/servicios/servicio-dialog/servicio-dialog.component.scss
================================================
/* Chrome, Safari, Edge, Opera */

input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}


/* Firefox */

input[type=number] {
    -moz-appearance: textfield;
}

.whatsapp-button {
    color: white;
    background-color: #25D366;
}



================================================
FILE: src/app/components/dashboard-admin/servicios/servicio-dialog/servicio-dialog.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ServicioDialogComponent } from './servicio-dialog.component';

describe('ServicioDialogComponent', () => {
  let component: ServicioDialogComponent;
  let fixture: ComponentFixture<ServicioDialogComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ServicioDialogComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ServicioDialogComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/servicios/servicio-dialog/servicio-dialog.component.ts
================================================
import { MarcasRes } from './../../../../interfaces/marcas';
import { AfterViewInit, Component, Inject, OnInit, ViewChild } from '@angular/core';
import { ajax } from 'rxjs/ajax';

import {
  FormBuilder,
  FormControl,
  FormGroup,
  Validators,
} from '@angular/forms';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatSelect } from '@angular/material/select';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import {
  MomentDateAdapter,
  MAT_MOMENT_DATE_ADAPTER_OPTIONS,
} from '@angular/material-moment-adapter';
import {
  DateAdapter,
  MAT_DATE_FORMATS,
  MAT_DATE_LOCALE,
} from '@angular/material/core';
import * as _moment from 'moment';
import 'moment/locale/es';
import { ClientesRes } from '../../../../interfaces/clientes';
import { ReplaySubject, Subject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { MainService } from 'src/app/services/main.service';
import { User, Convert } from 'src/app/interfaces/user';
import { ToolService } from 'src/app/interfaces/toolservice';
import { Res } from 'src/app/interfaces/response';
import * as moment from 'moment';

export const MY_FORMATS = {
  parse: {
    dateInput: 'DD/MM/YYYY',
  },
  display: {
    dateInput: 'DD/MM/YYYY',
    monthYearLabel: 'DD MMMM YYYY',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'DD MMMM YYYY',
  },
};
@Component({
  selector: 'app-servicio-dialog',
  templateUrl: './servicio-dialog.component.html',
  styleUrls: ['./servicio-dialog.component.scss'],
  providers: [
    { provide: MAT_DATE_LOCALE, useValue: 'es-ES' },
    {
      provide: DateAdapter,
      useClass: MomentDateAdapter,
      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],
    },

    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },
  ],
})
export class ServicioDialogComponent implements OnInit, AfterViewInit {
  private route = '/service';
  form!: FormGroup;
  mode!: Number;
  title!: String;
  usuarios!: User[];
  clientes!: ClientesRes[];
  marcas!: MarcasRes[];
  minDateTerminado!: Date;
  minDateEntregado!: Date;
  user!: User;
  estatus = [
    {
      value: 'POR AUTORIZAR',
    },
    {
      value: 'PENDIENTE',
    },
    {
      value: 'TERMINADO',
    },
    {
      value: 'NO AUTORIZADO',
    },
    {
      value: 'ENTREGADO',
    },
  ];
  tipos = [
    {
      value: 'GAS LP',
    },
    {
      value: 'BOMBEO',
    },
    {
      value: 'GASOLINA',
    },
    {
      value: 'HERRAMIENTA ELECTRICA',
    },
    {
      value: 'CLIMA',
    },
    {
      value: 'OTRO',
    },
  ];

  public usuariosFiltro: FormControl = new FormControl();
  public usuariosControl: FormControl = new FormControl();
  public usuariosFiltrados: ReplaySubject<User[]> = new ReplaySubject<User[]>(
    1
  );
  public isLoading: boolean = true;
  public clientesFiltro: FormControl = new FormControl();
  public clientesControl: FormControl = new FormControl();
  public clientesFiltrados: ReplaySubject<ClientesRes[]> = new ReplaySubject<
    ClientesRes[]
  >(1);
  protected _onDestroy = new Subject<void>();

  @ViewChild('singleSelectUsuarios') singleSelectUsuarios!: MatSelect;
  @ViewChild('singleSelectClientes') singleSelectClientes!: MatSelect;

  constructor(
    private fb: FormBuilder,
    public dialogRef: MatDialogRef<ServicioDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: ToolService,
    private mainService: MainService,
    private snackbar: MatSnackBar,
  ) {
    this.user = Convert.toUser(sessionStorage.getItem('user_taller') ?? '');

    if (this.data) {
      this.mode = 1;
      this.title = 'Actualizar';
      this.form = this.fb.group({
        id: [this.data.id, Validators.required],
        id_cliente: [this.data.id_cliente, Validators.required],
        id_usuario: [this.data.id_usuario, Validators.required],
        fecha_ingreso: [{ value: this.data.fecha_ingreso, disabled: true }],
        producto: [this.data.producto, Validators.required],
        id_marca: [this.data.id_marca, Validators.required],
        modelo: [this.data.modelo, Validators.required],
        tipo: [this.data.tipo, Validators.required],
        serie: [this.data.serie, Validators.required],
        falla_detectada: [this.data.falla_detectada, Validators.required],
        cotizacion: [this.data.cotizacion],
        garantia: [this.data.garantia.toString(), Validators.required],
        fecha_terminado: [this.data.fecha_terminado],
        fecha_entrega: [this.data.fecha_entrega],
        importe: [this.data.importe],
        estatus: [this.data.estatus, Validators.required],
        observaciones: [this.data.observaciones],
        avisado: [this.data.avisado],
        impreso: [this.data.impreso],
        id_modificado: [this.user.id],
      });
    } else {
      this.mode = 0;
      this.title = 'Nuevo';
      this.form = this.fb.group({
        id_cliente: ['', Validators.required],
        id_usuario: ['', Validators.required],
        fecha_ingreso: [{ value: moment().format('YYYY-MM-DD HH:mm:ss'), disabled: true }],
        producto: ['', Validators.required],
        id_marca: ['', Validators.required],
        modelo: ['', Validators.required],
        tipo: ['', Validators.required],
        serie: ['', Validators.required],
        falla_detectada: ['', Validators.required],
        garantia: ['', Validators.required],
        cotizacion: [null],
        fecha_terminado: [null],
        fecha_entrega: [null],
        importe: [null],
        estatus: [this.estatus[0].value, Validators.required],
        observaciones: [' '],
        id_modificado: [this.user.id],
      });
    }
  }
  ngOnInit(): void {
    this.getMenus();
    this.usuariosControl.valueChanges.subscribe((data) => {
      this.form.controls['id_usuario'].setValue(data.id);
    });
    this.clientesControl.valueChanges.subscribe((data) => {
      this.form.controls['id_cliente'].setValue(data.id);
    });
    this.usuariosFiltro.valueChanges
      .pipe(takeUntil(this._onDestroy))
      .subscribe(() => {
        this.filtrarUsuarios();
      });
    this.clientesFiltro.valueChanges
      .pipe(takeUntil(this._onDestroy))
      .subscribe(() => {
        this.filtrarClientes();
      });
    this.minDateTerminado = this.form.controls['fecha_ingreso'].value;
    this.form.controls['fecha_ingreso'].valueChanges.subscribe((data) => {
      this.minDateTerminado = data;
    });
    this.minDateEntregado = this.form.controls['fecha_terminado'].value;

    this.form.controls['fecha_terminado'].valueChanges.subscribe((data) => {
      this.minDateEntregado = data;
    });
  }
  onNoClick(): void {
    this.dialogRef.close();
  }
  ngOnDestroy() {
    this._onDestroy.next();
    this._onDestroy.complete();
  }
  ngAfterViewInit(): void {
    if (this.singleSelectClientes) {
      this.setInitialValueClientes();
    }
    if (this.singleSelectUsuarios) {
      this.setInitialValueUsuarios();

    }
    
  }
  onAdd(): void {
    const servicio = this.form.getRawValue();
    if (this.isCreateMode()) {
      this.mainService
        .postRequest(servicio, this.route)
        .subscribe((res: Res) => {
          if (res.error) {
            this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
              duration: 4000,
              horizontalPosition: 'center',
              verticalPosition: 'top',
            });
          } else {
            this.dialogRef.close(servicio);
          }
        });
    } else {
      this.mainService
        .putRequest(servicio, this.route)
        .subscribe((res: Res) => {
          if (res.error) {
            this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
              duration: 4000,
              horizontalPosition: 'center',
              verticalPosition: 'top',
            });
          } else {
            this.dialogRef.close(servicio);
          }
        });
    }
  }
  getMenus() {
    this.mainService.getRequest({}, `/brand`).subscribe((res: Res) => {
      this.marcas = res.data;
    });
    if (this.isUpdateMode()) {
      this.mainService
        .getRequest({}, `/client/get_active_clients`)
        .subscribe((res: Res) => {
          this.clientes = res.data;
          this.isLoading = false;

          this.clientesFiltrados.next(this.clientes.slice());
          let filtro = res.data.filter(
            (cliente: ClientesRes) => cliente.id == this.data.id_cliente
          );
          this.clientesControl.setValue(filtro[0]);
        });
      this.mainService
        .getRequest({}, `/user/get_active_users`)
        .subscribe((res: Res) => {
          this.usuarios = res.data;
          this.usuariosFiltrados.next(this.usuarios.slice());
          let filtro = res.data.filter(
            (usuario: User) => usuario.id == this.data.id_usuario
          );
          this.usuariosControl.setValue(filtro[0]);
        });
    } else {
      this.mainService
        .getRequest({}, `/client/get_active_clients`)
        .subscribe((res: Res) => {
          this.clientes = res.data;
          this.isLoading = false;

          this.clientesFiltrados.next(this.clientes.slice());
        });
      this.mainService
        .getRequest({}, `/user/get_active_users`)
        .subscribe((res: Res) => {
          this.usuarios = res.data;

          this.usuariosFiltrados.next(this.usuarios.slice());
        });
    }
  }
  protected setInitialValueUsuarios() {
    this.usuariosFiltrados
      .pipe(take(1), takeUntil(this._onDestroy))
      .subscribe(() => {
        this.singleSelectUsuarios.compareWith = (a: User, b: User) =>
          a && b && a.id === b.id;
      });
  }
  protected setInitialValueClientes() {
    this.clientesFiltrados
      .pipe(take(1), takeUntil(this._onDestroy))
      .subscribe(() => {
        this.singleSelectClientes.compareWith = (
          a: ClientesRes,
          b: ClientesRes
        ) => a && b && a.id === b.id;
      });
  }
  onDateChange(event: any, controlName: string) {
    const selectedDate = event.value;
    
    if (selectedDate) {
      // Formatear la fecha seleccionada al formato "YYYY-MM-DD"
      const formattedDate = selectedDate.format('YYYY-MM-DD');
      
      // Actualizar el valor del FormControl con la fecha formateada
      this.form.controls[controlName].setValue(formattedDate);
    }
  }
  protected filtrarUsuarios() {
    if (!this.usuarios) {
      return;
    }
    // get the search keyword
    let search = this.usuariosFiltro.value;
    if (!search) {
      this.usuariosFiltrados.next(this.usuarios.slice());
      return;
    } else {
      search = search.toLowerCase();
    }
    this.usuariosFiltrados.next(
      this.usuarios.filter((usuario) => {
        let filtrado =
          usuario.nombre + ' ' + usuario.apellido + ' ' + usuario.curp;
        return filtrado.toLowerCase().indexOf(search) > -1;
      })
    );
  }
  protected filtrarClientes() {
    if (!this.clientes) {
      return;
    }
    // get the search keyword
    let search = this.clientesFiltro.value;
    if (!search) {
      this.clientesFiltrados.next(this.clientes.slice());
      return;
    } else {
      search = search.toLowerCase();
    }
    this.clientesFiltrados.next(
      this.clientes.filter((cliente) => {
        let filtrado =
          cliente.nombre + ' ' + cliente.apellido + ' ' + cliente.telefono;
        return filtrado.toLowerCase().indexOf(search) > -1;
      })
    );
  }
  isCreateMode() {
    return this.mode === 0;
  }

  isUpdateMode() {
    return this.mode === 1;
  }
  efectividadDias(start: Date, end: Date) {
    var eventStartTime = new Date(start);
    var eventEndTime = new Date(end);
    var duration = eventEndTime.getDate() - eventStartTime.getDate();
    return duration;
  }
  avisar() {
    let telefono = this.clientesControl.value.telefono;
    this.form.controls['avisado'].setValue('2');
    let mensaje =
      'Buen dÃ­a, estimado cliente. Centro de Servicio Don Pedro le informa que su ' +
        this.data.producto +
        ' esta listo para la entrega. Favor presentarse con su talÃ³n de entrega de equipo. NÃºmero de Folio: ' +
        this.data.id +
        ' Importe Total: $' +
        this.form.value.importe +
        '. ' +
        this.form.value.observaciones;
    window.open(
      'https://web.whatsapp.com/send?phone=521' + telefono + '&text=' + mensaje,
      '_blank'
    );
  }

  autorizar() {
    let telefono = this.clientesControl.value.telefono;
    this.form.controls['avisado'].setValue('1');
    let mensaje =
      '--- *ESTE ES UN MENSAJE DE AUTORIZACIÃ“N* --- \nBuen dÃ­a, estimado cliente. Centro de Servicio Don Pedro le informa que la *revisiÃ³n de su ' +
        this.data.producto +
        ' fue realizada. El cobro total definido es de $' +
        this.form.value.importe +
        '.* NÃºmero de Folio: ' +
        this.data.id +
        ' Â¿Desea autorizar el servicio?' +
        ' ' +
        this.form.value.observaciones;
    window.open(
      'https://web.whatsapp.com/send?phone=521' + telefono + '&text=' + mensaje,
      '_blank'
    );
  }
  marcarTerminado() {
    let telefono = this.clientesControl.value.telefono;
    let mensaje = '--- *SERVICIO TERMINADO* --- \nBuen dÃ­a, estimado cliente. Centro de Servicio Don Pedro le informa que su ' +
    this.data.producto +
    ' esta *listo para la entrega.* Favor presentarse con su talÃ³n de entrega de equipo. NÃºmero de Folio: ' +
    this.data.id +
    ' Importe Total: $' +
    this.form.value.importe +
    '. ' +
    this.form.value.observaciones;
    const now = moment();
    
    this.form.controls['fecha_terminado'].setValue(now.format('YYYY-MM-DD'));
    this.form.controls['estatus'].setValue('TERMINADO');

    // ajax.post("http://192.168.50.200:3001/lead", {
    //   message : 
    //   mensaje,
    //   phone : "521" + telefono 
    // }, { 'Content-Type': 'application/json' })
    //   .subscribe({
    //     next: (res:any)=>{
    //       console.log(res.response.responseExSave.id)
    //       if(res.response.responseExSave.id != undefined){
    //         this.form.controls['avisado'].setValue(2);
    //         this.onAdd();
            
    //       } else {
    //         this.onAdd();
    //         this.snackbar.open(`No se enviÃ³ el mensaje`, 'Aceptar', {
    //           duration: 4000,
    //           horizontalPosition: 'center',
    //           verticalPosition: 'top',
    //         });

    //       }
    //     }
    //   });
  }
  marcarEntregado() {
    const now = moment();
    this.form.controls['estatus'].setValue('ENTREGADO');
    this.form.controls['fecha_entrega'].setValue(now.format('YYYY-MM-DD'));
    this.onAdd();
  }
}



================================================
FILE: src/app/components/dashboard-admin/usuarios/usuarios.component.html
================================================
<div class="container-fluid">
  <div class="row">
    <div class="col text-center">
      <h2 class="mt-3">Usuarios</h2>
    </div>
  </div>
  <div class="row">
    <div class="col">
      <mat-form-field [hidden]="!(this.dataSource.data!.length > 0)">
        <mat-label>Buscar</mat-label>
        <input matInput (keyup)="applyFilter($event)" #input />
      </mat-form-field>
    </div>
    <div class="col text-end">
      <button
        mat-raised-button
        class="mt-3"
        color="primary"
        (click)="createUsuario()"
      >
        <mat-icon>add</mat-icon> Agregar Usuario
      </button>
    </div>
  </div>
  <div class="w-100" [hidden]="!(this.dataSource.data!.length > 0)">
    <table
      mat-table
      [dataSource]="dataSource"
      class="w-100 text-center"
      matSort
      matSortActive="id"
      matSortDirection="desc"
      matSortDisableClear
    >
      <!--- Note that these columns can be defined in any order.
        The actual rendered columns are set as a property on the row definition" -->

      <!-- ID Column -->
      <ng-container matColumnDef="id">
        <th
          mat-header-cell
          *matHeaderCellDef
          mat-sort-header
        >
          No.
        </th>
        <td mat-cell *matCellDef="let element" >
          {{ element.id }}
        </td>
      </ng-container>

      <!-- Nombre Column -->
      <ng-container matColumnDef="nombre">
        <th mat-header-cell *matHeaderCellDef class="text-center">Nombre</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.nombre }}
        </td>
      </ng-container>

      <!-- Apellido Column -->
      <ng-container matColumnDef="apellido">
        <th mat-header-cell *matHeaderCellDef class="text-center">Apellido</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.apellido }}
        </td>
      </ng-container>

      <!-- Telefono Column -->
      <ng-container matColumnDef="tipo">
        <th mat-header-cell *matHeaderCellDef class="text-center">Tipo</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.tipo == "1" ? "Administrador" : "TÃ©cnico" }}
        </td>
      </ng-container>

      <!-- CURP Column -->
      <ng-container matColumnDef="curp">
        <th mat-header-cell *matHeaderCellDef class="text-center">
          Nombre de Usuario
        </th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.curp }}
        </td>
      </ng-container>
      <!-- Acciones Column -->
      <ng-container matColumnDef="acciones">
        <th mat-header-cell *matHeaderCellDef class="text-center">Acciones</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          <button
            mat-icon-button
            (click)="updateUsuario(element)"
            color="secondary"
            matTooltip="Editar Usuario"
          >
            <mat-icon>edit</mat-icon>
          </button>

          <button
            mat-icon-button
            (click)="deleteUsuario(element.id, element.nombre)"
            color="warn"
            matTooltip="Eliminar Usuario"
          >
            <mat-icon>delete</mat-icon>
          </button>
        </td>
      </ng-container>

      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns"></tr>
    </table>
    <mat-paginator
      [pageSizeOptions]="[10, 25, 50, 100]"
      aria-label="Select page of users"
    ></mat-paginator>
  </div>
</div>



================================================
FILE: src/app/components/dashboard-admin/usuarios/usuarios.component.scss
================================================
table, mat-paginator {
  background-color: transparent;
}



================================================
FILE: src/app/components/dashboard-admin/usuarios/usuarios.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UsuariosComponent } from './usuarios.component';

describe('UsuariosComponent', () => {
  let component: UsuariosComponent;
  let fixture: ComponentFixture<UsuariosComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ UsuariosComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(UsuariosComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/usuarios/usuarios.component.ts
================================================
import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTable, MatTableDataSource } from '@angular/material/table';
import { MainService } from 'src/app/services/main.service';
import Swal from 'sweetalert2';
import { User } from '../../../interfaces/user';
import { UsuarioDialogComponent } from './usuario-dialog/usuario-dialog.component';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Res } from 'src/app/interfaces/response';

@Component({
  selector: 'app-usuarios',
  templateUrl: './usuarios.component.html',
  styleUrls: ['./usuarios.component.scss'],
})
export class UsuariosComponent implements OnInit {
  private route = '/user';
  usuarios!: User[];
  displayedColumns: string[] = [
    'id',
    'nombre',
    'apellido',
    'tipo',
    'curp',
    'acciones',
  ];
  dataSource = new MatTableDataSource<User>();
  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;

  constructor(
    private snackbar: MatSnackBar,
    private mainService: MainService,
    public dialog: MatDialog
  ) {}

  ngAfterViewInit(): void {
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
  }
  ngOnInit(): void {
    this.getUsuarios();
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }

  getUsuarios() {
    this.mainService
      .getRequest({}, `${this.route}/get_active_users`)
      .subscribe((res: Res) => {
        if (res.error) {
          this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
            duration: 4000,
            horizontalPosition: 'center',
            verticalPosition: 'top',
          });
        } else {
          this.dataSource.data = res.data;
        }
      });
  }
  deleteUsuario(id: String, nombre: String) {
    Swal.fire({
      title:
        'Â¿Seguro que quiere eliminar a ' +
        nombre +
        ' del registro de usuarios?',
      text: 'Esta operaciÃ³n no se puede revertir.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Eliminar',
      cancelButtonText: 'Cancelar',
    }).then((result) => {
      if (result.value) {
        this.mainService
          .deleteRequest({}, `${this.route}/${id}`)
          .subscribe((data) => {
            this.getUsuarios();
            Swal.fire(
              'Eliminado',
              nombre + ' ha sido eliminado del registro de usuarios.',
              'success'
            );
          });
      } else if (result.dismiss === Swal.DismissReason.cancel) {
        Swal.fire(
          'Haz cancelado la operaciÃ³n.',
          'NingÃºn registro eliminado',
          'error'
        );
      }
    });
  }

  createUsuario() {
    const dialogRef = this.dialog.open(UsuarioDialogComponent, {
      width: '40%',
      data: null,
    });
    dialogRef.afterClosed().subscribe((result: User) => {
      if (result) {
        Swal.fire(
          'Usuario Registrado',
          'Se ha registrado el usuario ' +
            result.nombre +
            ' ' +
            result.apellido,
          'success'
        );
        this.getUsuarios();
      }
    });
  }
  updateUsuario(usuario: User) {
    const dialogRef = this.dialog.open(UsuarioDialogComponent, {
      width: '40%',
      data: usuario,
    });
    dialogRef.afterClosed().subscribe((result: User) => {
      if (result) {
        Swal.fire(
          'Usuario Actualizado',
          'Se ha actualizado el usuario ' +
            result.nombre +
            ' ' +
            result.apellido,
          'success'
        );
        this.getUsuarios();
      }
    });
  }
}



================================================
FILE: src/app/components/dashboard-admin/usuarios/usuario-dialog/usuario-dialog.component.html
================================================
<h1 mat-dialog-title class="text-center">{{ title }} Usuario</h1>

<form [formGroup]="form">
  <div mat-dialog-content class="text-center">
    <div class="row mb-2">
      <mat-form-field class="w-50">
        <mat-label>Nombre</mat-label>
        <input
          formControlName="nombre"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-error *ngIf="form.controls['nombre'].hasError('required')">
          El nombre es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>person</mat-icon>
      </mat-form-field>

      <mat-form-field class="w-50">
        <mat-label>Apellido</mat-label>

        <input
          formControlName="apellido"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-error *ngIf="form.controls['apellido'].hasError('required')">
          El apellido es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>people</mat-icon>
      </mat-form-field>
    </div>
  <div class="row mb-2">
    <mat-form-field class="w-50">
      <mat-label>Usuario</mat-label>
      <input
        formControlName="curp"
        oninput="this.value = this.value.toUpperCase()"
        matInput
        type="text"
        maxlength="10"
        minlength="10"
      />
      <mat-error *ngIf="form.controls['curp'].hasError('required')">
        El usuario es <strong> requerido </strong>
      </mat-error>
      <mat-error *ngIf="form.controls['curp'].hasError('minlength')">
        EL usuario debe tener mÃ­nimo <strong> 10 caracteres </strong>
      </mat-error>
      <mat-icon matSuffix>badge</mat-icon>
    </mat-form-field>

    <mat-form-field class="w-50">
      <mat-label>Tipo</mat-label>
      <mat-select formControlName="tipo" name="tipo" disableRipple>
        <mat-option value="0">TÃ©cnico</mat-option>
        <mat-option value="1">Administrador</mat-option>
      </mat-select>

      <mat-error *ngIf="form.controls['tipo'].hasError('required')">
        El tipo es <strong> requerido </strong>
      </mat-error>
      <mat-icon matSuffix>perm_contact_calendar</mat-icon>
    </mat-form-field>
  </div>
  <mat-form-field class="w-100">
    <mat-label>ContraseÃ±a</mat-label>

    <input formControlName="password" matInput type="password" maxlength="15"/>
    <mat-error *ngIf="form.controls['password'].hasError('required')">
      La contraseÃ±a es <strong> requerida </strong>
    </mat-error>

    <mat-icon matSuffix>password</mat-icon>
  </mat-form-field>
</div>

  <div mat-dialog-actions align="end">
    <button
      mat-button
      *ngIf="isCreateMode()"
      [disabled]="form.invalid"
      (click)="onAdd()"
    >
      Agregar
    </button>
    <button
      mat-button
      *ngIf="isUpdateMode()"
      [disabled]="form.invalid"
      (click)="onAdd()"
    >
      Actualizar
    </button>
    <button mat-button (click)="onNoClick()">Cancelar</button>
  </div>
</form>



================================================
FILE: src/app/components/dashboard-admin/usuarios/usuario-dialog/usuario-dialog.component.scss
================================================



================================================
FILE: src/app/components/dashboard-admin/usuarios/usuario-dialog/usuario-dialog.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UsuarioDialogComponent } from './usuario-dialog.component';

describe('UsuarioDialogComponent', () => {
  let component: UsuarioDialogComponent;
  let fixture: ComponentFixture<UsuarioDialogComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ UsuarioDialogComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(UsuarioDialogComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-admin/usuarios/usuario-dialog/usuario-dialog.component.ts
================================================
import { Component, Inject, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { User } from '../../../../interfaces/user';
import { MainService } from 'src/app/services/main.service';
import { Res } from 'src/app/interfaces/response';

@Component({
  selector: 'app-usuario-dialog',
  templateUrl: './usuario-dialog.component.html',
  styleUrls: ['./usuario-dialog.component.scss']
})
export class UsuarioDialogComponent{
  private route = '/user';
  form: FormGroup;
  mode: Number;
  title: String;
  constructor( private fb: FormBuilder,
    public dialogRef: MatDialogRef<UsuarioDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: User,
    private mainService: MainService,
    private snackbar: MatSnackBar,) {
      if (this.data) {
        this.mode = 1;
        this.title = 'Actualizar';
        this.form = this.fb.group({
          id: [this.data.id, Validators.required],
          nombre: [this.data.nombre, Validators.required],
          apellido: [this.data.apellido, Validators.required],
          tipo: [this.data.tipo.toString(), Validators.required],
          curp: [this.data.curp],
          password: ['', Validators.required]
        });
      } else {
        this.mode = 0;
        this.title = 'Nuevo';
        this.form = this.fb.group({
          nombre: ['', Validators.required],
          apellido: ['', Validators.required],
          tipo: ['', Validators.required],
          curp: [' '],
          password: ['', Validators.required]
        });
      }
    }
  onNoClick(): void {
    this.dialogRef.close();

  }

  onAdd(): void{
    const usuario: User = this.form.value;
    if (this.isCreateMode()) {
      this.mainService
        .postRequest(usuario, this.route)
        .subscribe((res: Res) => {
          if (res.error) {
            this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
              duration: 4000,
              horizontalPosition: 'center',
              verticalPosition: 'top',
            });
          } else {
            this.dialogRef.close(usuario);
          }
        });
    } else {
      this.mainService.putRequest(usuario, this.route).subscribe((res: Res) => {
        if (res.error) {
          this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
            duration: 4000,
            horizontalPosition: 'center',
            verticalPosition: 'top',
          });
        } else {
          this.dialogRef.close(usuario);
        }
      });
    }
  }
  isCreateMode() {
    return this.mode === 0;
  }

  isUpdateMode() {
    return this.mode === 1;
  }
}



================================================
FILE: src/app/components/dashboard-tecnico/dashboard-tecnico-routing.module.ts
================================================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { DashboardTecnicoComponent } from './dashboard-tecnico.component';
import { TecnicosComponent } from './tecnicos/tecnicos.component';
import { ClientesComponent } from './clientes/clientes.component';
import { ExpressComponent } from './express/express.component';

const routes: Routes = [
  { path: '', component: DashboardTecnicoComponent, children: [
    { path: '', component: TecnicosComponent },
    { path: 'clientes', component: ClientesComponent },
    { path: 'express', component: ExpressComponent },


  ]}
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]

})
export class DashboardTecnicoRoutingModule { }



================================================
FILE: src/app/components/dashboard-tecnico/dashboard-tecnico.component.html
================================================
<mat-toolbar class="justify-content-center"  *ngIf="sidenav.mode === 'over'">
  <button mat-icon-button *ngIf="sidenav.mode === 'over'" (click)="sidenav.toggle()">
    <mat-icon *ngIf="!sidenav.opened">
      menu
    </mat-icon>
    <mat-icon *ngIf="sidenav.opened">
      close
    </mat-icon>
  </button>
  Taller de Servicios Grupo Ferretero Don Pedro
</mat-toolbar>

<mat-sidenav-container>
  <mat-sidenav #sidenav="matSidenav" class="mat-elevation-z8 fixed">
    <img class="avatar mat-elevation-z8 mx-auto" src="assets/logo.png" />

    <h4>{{ user.nombre }} {{ user.apellido }}</h4>
    <h5>TÃ©cnico</h5>
    <mat-divider></mat-divider>
    <button [routerLink]="['/taller/dashboard-tecnico']" [routerLinkActive]="'selected'" [routerLinkActiveOptions]="{ exact: true }" mat-button class="menu-button">
      <mat-icon>build_circle</mat-icon>
      <span>Servicios</span>
    </button>

    <button [routerLink]="['/taller/dashboard-tecnico/express']" [routerLinkActive]="'selected'" [routerLinkActiveOptions]="{ exact: true }" mat-button class="menu-button">
      <mat-icon>bolt</mat-icon>
      <span>Express</span>
    </button>

    <button [routerLink]="['/taller/dashboard-tecnico/clientes']" [routerLinkActive]="'selected'" [routerLinkActiveOptions]="{ exact: true }" mat-button class="menu-button">
      <mat-icon>groups</mat-icon>
      <span>Clientes</span>
    </button>

    <button (click)="logout()" mat-button class="menu-button">
      <mat-icon>logout</mat-icon>
      <span>Cerrar SesiÃ³n</span>
    </button>

  </mat-sidenav>
  <mat-sidenav-content>
    <div class="content mat-elevation-z8 d-grid">
      <router-outlet></router-outlet>


    </div>
  </mat-sidenav-content>
</mat-sidenav-container>



================================================
FILE: src/app/components/dashboard-tecnico/dashboard-tecnico.component.scss
================================================
.grid-container {
  margin: 20px;
}

.dashboard-card {
  position: absolute;
  top: 15px;
  left: 15px;
  right: 15px;
  bottom: 15px;
}

.more-button {
  position: absolute;
  top: 5px;
  right: 10px;
}

.dashboard-card-content {
  text-align: center;
}

mat-toolbar {
  background: #004a9f;
  stop-color: #003c69;
  color: white;
}
mat-sidenav-container {
  height: -webkit-fill-available;
}
mat-sidenav {
  background: #0062ad;
  color: white;
  padding: 25px;
  text-align: center;
}

mat-divider {
  background-color: white;
  margin-top: 10px;
  margin-bottom: 10px;
}

.menu-button {
  width: 100%;
  display: flex;
  align-items: center;
  font-size: 1rem;
  justify-content: flex-start;
  color: white !important;
  mat-icon {
      margin-right: 8px;
  }
}

.selected {
  color: white;
  background-color: #004a9f;
}

.avatar {
  margin-bottom: 16px;
  padding: 15px;
  width: 150px;
  height: 150px;
  border-radius: 10%;
  background-color: white;
}

.margin-start {
  margin-left: 3rem;
}

.content {
  min-height: 100vh;
}



================================================
FILE: src/app/components/dashboard-tecnico/dashboard-tecnico.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DashboardTecnicoComponent } from './dashboard-tecnico.component';

describe('DashboardTecnicoComponent', () => {
  let component: DashboardTecnicoComponent;
  let fixture: ComponentFixture<DashboardTecnicoComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ DashboardTecnicoComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(DashboardTecnicoComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-tecnico/dashboard-tecnico.component.ts
================================================
import { map } from 'rxjs/operators';
import { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';
import { Component, ViewChild, OnInit } from '@angular/core';
import { MatSidenav } from '@angular/material/sidenav';
import { Router, NavigationEnd } from '@angular/router';
import { User, Convert } from 'src/app/interfaces/user';

@Component({
  selector: 'app-dashboard-tecnico',
  templateUrl: './dashboard-tecnico.component.html',
  styleUrls: ['./dashboard-tecnico.component.scss']
})
export class DashboardTecnicoComponent {

  @ViewChild(MatSidenav)
 sidenav!: MatSidenav;
 user!: User;

 constructor(private breakpointObserver: BreakpointObserver, private observer: BreakpointObserver, private router: Router) {
  this.user = Convert.toUser(sessionStorage.getItem('user_taller')??'');
 }
 ngAfterViewInit() {
   this.observer.observe(['(max-width: 1200px)']).subscribe((res) => {
     setTimeout(() => {
       if (res.matches) {
         this.sidenav.mode = 'over';
         this.sidenav.close();
       } else {
         this.sidenav.mode = 'side';
         this.sidenav.open();
       }
     }, 300);

   });

 }
 logout(){
  sessionStorage.clear();
  this.router.navigate(['/taller/login']);
}
}



================================================
FILE: src/app/components/dashboard-tecnico/dashboard-tecnico.module.ts
================================================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { DashboardTecnicoRoutingModule } from './dashboard-tecnico-routing.module';
import { AngularMaterialModule } from '../../angular-material.module';
import { DashboardTecnicoComponent } from './dashboard-tecnico.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TecnicosComponent } from './tecnicos/tecnicos.component';
import { TecnicoDialogComponent } from './tecnicos/tecnico-dialog/tecnico-dialog.component';
import { ClientesComponent } from './clientes/clientes.component';
import { ClienteDialogComponent } from './clientes/cliente-dialog/cliente-dialog.component';
import { ExpressComponent } from './express/express.component';
import { ExpressDialogComponent } from './express/express-dialog/express-dialog.component';

@NgModule({
  declarations: [
    DashboardTecnicoComponent,
    TecnicosComponent,
    TecnicoDialogComponent,
    ClientesComponent,
    ClienteDialogComponent,
    ExpressComponent,
    ExpressDialogComponent

  ],
  imports: [
    CommonModule,
    FormsModule,
    DashboardTecnicoRoutingModule,
    FormsModule,
    ReactiveFormsModule,
    AngularMaterialModule
  ]
})
export class DashboardTecnicoModule { }



================================================
FILE: src/app/components/dashboard-tecnico/clientes/clientes.component.html
================================================
<div class="container-fluid">
  <div class="row">
    <div class="col">
      <h2 class="mt-3 text-center">Clientes</h2>
    </div>
  </div>
  <div class="row">
    <div class="col">
      <mat-form-field [hidden]="!(this.dataSource.data.length > 0)">
        <mat-label>Buscar</mat-label>
        <input matInput (keyup)="applyFilter($event)" #input />
      </mat-form-field>
    </div>
    <div class="col text-end">
      <button
        mat-raised-button
        class="mt-3"
        color="primary"
        (click)="createCliente()"
      >
        <mat-icon>add</mat-icon> Agregar Cliente
      </button>
    </div>
  </div>

  <div class="w-100" [hidden]="!(this.dataSource.data!.length > 0)">
    <table
      mat-table
      [dataSource]="dataSource"
      class="w-100"
      matSort
      matSortActive="id"
      matSortDirection="desc"
      matSortDisableClear
    >
      <!--- Note that these columns can be defined in any order.
          The actual rendered columns are set as a property on the row definition" -->

      <!-- ID Column -->
      <ng-container matColumnDef="id">
        <th mat-header-cell *matHeaderCellDef mat-sort-header>No.</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.id }}
        </td>
      </ng-container>

      <!-- Nombre Column -->
      <ng-container matColumnDef="nombre">
        <th mat-header-cell *matHeaderCellDef class="text-center">Nombre</th>
        <td
          mat-cell
          *matCellDef="let element"
          class="text-center"
          class="text-center"
        >
          {{ element.nombre }}
        </td>
      </ng-container>

      <!-- Apellido Column -->
      <ng-container matColumnDef="apellido">
        <th mat-header-cell *matHeaderCellDef class="text-center">Apellido</th>
        <td
          mat-cell
          *matCellDef="let element"
          class="text-center"
          class="text-center"
        >
          {{ element.apellido }}
        </td>
      </ng-container>

      <!-- Telefono Column -->
      <ng-container matColumnDef="telefono">
        <th mat-header-cell *matHeaderCellDef class="text-center">TelÃ©fono</th>
        <td
          mat-cell
          *matCellDef="let element"
          class="text-center"
          class="text-center"
        >
          {{ element.telefono }}
        </td>
      </ng-container>

      <!-- CURP Column -->
      <ng-container matColumnDef="curp">
        <th mat-header-cell *matHeaderCellDef class="text-center">
          RFC sin homoclave
        </th>
        <td
          mat-cell
          *matCellDef="let element"
          class="text-center"
          class="text-center"
        >
          {{ element.curp }}
        </td>
      </ng-container>
      <!-- Acciones Column -->
      <ng-container matColumnDef="acciones">
        <th mat-header-cell *matHeaderCellDef class="text-center">Acciones</th>
        <td
          mat-cell
          *matCellDef="let element"
          class="text-center"
          class="text-center"
        >
          <button
            mat-icon-button
            (click)="updateCliente(element)"
            color="secondary"
            matTooltip="Editar Cliente"
          >
            <mat-icon>edit</mat-icon>
          </button>
        </td>
      </ng-container>

      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns"></tr>
    </table>
    <mat-paginator
      [pageSizeOptions]="[10, 25, 50, 100]"
      aria-label="Select page of users"
    ></mat-paginator>
  </div>
  <h2 *ngIf="this.dataSource.data.length === 0" class="text-center mt-5">
    No hay registros
  </h2>
</div>



================================================
FILE: src/app/components/dashboard-tecnico/clientes/clientes.component.scss
================================================
table, mat-paginator {
  background-color: transparent;
}



================================================
FILE: src/app/components/dashboard-tecnico/clientes/clientes.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ClientesComponent } from './clientes.component';

describe('ClientesComponent', () => {
  let component: ClientesComponent;
  let fixture: ComponentFixture<ClientesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ClientesComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ClientesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-tecnico/clientes/clientes.component.ts
================================================
import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTable, MatTableDataSource } from '@angular/material/table';
import { MainService } from 'src/app/services/main.service';
import Swal from 'sweetalert2';
import { ClientesRes } from '../../../interfaces/clientes';
import { ClienteDialogComponent } from './cliente-dialog/cliente-dialog.component';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Res } from 'src/app/interfaces/response';

@Component({
  selector: 'app-clientes',
  templateUrl: './clientes.component.html',
  styleUrls: ['./clientes.component.scss'],
})
export class ClientesComponent implements OnInit {
  private route = '/client';
  clientes!: ClientesRes[];
  displayedColumns: string[] = [
    'id',
    'nombre',
    'apellido',
    'telefono',
    'acciones',
  ];
  dataSource = new MatTableDataSource<ClientesRes>();
  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;

  constructor(
    private snackbar: MatSnackBar,
    private mainService: MainService,
    public dialog: MatDialog
  ) {}
  ngAfterViewInit() {
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
  }

  ngOnInit(): void {
    this.getClientes();
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }

  getClientes() {
    this.mainService
      .getRequest({}, `${this.route}/get_active_clients`)
      .subscribe((res: Res) => {
        if (res.error) {
          this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
            duration: 4000,
            horizontalPosition: 'center',
            verticalPosition: 'top',
          });
        } else {
          this.dataSource.data = res.data;
        }
      });
  }

  createCliente() {
    const dialogRef = this.dialog.open(ClienteDialogComponent, {
      width: '40%',
      data: null,
    });
    dialogRef.afterClosed().subscribe((result: ClientesRes) => {
      if (result) {
        Swal.fire(
          'Cliente Registrado',
          'Se ha registrado el cliente ' +
            result.nombre +
            ' ' +
            result.apellido,
          'success'
        );
        this.getClientes();
      }
    });
  }
  updateCliente(cliente: ClientesRes) {
    const dialogRef = this.dialog.open(ClienteDialogComponent, {
      width: '40%',
      data: cliente,
    });
    dialogRef.afterClosed().subscribe((result: ClientesRes) => {
      if (result) {
        Swal.fire(
          'Cliente Actualizado',
          'Se ha actualizado el cliente ' +
            result.nombre +
            ' ' +
            result.apellido,
          'success'
        );
        this.getClientes();
      }
    });
  }
}



================================================
FILE: src/app/components/dashboard-tecnico/clientes/cliente-dialog/cliente-dialog.component.html
================================================
<h1 mat-dialog-title class="text-center"> {{ title }} Cliente</h1>
<form [formGroup]="form">
    <div mat-dialog-content class="text-center">
        <div class="row mb-2">

            <mat-form-field  class="w-50">
                <mat-label>Nombre</mat-label>
                <input formControlName="nombre" oninput="this.value = this.value.toUpperCase()" matInput type="text">
                <mat-error *ngIf="form.controls['nombre'].hasError('required')">
                    El nombre es <strong> requerido </strong>
                </mat-error>
                <mat-icon matSuffix>person</mat-icon>
            </mat-form-field>


            <mat-form-field  class="w-50">
                <mat-label>Apellido</mat-label>

                <input formControlName="apellido" oninput="this.value = this.value.toUpperCase()" matInput type="text">
                <mat-error *ngIf="form.controls['apellido'].hasError('required')">
                    El apellido es <strong> requerido </strong>
                </mat-error>
                <mat-icon matSuffix>people</mat-icon>

            </mat-form-field>



        </div>

        <mat-form-field class="w-100 mb-2" >
            <mat-label>TelÃ©fono</mat-label>

            <input pattern="^[0-9]*$" formControlName="telefono" matInput type="text" maxlength="10" minlength="10">
            <mat-error *ngIf="form.controls['telefono'].hasError('required')">
                El telÃ©fono es <strong> requerido </strong>
            </mat-error>
            <mat-error *ngIf="form.controls['telefono'].hasError('minlength')">
                El telÃ©fono debe tener mÃ­nimo <strong> 10 dÃ­gitos </strong>
            </mat-error>
            <mat-error *ngIf="form.controls['telefono'].hasError('pattern')">
                El telÃ©fono debe tener solo <strong> nÃºmeros </strong>
            </mat-error>

            <mat-icon matSuffix>phone</mat-icon>
        </mat-form-field>
        <mat-form-field class="w-100" >
            <mat-label>RFC sin homoclave</mat-label>

            <input formControlName="curp" oninput="this.value = this.value.toUpperCase()" matInput type="text">
            <mat-icon matSuffix>badge</mat-icon>

        </mat-form-field>
    </div>
    <div mat-dialog-actions align="end">
        <button mat-button *ngIf="isCreateMode()" [disabled]="form.invalid" (click)="onAdd()">Agregar</button>
        <button mat-button *ngIf="isUpdateMode()" [disabled]="form.invalid" (click)="onAdd()">Actualizar</button>

        <button mat-button (click)="onNoClick()">Cancelar</button>
    </div>
</form>



================================================
FILE: src/app/components/dashboard-tecnico/clientes/cliente-dialog/cliente-dialog.component.scss
================================================



================================================
FILE: src/app/components/dashboard-tecnico/clientes/cliente-dialog/cliente-dialog.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ClienteDialogComponent } from './cliente-dialog.component';

describe('ClienteDialogComponent', () => {
  let component: ClienteDialogComponent;
  let fixture: ComponentFixture<ClienteDialogComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ClienteDialogComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ClienteDialogComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-tecnico/clientes/cliente-dialog/cliente-dialog.component.ts
================================================
import { Component, Inject, OnInit } from '@angular/core';
import { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';

import { ClientesRes } from '../../../../interfaces/clientes';
import { MainService } from 'src/app/services/main.service';
import { Res } from 'src/app/interfaces/response';

@Component({
  selector: 'app-cliente-dialog',
  templateUrl: './cliente-dialog.component.html',
  styleUrls: ['./cliente-dialog.component.scss']
})
export class ClienteDialogComponent {
  private route = '/client';
  form!: UntypedFormGroup;
  mode!: Number;
  title!: String;
  constructor(
    private fb: UntypedFormBuilder,
    public dialogRef: MatDialogRef<ClienteDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: ClientesRes, private mainService: MainService, private snackbar: MatSnackBar,) {
      if (this.data) {
        this.mode = 1;
        this.title = 'Actualizar';
        this.form = this.fb.group({
          nombre: [this.data.nombre, Validators.required],
          apellido: [this.data.apellido, Validators.required],
          telefono: [this.data.telefono, [Validators.required, Validators.minLength(10), Validators.pattern('^[0-9]*$')]],
          curp: [this.data.curp]
        });
      } else {
        this.mode = 0;
        this.title = 'Nuevo';

        this.form = this.fb.group({
          nombre: ['', Validators.required],
          apellido:  ['', Validators.required],
          telefono: [ '', [Validators.required, Validators.minLength(10), Validators.pattern('^[0-9]*$')]],
          curp: ['']
        });
      }

    }


  onNoClick(): void {
    this.dialogRef.close();

  }
  onAdd(): void {
    const cliente: ClientesRes = this.form.value;
    if (this.isCreateMode()) {
      this.mainService
        .postRequest(cliente, this.route)
        .subscribe((res: Res) => {
          if (res.error) {
            this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
              duration: 4000,
              horizontalPosition: 'center',
              verticalPosition: 'top',
            });
          } else {
            this.dialogRef.close(cliente);
          }
        });
    } else {
      this.mainService.putRequest(cliente, this.route).subscribe((res: Res) => {
        if (res.error) {
          this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
            duration: 4000,
            horizontalPosition: 'center',
            verticalPosition: 'top',
          });
        } else {
          this.dialogRef.close(cliente);
        }
      });
    }

  }
  isCreateMode() {
    return this.mode === 0;
  }

  isUpdateMode() {
    return this.mode === 1;
  }


}



================================================
FILE: src/app/components/dashboard-tecnico/express/express.component.html
================================================
<div class="container-fluid">
  <div class="row">
    <div class="col">
      <h2 class="mt-3 text-center">Express</h2>
    </div>
  </div>
  <div class="row align-items-center">
    <div class="col">
      <mat-form-field [hidden]="!(this.dataSource.data.length > 0)">
        <mat-label>Buscar</mat-label>
        <input matInput (keyup)="applyFilter($event)" #input />
      </mat-form-field>
    </div>
    <div class="col text-center">
      <mat-form-field class="mt-3">
        <mat-label>Mes y AÃ±o</mat-label>
        <input matInput [matDatepicker]="dp" [formControl]="date" />
        <mat-datepicker-toggle matSuffix [for]="dp"></mat-datepicker-toggle>
        <mat-datepicker
          #dp
          startView="year"
          (monthSelected)="setMonthAndYear($event, dp)"
          panelClass="month-picker"
        >
        </mat-datepicker>
      </mat-form-field>
    </div>
    <div class="col text-end">
      <button mat-raised-button color="primary" (click)="createServicio()">
        <mat-icon>add</mat-icon> Nuevo Express
      </button>
    </div>
  </div>

  <div class="w-100" [hidden]="!(this.dataSource.data!.length > 0)">
    <table
      mat-table
      [dataSource]="dataSource"
      class="w-100 text-center"
      matSort
      matSortActive="id"
      matSortDirection="desc"
      matSortDisableClear
    >
      <!--- Note that these columns can be defined in any order.
      The actual rendered columns are set as a property on the row definition" -->

      <!-- ID Column -->
      <ng-container matColumnDef="id">
        <th
          mat-header-cell
          *matHeaderCellDef
          mat-sort-header
          class="text-center"
        >
          No.
        </th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.id }}
        </td>
      </ng-container>

      <!-- Fecha Ingreso Column -->
      <ng-container matColumnDef="fecha">
        <th mat-header-cell *matHeaderCellDef class="text-center">
          Fecha de Ingreso
        </th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.fecha | date : "dd/MM/yyyy" }}
        </td>
      </ng-container>

      <!-- Herramienta Column -->
      <ng-container matColumnDef="herramienta">
        <th mat-header-cell *matHeaderCellDef class="text-center">
          Herramienta
        </th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.herramienta }}
        </td>
      </ng-container>

      <!-- Modelo Column -->
      <ng-container matColumnDef="encargado">
        <th mat-header-cell *matHeaderCellDef class="text-center">Encargado</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.encargado }}
        </td>
      </ng-container>
      <!-- Falla Column -->
      <ng-container matColumnDef="falla">
        <th mat-header-cell *matHeaderCellDef class="text-center">Falla</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.falla }}
        </td>
      </ng-container>
      <!-- Modelo Column -->
      <ng-container matColumnDef="cotizacion">
        <th mat-header-cell *matHeaderCellDef class="text-center">
          CotizaciÃ³n
        </th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.cotizacion }}
        </td>
      </ng-container>
      <!-- Modelo Column -->
      <ng-container matColumnDef="importe">
        <th mat-header-cell *matHeaderCellDef class="text-center">$</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.importe | currency : "MXN" : "symbol-narrow" }}
        </td>
      </ng-container>

      <!-- Acciones Column -->
      <ng-container matColumnDef="acciones">
        <th mat-header-cell *matHeaderCellDef class="text-center">Acciones</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          <button
            mat-icon-button
            (click)="updateServicio(element)"
            color="secondary"
            matTooltip="Editar Servicio"
          >
            <mat-icon>edit</mat-icon>
          </button>
        </td>
      </ng-container>

      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns"></tr>
    </table>
    <mat-paginator
      [pageSizeOptions]="[10, 25, 50, 100]"
      aria-label="Select page of users "
    ></mat-paginator>
  </div>
  <h2 *ngIf="this.dataSource.data.length === 0" class="text-center mt-5">
    No hay registros
  </h2>
</div>



================================================
FILE: src/app/components/dashboard-tecnico/express/express.component.scss
================================================
table, mat-paginator {
  background-color: transparent;
}



================================================
FILE: src/app/components/dashboard-tecnico/express/express.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ExpressComponent } from './express.component';

describe('ExpressComponent', () => {
  let component: ExpressComponent;
  let fixture: ComponentFixture<ExpressComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ExpressComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ExpressComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-tecnico/express/express.component.ts
================================================
import { Component, OnInit, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTable, MatTableDataSource } from '@angular/material/table';
import {
  MomentDateAdapter,
  MAT_MOMENT_DATE_ADAPTER_OPTIONS,
} from '@angular/material-moment-adapter';
import {
  DateAdapter,
  MAT_DATE_FORMATS,
  MAT_DATE_LOCALE,
} from '@angular/material/core';
import { MatDatepicker } from '@angular/material/datepicker';
import { interval, Subscription } from 'rxjs';
import * as _moment from 'moment';
// tslint:disable-next-line:no-duplicate-imports
import { Moment } from 'moment';
import 'moment/locale/es';
import Swal from 'sweetalert2';
import { UntypedFormControl } from '@angular/forms';
import * as moment from 'moment';
import { ExpressDialogComponent } from './express-dialog/express-dialog.component';
import { MainService } from 'src/app/services/main.service';
import { User, Convert } from 'src/app/interfaces/user';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Res } from 'src/app/interfaces/response';
import { ToolService } from 'src/app/interfaces/toolservice';
export const MY_FORMATS = {
  parse: {
    dateInput: 'MM/YYYY',
  },
  display: {
    dateInput: 'MM/YYYY',
    monthYearLabel: 'MMMM YYYY',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'MMMM YYYY',
  },
};
@Component({
  selector: 'app-express',
  templateUrl: './express.component.html',
  styleUrls: ['./express.component.scss'],
  providers: [
    { provide: MAT_DATE_LOCALE, useValue: 'es-ES' },
    {
      provide: DateAdapter,
      useClass: MomentDateAdapter,
      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],
    },

    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },
  ],
})
export class ExpressComponent implements OnInit {
  private route = '/express';
  subscription!: Subscription;
  user!: User;
  displayedColumns: string[] = [
    'id',
    'fecha',
    'encargado',
    'herramienta',
    'cotizacion',
    'falla',
    'importe',
    'acciones',
  ];
  dataSource = new MatTableDataSource<ToolService>();
  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;
  date = new UntypedFormControl(moment());
  constructor(
    private snackbar: MatSnackBar,
    private mainService: MainService,
    public dialog: MatDialog
  ) {
    this.user = Convert.toUser(sessionStorage.getItem('user_taller') ?? '');
  }

  ngAfterViewInit(): void {
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
  }
  ngOnInit(): void {
    this.getExpress();
  }
  getExpress() {
    this.mainService
      .getRequest(
        {
          id: this.user.id,
          month: this.date.value.month() + 1,
          year: this.date.value.year(),
        },
        `${this.route}/tech_by_month`
      )
      .subscribe((res: Res) => {
        if (res.error) {
          this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
            duration: 4000,
            horizontalPosition: 'center',
            verticalPosition: 'top',
          });
        } else {
          this.dataSource.data = res.data;
        }
      });
  }
  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }
  setMonthAndYear(
    normalizedMonthAndYear: Moment,
    datepicker: MatDatepicker<Moment>
  ) {
    const ctrlValue = this.date.value;
    ctrlValue.month(normalizedMonthAndYear.month());
    ctrlValue.year(normalizedMonthAndYear.year());
    this.date.setValue(ctrlValue);
    this.getExpress();
    datepicker.close();
  }

  createServicio() {
    const dialogRef = this.dialog.open(ExpressDialogComponent, {
      width: '50%',
      data: null,
    });
    dialogRef.afterClosed().subscribe((result: ToolService) => {
      if (result) {
        Swal.fire({
          position: 'center',
          icon: 'success',
          title: 'Se ha registrado el servicio correctamente.',
          showConfirmButton: false,
          timer: 1500,
        });
        this.getExpress();
      }
    });
  }
  updateServicio(servicio: ToolService) {
    const dialogRef = this.dialog.open(ExpressDialogComponent, {
      width: '50%',
      data: servicio,
    });
    dialogRef.afterClosed().subscribe((result: ToolService) => {
      if (result) {
        Swal.fire({
          position: 'center',
          icon: 'success',
          title: 'Se ha actualizado el servicio correctamente.',
          showConfirmButton: false,
          timer: 1500,
        });
        this.getExpress();
      }
    });
  }
}



================================================
FILE: src/app/components/dashboard-tecnico/express/express-dialog/express-dialog.component.html
================================================

  <div class="col text-center">
      <h1 mat-dialog-title> {{ title }} Express {{ isUpdateMode() ? data.id : ''}}


      </h1>
  </div>


<form [formGroup]="form" class="mt-3">
  <div mat-dialog-content class="text-center">
      <div class="row">

          <mat-form-field  class="w-50">
              <mat-label>Encargado</mat-label>
              <mat-select [formControl]="usuariosControl" #singleSelectUsuarios>
                  <mat-option *ngFor="let usuario of usuariosFiltrados | async" [value]="usuario">
                      {{ usuario.nombre }} {{ usuario.apellido }} - {{ usuario.curp }}
                  </mat-option>
              </mat-select>

          </mat-form-field>
          <mat-form-field  class="w-50">
            <mat-label>Herramienta</mat-label>

            <input formControlName="herramienta" oninput="this.value = this.value.toUpperCase()" matInput type="text">
            <mat-error *ngIf="form.controls['herramienta'].hasError('required')">
                La herramienta es <strong> requerido </strong>
            </mat-error>
            <mat-icon matSuffix>build</mat-icon>

        </mat-form-field>

      </div>
      <div class="row">
          <mat-form-field >
              <mat-label>Falla Detectada</mat-label>
              <textarea oninput="this.value = this.value.toUpperCase()" matInput formControlName="falla"></textarea>
          </mat-form-field>
      </div>
      <div class="row">

        <mat-form-field  class="w-50">
          <mat-label>Cotizacion</mat-label>

          <input formControlName="cotizacion" matInput type="text">

          <mat-icon matSuffix>tag</mat-icon>

      </mat-form-field>
      <mat-form-field  class="w-50">
        <mat-label>Importe</mat-label>

        <input formControlName="importe" matInput type="number">

        <mat-icon matSuffix>attach_money</mat-icon>

    </mat-form-field>
    </div>


  </div>
  <div mat-dialog-actions align="end">
    <button mat-button *ngIf="isUpdateMode()" [disabled]="form.invalid" (click)="onAdd()">Actualizar</button>
    <button mat-button *ngIf="isCreateMode()" [disabled]="form.invalid" (click)="onAdd()">Agregar</button>

      <button mat-button (click)="onNoClick()">Cancelar</button>
  </div>
</form>



================================================
FILE: src/app/components/dashboard-tecnico/express/express-dialog/express-dialog.component.scss
================================================



================================================
FILE: src/app/components/dashboard-tecnico/express/express-dialog/express-dialog.component.ts
================================================
import { Component, Inject, OnInit, ViewChild } from '@angular/core';
import { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatSelect } from '@angular/material/select';
import { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import {MomentDateAdapter, MAT_MOMENT_DATE_ADAPTER_OPTIONS} from '@angular/material-moment-adapter';
import {DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE} from '@angular/material/core';
import * as _moment from 'moment';
// tslint:disable-next-line:no-duplicate-imports
import { Moment} from 'moment';
import 'moment/locale/es';

import { User, Convert } from 'src/app/interfaces/user';
import { ReplaySubject, Subject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { MainService } from 'src/app/services/main.service';
import { Res } from 'src/app/interfaces/response';
import { ExpressRes } from 'src/app/interfaces/express';
import { ToolService } from 'src/app/interfaces/toolservice';
import * as moment from 'moment';

export const MY_FORMATS = {
  parse: {
    dateInput: 'DD/MM/YYYY',
  },
  display: {
    dateInput: 'DD/MM/YYYY',
    monthYearLabel: 'DD MMMM YYYY',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'DD MMMM YYYY',
  },
};
@Component({
  selector: 'app-express-dialog',
  templateUrl: './express-dialog.component.html',
  styleUrls: ['./express-dialog.component.scss'],
  providers: [
    {provide: MAT_DATE_LOCALE, useValue: 'es-ES'},
    {
      provide: DateAdapter,
      useClass: MomentDateAdapter,
      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],
    },

    {provide: MAT_DATE_FORMATS, useValue: MY_FORMATS},
  ],
})
export class ExpressDialogComponent implements OnInit {
  private route = '/express'
  form!: UntypedFormGroup;
  mode!: Number;
  title!: String;
  usuarios!: User[];
  user!: User;

  public usuariosFiltro: UntypedFormControl = new UntypedFormControl();
  public usuariosControl: UntypedFormControl = new UntypedFormControl();
  public usuariosFiltrados: ReplaySubject<User[]> = new ReplaySubject<User[]>(1);
  protected _onDestroy = new Subject<void>();


  @ViewChild('singleSelectUsuarios') singleSelectUsuarios!: MatSelect;

  constructor(private fb: UntypedFormBuilder,
    public dialogRef: MatDialogRef<ExpressDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: ExpressRes,
    private mainService: MainService,
    private snackbar: MatSnackBar,) {
      this.user = Convert.toUser(sessionStorage.getItem('user_taller')??'');


      if (this.data) {
        this.mode = 1;
        this.title = 'Actualizar';
        this.form = this.fb.group({
            id: [this.data.id, Validators.required],
            herramienta: [this.data.herramienta,Validators.required],
            falla: [this.data.falla, Validators.required],
            id_usuario: [{value: this.data.id_usuario, disabled: true}, Validators.required],
            cotizacion: [this.data.cotizacion],
            importe: [this.data.importe],

          });
      } else {
        this.mode = 0;
        this.title = 'Nuevo';
        this.form = this.fb.group({
            herramienta: ['', Validators.required],
            fecha: [moment().format("YYYY-MM-DD")],
            falla: ['', Validators.required],
            id_usuario: [{value: this.user.id, disabled: true}, Validators.required],
            cotizacion: [null],
            importe: [null],
        });
      }
    }

  ngOnInit(): void {
    this.getMenus();
    this.usuariosControl.valueChanges.subscribe((data)=>{
      this.form.controls['id_usuario'].setValue(data.id);
    });
    this.usuariosFiltro.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(()=> {

      this.filtrarUsuarios();
    });
  }
  protected filtrarUsuarios() {
    if (!this.usuarios) {
      return;
    }
    // get the search keyword
    let search = this.usuariosFiltro.value;
    if (!search) {
      this.usuariosFiltrados.next(this.usuarios.slice());
      return;
    } else {
      search = search.toLowerCase();
    }
    this.usuariosFiltrados.next(
      this.usuarios.filter(usuario => usuario.curp.toLowerCase().indexOf(search) > -1)
    );

  }
  onAdd(): void {

    const servicio: ToolService = this.form.getRawValue();
    if (this.isCreateMode()) {
      this.mainService
        .postRequest(servicio, this.route)
        .subscribe((res: Res) => {
          if (res.error) {
            this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
              duration: 4000,
              horizontalPosition: 'center',
              verticalPosition: 'top',
            });
          } else {
            this.dialogRef.close(servicio);
          }
        });
    } else {
      this.mainService
        .putRequest(servicio, this.route)
        .subscribe((res: Res) => {
          if (res.error) {
            this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
              duration: 4000,
              horizontalPosition: 'center',
              verticalPosition: 'top',
            });
          } else {
            this.dialogRef.close(servicio);
          }
        });
    }

  }

  getMenus(){

    this.mainService.getRequest({ id: this.user.id }, `/user/get_tech_users`).subscribe((res: Res) => {
    this.usuarios = res.data;
    this.usuariosFiltrados.next(this.usuarios.slice());
    let filtro = res.data.filter((usuario: User) => usuario.id == this.user.id);
    this.usuariosControl.setValue(filtro[0]);
    this.usuariosControl.disable();

  });



  }
  protected setInitialValueUsuarios() {
    this.usuariosFiltrados
      .pipe(take(1), takeUntil(this._onDestroy))
      .subscribe(() => {
        // setting the compareWith property to a comparison function
        // triggers initializing the selection according to the initial value of
        // the form control (i.e. _initializeSelection())
        // this needs to be done after the filteredBanks are loaded initially
        // and after the mat-option elements are available
        this.singleSelectUsuarios.compareWith = (a: User, b: User) => a && b && a.id === b.id;
      });
  }
  onNoClick(): void {
    this.dialogRef.close();

  }
  ngAfterViewInit(): void {
    this.setInitialValueUsuarios();
  }
  ngOnDestroy() {
    this._onDestroy.next();
    this._onDestroy.complete();
  }
  isCreateMode() {
    return this.mode === 0;
  }

  isUpdateMode() {
    return this.mode === 1;
  }
}



================================================
FILE: src/app/components/dashboard-tecnico/tecnicos/tecnicos.component.html
================================================
<div class="container-fluid">
  <div class="row">
    <div class="col text-center">
      <h2 class="mt-3">Servicios</h2>
    </div>
  </div>
  <div class="row align-items-center">
    <div class="col">
      <mat-form-field [hidden]="!(this.dataSource.data.length > 0)">
        <mat-label>Buscar</mat-label>
        <input matInput (keyup)="applyFilter($event)" #input />
      </mat-form-field>
    </div>
    <div class="col text-end">
      <button mat-raised-button color="primary" (click)="createServicio()">
        <mat-icon>add</mat-icon> Nuevo Servicio
      </button>
    </div>
  </div>
  <div class="w-100" [hidden]="!(this.dataSource.data!.length > 0)">
    <table
      mat-table
      [dataSource]="dataSource"
      class="w-100 text-center"
      matSort
      matSortActive="id"
      matSortDirection="desc"
      matSortDisableClear
    >
      <!--- Note that these columns can be defined in any order.
      The actual rendered columns are set as a property on the row definition" -->

      <!-- ID Column -->
      <ng-container matColumnDef="id">
        <th
          mat-header-cell
          *matHeaderCellDef
          mat-sort-header
          class="text-center"
        >
          No.
        </th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.id }}
        </td>
      </ng-container>

      <!-- Fecha Ingreso Column -->
      <ng-container matColumnDef="fecha_ingreso">
        <th mat-header-cell *matHeaderCellDef class="text-center">
          Fecha de Ingreso
        </th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.fecha_ingreso | date : "dd/MM/yyyy  HH:mm:ss" }}
        </td>
      </ng-container>

      <!-- Apellido Column -->
      <ng-container matColumnDef="nombre_cliente">
        <th mat-header-cell *matHeaderCellDef class="text-center">Cliente</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.nombre_cliente }}
        </td>
      </ng-container>

      <!-- Producto Column -->
      <ng-container matColumnDef="producto">
        <th mat-header-cell *matHeaderCellDef class="text-center">Producto</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.producto }}
        </td>
      </ng-container>

      <!-- Marca Column -->
      <ng-container matColumnDef="marca">
        <th mat-header-cell *matHeaderCellDef class="text-center">Marca</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.marca }}
        </td>
      </ng-container>

      <!-- Modelo Column -->
      <ng-container matColumnDef="encargado">
        <th mat-header-cell *matHeaderCellDef class="text-center">Encargado</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.encargado }}
        </td>
      </ng-container>
      <!-- Modelo Column -->
      <ng-container matColumnDef="falla_detectada">
        <th mat-header-cell *matHeaderCellDef class="text-center">Falla</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.falla_detectada }}
        </td>
      </ng-container>
      <!-- Modelo Column -->
      <ng-container matColumnDef="cotizacion">
        <th mat-header-cell *matHeaderCellDef class="text-center">
          CotizaciÃ³n
        </th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.cotizacion }}
        </td>
      </ng-container>
      <!-- Modelo Column -->
      <ng-container matColumnDef="fecha_terminado">
        <th mat-header-cell *matHeaderCellDef class="text-center">Terminado</th>
        <td
          mat-cell
          [ngClass]="{
            warnCell: avisoTerminado(
              element.fecha_ingreso,
              element.fecha_terminado
            )
          }"
          *matCellDef="let element"
          class="text-center"
        >
          {{ element.fecha_terminado | date : "dd/MM/yyyy" }}
        </td>
      </ng-container>
      <!-- Modelo Column -->
      <ng-container matColumnDef="fecha_entrega">
        <th mat-header-cell *matHeaderCellDef class="text-center">Entrega</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.fecha_entrega | date : "dd/MM/yyyy" }}
        </td>
      </ng-container>
      <!-- Modelo Column -->
      <ng-container matColumnDef="importe">
        <th mat-header-cell *matHeaderCellDef class="text-center">$</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.importe | currency : "MXN" : "symbol-narrow" }}
        </td>
      </ng-container>
      <!-- Modelo Column -->
      <ng-container matColumnDef="estatus">
        <th mat-header-cell *matHeaderCellDef class="text-center">Estatus</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.estatus }}
        </td>
      </ng-container>
      <!-- Modelo Column -->
      <ng-container matColumnDef="observaciones">
        <th mat-header-cell *matHeaderCellDef class="text-center">
          Observaciones
        </th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.observaciones }}
        </td>
      </ng-container>
      <!-- Garantia Column -->
      <ng-container matColumnDef="garantia">
        <th mat-header-cell *matHeaderCellDef class="text-center">GarantÃ­a</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          {{ element.garantia === "0" ? "NO" : "SI" }}
        </td>
      </ng-container>
      <!-- Acciones Column -->
      <ng-container matColumnDef="acciones">
        <th mat-header-cell *matHeaderCellDef class="text-center">Acciones</th>
        <td mat-cell *matCellDef="let element" class="text-center">
          <button
            mat-icon-button
            (click)="updateServicio(element)"
            color="accent"
            matTooltip="Editar Servicio"
          >
            <mat-icon>edit</mat-icon>
          </button>

          <a
            mat-icon-button
            target="_blank"
            matTooltip="Generar Recibo"
            [routerLink]="['/taller/factura', element.id]"
            *ngIf="element.impreso == 0"
          >
            <mat-icon>receipt_log</mat-icon>
          </a>
        </td>
      </ng-container>

      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns"></tr>
    </table>
    <mat-paginator
      [pageSizeOptions]="[10, 25, 50, 100]"
      aria-label="Select page of users "
    ></mat-paginator>
  </div>
  <h2 *ngIf="this.dataSource.data.length === 0" class="text-center mt-5">
    No hay registros
  </h2>
</div>



================================================
FILE: src/app/components/dashboard-tecnico/tecnicos/tecnicos.component.scss
================================================
table, mat-paginator {
  background-color: transparent;
}



================================================
FILE: src/app/components/dashboard-tecnico/tecnicos/tecnicos.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TecnicosComponent } from './tecnicos.component';

describe('TecnicosComponent', () => {
  let component: TecnicosComponent;
  let fixture: ComponentFixture<TecnicosComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TecnicosComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(TecnicosComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-tecnico/tecnicos/tecnicos.component.ts
================================================
import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { Router } from '@angular/router';
import { MatDialog } from '@angular/material/dialog';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';
import { interval, Subscription } from 'rxjs';

// tslint:disable-next-line:no-duplicate-imports
import 'moment/locale/es';
import Swal from 'sweetalert2';
import { TecnicoDialogComponent } from './tecnico-dialog/tecnico-dialog.component';
import { MainService } from 'src/app/services/main.service';
import { Convert, User } from 'src/app/interfaces/user';
import { Res } from 'src/app/interfaces/response';
import { MatSnackBar } from '@angular/material/snack-bar';
import { ToolService } from 'src/app/interfaces/toolservice';

@Component({
  selector: 'app-tecnicos',
  templateUrl: './tecnicos.component.html',
  styleUrls: ['./tecnicos.component.scss'],
})
export class TecnicosComponent implements OnDestroy, OnInit {
  private route = '/service';
  user!: User;

  displayedColumns: string[] = [
    'id',
    'fecha_ingreso',
    'nombre_cliente',
    'producto',
    'marca',
    'encargado',
    'cotizacion',
    'fecha_terminado',
    'importe',
    'estatus',
    'acciones',
  ];
  dataSource = new MatTableDataSource<ToolService>();
  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;
  private eventSubscription!: Subscription;
  constructor(
    private snackbar: MatSnackBar,
    private mainService: MainService,
    public router: Router,
    public dialog: MatDialog
  ) {
    this.user = Convert.toUser(sessionStorage.getItem('user_taller') ?? '');
  }
  ngAfterViewInit(): void {
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
  }
  ngOnInit(): void {
    this.getServicios();
    this.eventSubscription = this.mainService.getServerEvent(`${this.route}/sse`).subscribe(()=>{
      this.getServicios();
    })
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }
  getServicios() {
    this.mainService
      .getRequest({ id: this.user.id }, `${this.route}/tech`)
      .subscribe((res: Res) => {
        if (res.error) {
          this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
            duration: 4000,
            horizontalPosition: 'center',
            verticalPosition: 'top',
          });
        } else {
          this.dataSource.data = res.data;
        }
      });
  }

  efectividadDias(start: Date, end: Date) {
    var eventStartTime = new Date(start);
    var eventEndTime = new Date(end);
    var duration = eventEndTime.getDate() - eventStartTime.getDate();
    return duration;
  }
  avisoTerminado(start: Date, end: Date): boolean {
    var eventStartTime = new Date(start);
    var eventEndTime;
    end === null ? (eventEndTime = new Date()) : (eventEndTime = new Date(end));

    var duration = eventEndTime.getDate() - eventStartTime.getDate();
    return duration > 10 && end === null;
  }
  createServicio() {
    const dialogRef = this.dialog.open(TecnicoDialogComponent, {
      width: '50%',
      data: null,
    });
    dialogRef.afterClosed().subscribe((result: ToolService) => {
      if (result) {
        this.getServicios()

        Swal.fire({
          position: 'center',
          icon: 'success',
          title: 'Se ha registrado el servicio correctamente.',
          showConfirmButton: false,
          timer: 1500,
        });
      }
    });
  }
  updateServicio(servicio: ToolService) {
    const dialogRef = this.dialog.open(TecnicoDialogComponent, {
      width: '50%',
      data: servicio,
    });
    dialogRef.afterClosed().subscribe((result: ToolService) => {
      if (result) {
        this.getServicios()
        Swal.fire({
          position: 'center',
          icon: 'success',
          title: 'Se ha actualizado el servicio correctamente.',
          showConfirmButton: false,
          timer: 1500,
        });
      }
    });
  }
  ngOnDestroy(): void {
    //Called once, before the instance is destroyed.
    this.mainService.disconnectEventSource()
    this.eventSubscription.unsubscribe();

  }
}



================================================
FILE: src/app/components/dashboard-tecnico/tecnicos/tecnico-dialog/tecnico-dialog.component.html
================================================
<div class="col text-center">
  <h1 mat-dialog-title>
    {{ title }} Servicio {{ isUpdateMode() ? data.id : "" }}
  </h1>
</div>
<div *ngIf="isUpdateMode()" class="col d-flex justify-content-center mb-3">
  <button
    mat-raised-button
    *ngIf="this.data.estatus === 'POR AUTORIZAR'"
    color="primary"
    [disabled]="form.invalid"
    (click)="marcarPendiente()"
  >
    <mat-icon>pending</mat-icon> Pendiente
  </button>
  <button
    mat-raised-button
    *ngIf="this.data.estatus === 'PENDIENTE'"
    color="primary"
    [disabled]="form.invalid"
    (click)="marcarTerminado()"
  >
    <mat-icon>done</mat-icon> Terminar
  </button>
  <button
    mat-raised-button
    *ngIf="this.data.estatus === 'TERMINADO'"
    color="primary"
    [disabled]="form.invalid"
    (click)="marcarEntregado()"
  >
    <mat-icon>done_all</mat-icon> Entregar
  </button>
</div>

<form [formGroup]="form" *ngIf="!isLoading">
  <div mat-dialog-content class="text-center">
    <div class="row">
      <mat-form-field class="w-50" >
        <mat-label>Cliente</mat-label>
        <mat-select [formControl]="clientesControl" #singleSelectClientes>
          <mat-option>
            <ngx-mat-select-search
              placeholderLabel="Buscar cliente..."
              noEntriesFoundLabel="No se encontraron clientes"
              [formControl]="clientesFiltro"
            ></ngx-mat-select-search>
          </mat-option>
          <mat-option
            *ngFor="let cliente of clientesFiltrados | async"
            [value]="cliente"
          >
            {{ cliente.nombre }} {{ cliente.apellido }} - {{ cliente.telefono }}
          </mat-option>
        </mat-select>
      </mat-form-field>
      <mat-form-field class="w-50"  >
        <mat-label>Encargado</mat-label>
        <mat-select formControlName="id_usuario" name="usuario">
          <mat-option
            *ngFor="let usuario of usuarios"
            [value]="usuario.id"
          >
            {{ usuario.nombre }} {{ usuario.apellido }} - {{ usuario.curp }}
          </mat-option>
        </mat-select>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field>
        <mat-label>Falla Detectada</mat-label>
        <textarea
          oninput="this.value = this.value.toUpperCase()"
          matInput
          formControlName="falla_detectada"
        ></textarea>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Producto</mat-label>

        <input
          formControlName="producto"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-error *ngIf="form.controls['producto'].hasError('required')">
          El producto es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>build</mat-icon>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Tipo</mat-label>
        <mat-select formControlName="tipo" name="tipo">
          <mat-option [value]="option.value" *ngFor="let option of tipos">{{
            option.value
          }}</mat-option>
        </mat-select>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Marca</mat-label>
        <mat-select formControlName="id_marca" name="marca">
          <mat-option [value]="option.id" *ngFor="let option of marcas">{{
            option.value
          }}</mat-option>
        </mat-select>
      </mat-form-field>

      <mat-form-field class="w-50">
        <mat-label>Modelo</mat-label>

        <input
          formControlName="modelo"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-error *ngIf="form.controls['modelo'].hasError('required')">
          El modelo es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>local_activity</mat-icon>
      </mat-form-field>
    </div>
    <div class="row d-flex">
      <mat-form-field class="w-50">
        <mat-label>Numero de Serie</mat-label>

        <input
          formControlName="serie"
          oninput="this.value = this.value.toUpperCase()"
          matInput
          type="text"
        />
        <mat-error *ngIf="form.controls['serie'].hasError('required')">
          El nÃºmero de serie es <strong> requerido </strong>
        </mat-error>
        <mat-icon matSuffix>pin</mat-icon>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>GarantÃ­a</mat-label>
        <mat-select formControlName="garantia" name="garantia">
          <mat-option value="1">SI</mat-option>
          <mat-option value="0">NO</mat-option>
        </mat-select>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Cotizacion</mat-label>

        <input formControlName="cotizacion" matInput type="text" />

        <mat-icon matSuffix>tag</mat-icon>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Fecha de Ingreso</mat-label>
        <input
          matInput
          [matDatepicker]="pickerIngreso"
          formControlName="fecha_ingreso"
        />
        <mat-datepicker-toggle
          matSuffix
          [for]="pickerIngreso"
        ></mat-datepicker-toggle>
        <mat-datepicker #pickerIngreso></mat-datepicker>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field class="w-50">
        <mat-label>Importe</mat-label>

        <input formControlName="importe" matInput type="number" />

        <mat-icon matSuffix>attach_money</mat-icon>
      </mat-form-field>
      <mat-form-field class="w-50">
        <mat-label>Estatus</mat-label>
        <mat-select formControlName="estatus" name="estatus">
          <mat-option [value]="option.value" *ngFor="let option of estatus">{{
            option.value
          }}</mat-option>
        </mat-select>
      </mat-form-field>
    </div>
    <div class="row">
      <mat-form-field>
        <mat-label>Observaciones</mat-label>
        <textarea
          oninput="this.value = this.value.toUpperCase()"
          matInput
          formControlName="observaciones"
        ></textarea>
      </mat-form-field>
    </div>
  </div>
  <div mat-dialog-actions align="end">
    <button
      mat-button
      *ngIf="isUpdateMode()"
      [disabled]="form.invalid"
      (click)="onAdd()"
    >
      Actualizar
    </button>
    <button
      mat-button
      *ngIf="isCreateMode()"
      [disabled]="form.invalid"
      (click)="onAdd()"
    >
      Agregar
    </button>

    <button mat-button (click)="onNoClick()">Cancelar</button>
  </div>
</form>



================================================
FILE: src/app/components/dashboard-tecnico/tecnicos/tecnico-dialog/tecnico-dialog.component.scss
================================================



================================================
FILE: src/app/components/dashboard-tecnico/tecnicos/tecnico-dialog/tecnico-dialog.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TecnicoDialogComponent } from './tecnico-dialog.component';

describe('TecnicoDialogComponent', () => {
  let component: TecnicoDialogComponent;
  let fixture: ComponentFixture<TecnicoDialogComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TecnicoDialogComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(TecnicoDialogComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/dashboard-tecnico/tecnicos/tecnico-dialog/tecnico-dialog.component.ts
================================================
import { MarcasRes } from './../../../../interfaces/marcas';
import {
  AfterViewInit,
  Component,
  Inject,
  OnInit,
  ViewChild,
} from '@angular/core';
import {
  UntypedFormBuilder,
  UntypedFormControl,
  UntypedFormGroup,
  Validators,
} from '@angular/forms';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatSelect } from '@angular/material/select';
import {
  MatDialog,
  MatDialogRef,
  MAT_DIALOG_DATA,
} from '@angular/material/dialog';
import {
  MomentDateAdapter,
  MAT_MOMENT_DATE_ADAPTER_OPTIONS,
} from '@angular/material-moment-adapter';
import {
  DateAdapter,
  MAT_DATE_FORMATS,
  MAT_DATE_LOCALE,
} from '@angular/material/core';
import * as _moment from 'moment';
// tslint:disable-next-line:no-duplicate-imports
import { Moment } from 'moment';
import 'moment/locale/es';
import { Convert, User } from 'src/app/interfaces/user';
import { ClientesRes } from 'src/app/interfaces/clientes';
import { ReplaySubject, Subject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { MainService } from 'src/app/services/main.service';
import { ToolService } from 'src/app/interfaces/toolservice';
import { Res } from 'src/app/interfaces/response';
import * as moment from 'moment';
import { ajax } from 'rxjs/ajax';

export const MY_FORMATS = {
  parse: {
    dateInput: 'DD/MM/YYYY',
  },
  display: {
    dateInput: 'DD/MM/YYYY',
    monthYearLabel: 'DD MMMM YYYY',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'DD MMMM YYYY',
  },
};
@Component({
  selector: 'app-tecnico-dialog',
  templateUrl: './tecnico-dialog.component.html',
  styleUrls: ['./tecnico-dialog.component.scss'],
  providers: [
    { provide: MAT_DATE_LOCALE, useValue: 'es-ES' },
    {
      provide: DateAdapter,
      useClass: MomentDateAdapter,
      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],
    },

    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },
  ],
})
export class TecnicoDialogComponent implements OnInit, AfterViewInit {
  private route = '/service';
  form!: UntypedFormGroup;
  mode!: Number;
  title!: String;
  usuarios!: User[];
  user!: User;
  clientes!: ClientesRes[];
  marcas!: MarcasRes[];
  minDateTerminado!: Date;
  minDateEntregado!: Date;
  estatus = [
    {
      value: 'POR AUTORIZAR',
    },
    {
      value: 'PENDIENTE',
    },
    {
      value: 'TERMINADO',
    },
    {
      value: 'ENTREGADO',
    },
    {
      value: 'NO AUTORIZADO',
    },
  ];

  tipos = [
    {
      value: 'GAS LP',
    },
    {
      value: 'BOMBEO',
    },
    {
      value: 'GASOLINA',
    },
    {
      value: 'HERRAMIENTA ELECTRICA',
    },
    {
      value: 'CLIMA',
    },
    {
      value: 'OTRO',
    },
  ];

  public isLoading: boolean = true;

  public clientesFiltro: UntypedFormControl = new UntypedFormControl();
  public clientesControl: UntypedFormControl = new UntypedFormControl();
  public clientesFiltrados: ReplaySubject<ClientesRes[]> = new ReplaySubject<
    ClientesRes[]
  >(1);
  protected _onDestroy = new Subject<void>();

  @ViewChild('singleSelectClientes') singleSelectClientes!: MatSelect;

  constructor(
    private fb: UntypedFormBuilder,
    public dialogRef: MatDialogRef<TecnicoDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: ToolService,
    private mainService: MainService,
    private snackbar: MatSnackBar
  ) {
    this.user = Convert.toUser(sessionStorage.getItem('user_taller') ?? '');
    if (this.data) {
      this.mode = 1;
      this.title = 'Actualizar';
      this.form = this.fb.group({
        id: [this.data.id, Validators.required],
        fecha_ingreso: [{ value: this.data.fecha_ingreso, disabled: true }],
        id_cliente: [this.data.id_cliente, Validators.required],
        producto: [this.data.producto, Validators.required],
        id_marca: [this.data.id_marca, Validators.required],
        modelo: [this.data.modelo, Validators.required],
        tipo: [this.data.tipo, Validators.required],
        serie: [this.data.serie, Validators.required],
        garantia: [this.data.garantia.toString(), Validators.required],
        falla_detectada: [this.data.falla_detectada, Validators.required],
        id_usuario: [this.data.id_usuario, Validators.required],
        cotizacion: [this.data.cotizacion],
        fecha_terminado: [{ value: this.data.fecha_terminado, disabled: true }],
        fecha_entrega: [{ value: this.data.fecha_entrega, disabled: true }],
        importe: [this.data.importe],
        estatus: [
          { value: this.data.estatus, disabled: true },
          Validators.required,
        ],
        observaciones: [this.data.observaciones],
        avisado: [this.data.avisado],
        impreso: [this.data.impreso],
        id_modificado: [this.user.id],
      });
    } else {
      this.mode = 0;
      this.title = 'Nuevo';
      this.form = this.fb.group({
        fecha_ingreso: [
          { value:  moment().format('YYYY-MM-DD HH:mm:ss'), disabled: true },
        ],
        id_cliente: ['', Validators.required],
        producto: ['', Validators.required],
        id_marca: ['', Validators.required],
        modelo: ['', Validators.required],
        tipo: ['', Validators.required],
        serie: ['', Validators.required],
        garantia: ['', Validators.required],
        falla_detectada: ['', Validators.required],
        id_usuario: [3, Validators.required], // 3 es el ID del usuario SIN ENCARGADO
        cotizacion: [null],
        fecha_terminado: [null],
        fecha_entrega: [null],
        importe: [null],
        estatus: [
          { value: this.estatus[0].value, disabled: true },
          Validators.required,
        ],
        observaciones: [' '],
        id_modificado: [this.user.id],
      });
    }
  }

  ngOnInit(): void {
    this.getMenus();
    this.clientesControl.valueChanges.subscribe((data) => {
      this.form.controls['id_cliente'].setValue(data.id);
    });
    this.clientesFiltro.valueChanges
      .pipe(takeUntil(this._onDestroy))
      .subscribe(() => {
        this.filtrarClientes();
      });
    this.minDateTerminado = this.form.controls['fecha_ingreso'].value;
    this.form.controls['fecha_ingreso'].valueChanges.subscribe((data) => {
      this.minDateTerminado = data;
    });
    this.minDateEntregado = this.form.controls['fecha_terminado'].value;

    this.form.controls['fecha_terminado'].valueChanges.subscribe((data) => {
      this.minDateEntregado = data;
    });
  }
  onNoClick(): void {
    this.dialogRef.close();
  }
  ngOnDestroy() {
    this._onDestroy.next();
    this._onDestroy.complete();
  }
  ngAfterViewInit(): void {
    this.setInitialValueClientes();
  }
  onAdd(): void {
    const servicio = this.form.getRawValue();
    servicio.fecha_terminado = servicio.fecha_terminado
      ? _moment(servicio.fecha_terminado).format('YYYY-MM-DD')
      : null;
    servicio.fecha_entrega = servicio.fecha_entrega
      ? _moment(servicio.fecha_entrega).format('YYYY-MM-DD')
      : null;
    if (this.isCreateMode()) {
      this.mainService
        .postRequest(servicio, this.route)
        .subscribe((res: Res) => {
          if (res.error) {
            this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
              duration: 4000,
              horizontalPosition: 'center',
              verticalPosition: 'top',
            });
          } else {
            this.dialogRef.close(servicio);
          }
        });
    } else {
      this.mainService
        .putRequest(servicio, this.route)
        .subscribe((res: Res) => {
          if (res.error) {
            this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
              duration: 4000,
              horizontalPosition: 'center',
              verticalPosition: 'top',
            });
          } else {
            this.dialogRef.close(servicio);
          }
        });
    }
  }
  getMenus() {
    this.mainService.getRequest({}, `/brand`).subscribe((res: Res) => {
      this.marcas = res.data;
    });
    if (this.isUpdateMode()) {
      this.mainService
        .getRequest({}, `/client/get_active_clients`)
        .subscribe((res: Res) => {
          this.clientes = res.data;
          this.clientesFiltrados.next(this.clientes.slice());
          let filtro = res.data.filter(
            (cliente: ClientesRes) => cliente.id == this.data.id_cliente
          );
          this.clientesControl.setValue(filtro[0]);
          this.isLoading = false;
        });
      this.mainService
        .getRequest({ id: this.user.id }, `/user/get_tech_users`)
        .subscribe((res: Res) => {
          this.usuarios = res.data;
        });
    } else {
      this.mainService.getRequest({}, `/client/get_active_clients`).subscribe({
        next: (res: Res) => (this.clientes = res.data),
        complete: () => {
          this.clientesFiltrados.next(this.clientes.slice());
          this.isLoading = false;
        },
      });
      this.mainService
        .getRequest({ id: this.user.id }, `/user/get_tech_users`)
        .subscribe((res: Res) => {
          this.usuarios = res.data;
        });
    }
  }
  protected setInitialValueClientes() {
    this.clientesFiltrados
      .pipe(take(1), takeUntil(this._onDestroy))
      .subscribe(() => {
        this.singleSelectClientes.compareWith = (
          a: ClientesRes,
          b: ClientesRes
        ) => a && b && a.id === b.id;
      });
  }
  protected filtrarClientes() {
    if (!this.clientes) {
      return;
    }
    // get the search keyword
    let search = this.clientesFiltro.value;
    if (!search) {
      this.clientesFiltrados.next(this.clientes.slice());
      return;
    } else {
      search = search.toLowerCase();
    }
    this.clientesFiltrados.next(
      this.clientes.filter((cliente) => {
        let filtrado =
          cliente.nombre + ' ' + cliente.apellido + ' ' + cliente.telefono;
        return filtrado.toLowerCase().indexOf(search) > -1;
      })
    );
  }
  isCreateMode() {
    return this.mode === 0;
  }

  isUpdateMode() {
    return this.mode === 1;
  }
  efectividadDias(start: Date, end: Date) {
    var eventStartTime = new Date(start);
    var eventEndTime = new Date(end);
    var duration = eventEndTime.getDate() - eventStartTime.getDate();
    return duration;
  }
  marcarTerminado() {
    let telefono = this.clientesControl.value.telefono;
    let mensaje = '--- *SERVICIO TERMINADO* --- \nBuen dÃ­a, estimado cliente. Centro de Servicio Don Pedro le informa que su ' +
    this.data.producto +
    ' esta *listo para la entrega.* Favor presentarse con su talÃ³n de entrega de equipo. NÃºmero de Folio: ' +
    this.data.id +
    ' Importe Total: $' +
    this.form.value.importe +
    '. ' +
    this.form.value.observaciones ?? '';
    const now = moment();
    this.form.controls['estatus'].setValue('TERMINADO');
    this.form.controls['fecha_terminado'].setValue(now.format('YYYY-MM-DD'));
    // ajax.post("http://192.168.50.200:3001/lead", {
    //   message : 
    //   mensaje,
    //   phone : "521" + telefono 
    // }, { 'Content-Type': 'application/json' })
    //   .subscribe({
    //     next: (res:any)=>{
    //       console.log(res.response.responseExSave.id)
    //       if(res.response.responseExSave.id != undefined){
    //         this.form.controls['avisado'].setValue(2);
    //         this.onAdd();
            
    //       } else {
    //         this.onAdd();
    //         this.snackbar.open(`No se enviÃ³ el mensaje`, 'Aceptar', {
    //           duration: 4000,
    //           horizontalPosition: 'center',
    //           verticalPosition: 'top',
    //         });

    //       }
    //     }
    //   });
  }
  marcarEntregado() {
    const now = moment();
    this.form.controls['estatus'].setValue('ENTREGADO');
    this.form.controls['fecha_entrega'].setValue(now.format('YYYY-MM-DD'));
    this.onAdd();
  }
  marcarPendiente() {
    this.form.controls['estatus'].setValue('PENDIENTE');
    this.onAdd();
  }
}



================================================
FILE: src/app/components/factura/factura.component.html
================================================
<div class="container-fluid" id="htmlData">
  <mat-spinner [mode]="mode" class="mx-auto centrar" diameter="50" *ngIf="isLoading">
  </mat-spinner>
  <div *ngIf="!isLoading">

  <div class="row">
    <div class="col d-grid justify-content-center">
      <img class="mx-auto my-3" src="./assets/logo.png" width="100" alt="">
      <h1 class="text-center text-primary"> Centro de Servicio Profesional </h1>
    </div>

    <div class="col mt-4 text-center">
      <h1 ><b>GRUPO FERRETERO DON PEDRO</b></h1>
      <h3>CARRETERA SAN MIGUEL A CELAYA KM 2.4 POBLADO DE DON DIEGO CP. 37887 SAN MIGUEL DE ALLENDE, GUANAJUATO
      </h3>
    </div>

    <div class="col d-grid align-content-center text-center">
      <h1 class="text-danger text-large"><b>FOLIO:  {{servicio.id}}</b></h1>
    </div>
  </div>
  <div class="container-margen">
    <div class="row">
      <div class="col d-grid text-center align-content-center">
        <h1 class="titulo text-white">ORDEN DE SERVICIO</h1>
      </div>
    </div>
    <div class="row">
      <div class="col-3 d-grid text-center">
        <h1 class="text-primary"> <b> DATOS DEL CLIENTE</b></h1>
      </div>
    <hr>

    </div>
    <div class="row mt-4">
      <div class="col d-grid">
        <h2><b>Nombre o RazÃ³n Social: </b>  {{ servicio.nombre_cliente }}</h2>
      </div>
      <div class="col d-grid">
        <h2><b>ID de Servicio: </b>  {{ servicio.id }}</h2>
      </div>
    </div>
    <div class="row">
      <div class="col d-grid">
        <h2><b># de TelÃ©fono: </b> {{ servicio.telefono_cliente }}</h2>
      </div>
    </div>
    <div class="row  mt-5">
      <div class="col-3 d-grid text-center">
        <h1 class="text-primary"> <b> DATOS DEL PRODUCTO</b></h1>
      </div>
      <hr>
    </div>

    <div class="row mt-4">
      <div class="col d-grid">
        <h2><b>Producto: </b>  {{ servicio.producto }}</h2>
      </div>
      <div class="col d-grid text-center">
        <h2><b>Marca: </b>  {{ servicio.marca }}</h2>
      </div>
      <div class="col d-grid text-center">
        <h2><b>Modelo: </b>  {{ servicio.modelo }}</h2>
      </div>
      <div class="col d-grid text-end">
        <h2><b>Tipo: </b>  {{ servicio.tipo }}</h2>
      </div>
    </div>
    <div class="row">
      <div class="col d-grid">
        <h2><b># de Serie: </b> {{ servicio.serie }}</h2>
      </div>
      <div class="col d-grid">
        <div class="d-flex flex-row">
          <h2 class="d-inline-flex text-nowrap"><b># de Motor: </b>
          </h2>
          <div class="divider d-inline-flex"></div>

        </div>

      </div>
    </div>
    <div class="row">
      <div class="col d-grid">
        <h2><b>Fecha de Ingreso: </b> {{ servicio.fecha_ingreso | date: "dd/MM/YYYY" }}</h2>
      </div>
      <div class="col d-grid">
        <div class="d-flex flex-row">
          <h2 class="d-inline-flex text-nowrap"><b>Fecha de Entrega: </b>
          </h2>
          <div class="divider d-inline-flex"></div>

        </div>

      </div>
    </div>
    <div class="row  mt-4">
      <div class="col-3 d-grid text-center">
        <h1 class="text-primary text-nowrap"> <b> FALLA DESCRITA POR EL CLIENTE</b></h1>
      </div>
    <hr>

    </div>
    <div class="row mt-3">
      <div class="col">
        <h2><b>GarantÃ­a: </b> {{ servicio.garantia === 0 ? "NO" : "SI"}}</h2>

        <h2>- {{servicio.falla_detectada}}</h2>
      </div>

    </div>
    <div class="row  mt-4">
      <div class="col-3 d-grid text-center">
        <h1 class="text-primary"> <b> DIAGNÃ“STICO</b></h1>
      </div>
    <hr>
  </div>
  <div class="row my-3">
    <div class="col">

      <h2>- {{servicio.observaciones}}</h2>
    </div>

  </div>

  <div class="row mt-10">
    <div class="col text-center mx-5">
      <div class="divider"></div>
      <h2>SELLO GRUPO FERRETERO DON PEDRO</h2>
    </div>
    <div class="col text-center mx-5">
      <div class="divider"></div>
      <h2>NOMBRE Y FIRMA DEL CLIENTE</h2>
    </div>
  </div>
  <div class="row mt-3">
    <h3 class="text-justify">Ãšnicamente se entregarÃ¡ el producto o equipo al portador del presente talÃ³n de orden de servicio.</h3>
  </div>

  <hr>


    <div class="row justify-content-center align-items-center g-2">
      <div class="col-9">
        <div class="row justify-content-center align-items-center g-2">
          <div class="col-2 d-grid">
            <img class="img-fluid mx-auto" src="./assets/logo.png" width="100" alt="">

          </div>
          <div class="col-6 d-grid align-content-center text-center">
            <h1><b> TALÃ“N DE ENTREGA DE EQUIPO </b></h1>

          </div>
          <div class="col-4 d-grid">
            <h4 >Email:servicio@grupodonpedro.com <br>
             TelÃ©fono: 415 140 0105</h4>

          </div>
        </div>
        <div class="row mt-3 justify-content-center align-items-center g-2">
          <div class="col d-grid">
            <h2><b>Cliente: </b>  {{ servicio.nombre_cliente }}</h2>
            <h2><b>Producto: </b>  {{ servicio.producto }}</h2>
          </div>
          <div class="col d-grid">
            <h2><b>TelÃ©fono: </b>  {{ servicio.telefono_cliente }}</h2>

            <h2><b>Marca: </b>  {{ servicio.marca }} - {{servicio.modelo}}</h2>
          </div>
          <div class="col d-grid">
            <h2><b>Folio #: </b>  {{ servicio.id }}</h2>

            <h2><b>Fecha: </b>  {{ servicio.fecha_ingreso | date: "dd/MM/YYYY" }}</h2>
          </div>
        </div>
        <div class="row justify-content-start align-items-center g-2">
          <div class="col">
            <h2 class="text-justify">Ãšnicamente se entregarÃ¡ el producto o equipo al portador del presente talÃ³n de orden de servicio.</h2>
          </div>

        </div>
      </div>
      <div class="col-3 justify-content-center">
        <h1 class="text-large"><b>FOLIO:  {{servicio.id}} </b></h1>
        <h2><b>CLIENTE: </b>  {{ servicio.nombre_cliente }}</h2>
        <h2><b>TELEFONO: </b>  {{ servicio.telefono_cliente }}</h2>
        <h2><b>HERRAMIENTA: </b>  {{ servicio.producto }}</h2>
        <h2><b>FALLA: </b>  {{ servicio.falla_detectada }}</h2>
      </div>

    </div>
  </div>

</div>
</div>
<div class="row" *ngIf="!isLoading">
  <div class="col d-grid justify-content-center mb-4">
      <button color="accent" mat-raised-button (click)="openPDF()"> <mat-icon>description</mat-icon> Generar PDF</button>

  </div>


</div>

<div class="container-fluid" id="htmlData2">
  <div class="row">
    <h2 class="text-justify">1. Para equipos NO AUTORIZADOS cuenta con 15 dÃ­as para su recolecciÃ³n a partir su aviso, de lo contrario, no nos hacemos responsables.</h2>
    <h2 class="text-justify">2. Para los equipos TERMINADOS cuenta con 30 dÃ­as a partir de su aviso para recolectarlos, de lo contrario, no nos hacemos responsables.</h2>
    <h2 class="text-justify mt-2 mb-3">3. En caso de extravÃ­o, deberÃ¡ presentar una identificaciÃ³n y se cobrarÃ­a una penalizaciÃ³n del 5% del valor del ticket.</h2>

  </div>
</div>



================================================
FILE: src/app/components/factura/factura.component.scss
================================================
.titulo {
  padding-top: 15px;
  padding-bottom: 15px;
  background-color: #1368A9;
  font-size: 40px;
}

hr {
  height: 3px;
  background-color: black;
  opacity: 1;
}
.centrar {
  margin-top: 20%;
}
.divider {
  height: 2px;
  background-color: black;
  width: 100%;
  margin-top: 1.4rem;
  margin-left: 5px;
}
.container-margen {
  margin-right: 5rem;
  margin-left: 5rem;

}
td {
  border: solid black 1px;
}

.mt-10 {
  margin-top: 6rem;
}
.text-large{
  font-size: 40px;
}

#htmlData2 {
  -webkit-transform: rotate(180deg);
}

h2 {
  font-size: 25px;
}


================================================
FILE: src/app/components/factura/factura.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { FacturaComponent } from './factura.component';

describe('FacturaComponent', () => {
  let component: FacturaComponent;
  let fixture: ComponentFixture<FacturaComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ FacturaComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(FacturaComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/factura/factura.component.ts
================================================
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { ProgressSpinnerMode } from '@angular/material/progress-spinner';

import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { MainService } from 'src/app/services/main.service';
import { Res } from 'src/app/interfaces/response';
import { ToolService } from 'src/app/interfaces/toolservice';
@Component({
  selector: 'app-factura',
  templateUrl: './factura.component.html',
  styleUrls: ['./factura.component.scss']
})
export class FacturaComponent implements OnInit {
  private route = '/service';
  servicio!: ToolService;
  isLoading : boolean = true;
  mode: ProgressSpinnerMode = 'indeterminate';
  constructor(private mainService: MainService, private router: ActivatedRoute, ) { }

  ngOnInit(): void {
    this.getServicio();
  }

  getServicio() {
    const routeParams = this.router.snapshot.paramMap;
    const id = routeParams.get('id') ?? '';
    this.mainService.putRequest({}, `${this.route}/print/${id}`).subscribe((data: any)=>{

    });
    this.mainService.getRequest({id:id}, `${this.route}/by_id`).subscribe((res: Res)=>{
      this.servicio = res.data;

      setTimeout(()=>{
        this.isLoading = false;
      }, 1000);
      setTimeout(()=>{
      this.openPDF();

      }, 1500);

    });
  }
  public openPDF(): void {
    let DATA: any = document.getElementById('htmlData');
    html2canvas(DATA).then((canvas) => {

      const FILEURI = canvas.toDataURL('image/png');
      let PDF = new jsPDF('p', 'mm', 'a4');
      let fileWidth = PDF.internal.pageSize.getWidth();
      let fileHeight =PDF.internal.pageSize.getHeight()-10;
      let y = 10;
      let x = 1;
      PDF.addImage(FILEURI, 'PNG', x, y, fileWidth, fileHeight-20);

      window.open(PDF.output('bloburl'));
    });
  }

/*
  public openPDF(): void {
    let DATA: any = document.getElementById('htmlData');
    let DATA2: any = document.getElementById('htmlData2');
    let PDF = new jsPDF('p', 'mm', 'a4');
    let fileWidth = PDF.internal.pageSize.getWidth();
    let fileHeight =PDF.internal.pageSize.getHeight()-10;
    html2canvas(DATA).then((canvas) => {

      const FILEURI = canvas.toDataURL('image/png');
      let y = 9;
      let x = -3;
      PDF.addImage(FILEURI, 'PNG', x, y, fileWidth, fileHeight-40);
      html2canvas(DATA2).then((canvas) => {
        PDF.addPage();
        const FILEURI = canvas.toDataURL('image/png');
        let y = 25;
        let x = -65;
        PDF.addImage(FILEURI, 'PNG', x, y, fileWidth, fileHeight-500);

        window.open(PDF.output('bloburl'));
      });

    });

  }
*/
}



================================================
FILE: src/app/components/log-in/log-in.component.html
================================================
<div class="container-fluid h-100">
  <div class="d-flex flex-row justify-content-center align-items-center h-100">

      <div class="d-flex flex-column ">
          <mat-spinner [mode]="mode" class="mx-auto my-0" diameter="50" *ngIf="isLoading">
          </mat-spinner>
          <form [formGroup]="form" (ngSubmit)="login()" *ngIf="!isLoading">
              <mat-card class="text-center">

                  <mat-card-header class="d-inline">
                      <h2 class="fw-semibold">Taller de Servicios GFDP</h2>

                      <img src="./assets/logo.png" width="95" class="mb-4 mt-2" alt="">

                  </mat-card-header>
                  <mat-card-content>
                      <mat-form-field appearance="fill">
                          <mat-label>Usuario</mat-label>
                          <input oninput="this.value = this.value.toUpperCase()" formControlName="curp" matInput autocomplete="off" placeholder="RFC sin homoclave" maxlength="10">
                      </mat-form-field>

                      <mat-form-field appearance="fill">
                          <mat-label>ContraseÃ±a</mat-label>
                          <input type="password" formControlName="password" matInput autocomplete="off" placeholder="******" maxlength="15">
                      </mat-form-field>
                  </mat-card-content>
                  <mat-card-actions class="justify-content-center">
                      <button type="submit" mat-raised-button color="primary" class="w-50 mb-4 p-1" [disabled]="form.invalid">Iniciar SesiÃ³n</button>
                  </mat-card-actions>
              </mat-card>

          </form>




      </div>
  </div>
</div>



================================================
FILE: src/app/components/log-in/log-in.component.scss
================================================
.container-fluid {
  background-color: #f5f5f5;
}

mat-form-field {
  width: 80%;
}



================================================
FILE: src/app/components/log-in/log-in.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LogInComponent } from './log-in.component';

describe('LogInComponent', () => {
  let component: LogInComponent;
  let fixture: ComponentFixture<LogInComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ LogInComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LogInComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/log-in/log-in.component.ts
================================================
import { Component, OnInit } from '@angular/core';
import {
  FormBuilder,
  UntypedFormBuilder,
  UntypedFormGroup,
  Validators,
} from '@angular/forms';
import { MatSnackBar } from '@angular/material/snack-bar';
import { ProgressSpinnerMode } from '@angular/material/progress-spinner';
import { Router } from '@angular/router';
import { Res } from 'src/app/interfaces/response';
import { User, Convert } from 'src/app/interfaces/user';
import { AuthService } from 'src/app/services/auth.service';

@Component({
  selector: 'app-log-in',
  templateUrl: './log-in.component.html',
  styleUrls: ['./log-in.component.scss'],
})
export class LogInComponent implements OnInit {
  form: UntypedFormGroup;
  route = '/login';
  mode: ProgressSpinnerMode = 'indeterminate';
  isLoading: boolean = false;
  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private snackbar: MatSnackBar,
    private router: Router
  ) {
    this.form = this.fb.group({
      curp: ['', Validators.required],
      password: ['', Validators.required],
    });
    sessionStorage.clear();
  }

  ngOnInit(): void {}

  login() {
    let curp = this.form.value.curp;
    let password = this.form.value.password;

    this.authService
      .loginRequest({ curp: curp, password: password }, this.route)
      .subscribe((res: Res) => {
        if (!res.error) {
          const user: User = res.data;
          sessionStorage.setItem('token',user.token);
          sessionStorage.setItem('user_taller', Convert.userToJson(user));
          if (user.tipo == 1) {
            this.router.navigate(['/taller/dashboard-admin']);
          } else {
            this.router.navigateByUrl('/taller/dashboard-tecnico');
          }
        } else {
          this.form.controls['password'].reset();
          this.snackbar.open(`${res.data} (${res.code})`, 'Aceptar', {
            duration: 4000,
            horizontalPosition: 'center',
            verticalPosition: 'top',
          });
        }
      });
  }
}



================================================
FILE: src/app/components/not-founds/not-founds.component.html
================================================
<div class="container">
  <div class="row">
    <div class="col text-center mt-5">
      <h1>Error en la direccion del sitio.</h1>
    </div>
  </div>
  <div class="row">
    <div class="col text-center">
      <button mat-raised-button color="primary" routerLink="/taller/login"> <mat-icon>login</mat-icon> Ir al Login</button>
    </div>
  </div>
</div>



================================================
FILE: src/app/components/not-founds/not-founds.component.scss
================================================



================================================
FILE: src/app/components/not-founds/not-founds.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { NotFoundsComponent } from './not-founds.component';

describe('NotFoundsComponent', () => {
  let component: NotFoundsComponent;
  let fixture: ComponentFixture<NotFoundsComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ NotFoundsComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(NotFoundsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



================================================
FILE: src/app/components/not-founds/not-founds.component.ts
================================================
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-not-founds',
  templateUrl: './not-founds.component.html',
  styleUrls: ['./not-founds.component.scss']
})
export class NotFoundsComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

}



================================================
FILE: src/app/interfaces/chart.ts
================================================
// To parse this data:
//
//   import { Convert } from "./file";
//
//   const earningsChart = Convert.toEarningsChart(json);

export interface Chart {
    main:  number;
    total: number;
}

// Converts JSON strings to/from your types
export class Convert {
    public static toChart(json: string): Chart[] {
        return JSON.parse(json);
    }

    public static chartToJson(value: Chart[]): string {
        return JSON.stringify(value);
    }
}



================================================
FILE: src/app/interfaces/clientes.ts
================================================
// To parse this data:
//
//   import { Convert } from "./file";
//
//   const clientesRes = Convert.toClientesRes(json);

export interface ClientesRes {
  id:       number;
  nombre:   string;
  apellido: string;
  telefono: string;
  curp:     string;
  activo:   number;
}

// Converts JSON strings to/from your types
export class Convert {
  public static toClientesRes(json: string): ClientesRes[] {
      return JSON.parse(json);
  }

  public static clientesResToJson(value: ClientesRes[]): string {
      return JSON.stringify(value);
  }
}



================================================
FILE: src/app/interfaces/express.ts
================================================
// To parse this data:
//
//   import { Convert } from "./file";
//
//   const expressRes = Convert.toExpressRes(json);

export interface ExpressRes {
    id:          number;
    id_usuario:  number;
    fecha:       Date;
    herramienta: string;
    falla:       string;
    cotizacion:  null | string;
    importe:     number | null;
    encargado:   string;
}

// Converts JSON strings to/from your types
export class Convert {
    public static toExpressRes(json: string): ExpressRes[] {
        return JSON.parse(json);
    }

    public static expressResToJson(value: ExpressRes[]): string {
        return JSON.stringify(value);
    }
}



================================================
FILE: src/app/interfaces/externos.ts
================================================
// To parse this data:
//
//   import { Convert } from "./file";
//
//   const externosRes = Convert.toExternosRes(json);

export interface ExternosRes {
  id:             number;
  id_usuario:     number;
  folio:          string;
  fecha_registro: Date;
  garantia:       number;
  marca:          string;
  id_cliente:     number;
  cotizacion:     string;
  importe:        number;
  cita:           Date;
  estado:         string;
  observaciones:  string;
  avisado:        number;
  nombre_cliente: string;
  encargado:      string;
}


// Converts JSON strings to/from your types
export class Convert {
  public static toExternosRes(json: string): ExternosRes[] {
      return JSON.parse(json);
  }

  public static externosResToJson(value: ExternosRes[]): string {
      return JSON.stringify(value);
  }
}


================================================
FILE: src/app/interfaces/garantias.ts
================================================
// To parse this data:
//
//   import { Convert } from "./file";
//
//   const garantiasRes = Convert.toGarantiasRes(json);

export interface GarantiasRes {
  id:                       number;
  id_servicio:              number;
  traspaso:                 number;
  autorizo:                 string;
  folio:                    string;
  fecha_registro:           Date;
  producto:                 string;
  marca:                    string;
  telefono:                 string;
  serie:                    string;
  modelo:                   string;
  cantidad:                 number;
  costo_unitario:           number;
  total:                    number;
  motivo:                   string;
  fecha_proveedor?:         Date;
  fecha_resuelto_proveedor?:Date;
  fecha_resuelto_cliente?:  Date;
  estado_cliente:           string;
  estado_proveedor:         string;
  id_modificado:            number;
  modificador:              string;
  doc:              string;

}


// Converts JSON strings to/from your types
export class Convert {
  public static toGarantiasRes(json: string): GarantiasRes[] {
      return JSON.parse(json);
  }

  public static garantiasResToJson(value: GarantiasRes[]): string {
      return JSON.stringify(value);
  }
}



================================================
FILE: src/app/interfaces/graficas.ts
================================================

export interface GraficasRes {
  marcas:   Datos[];
  tecnicos: Datos[];
  estados:  Datos[];
}


export interface Datos {
  id?:       string;
  cantidad: string;
  valor:    string;
}

// Converts JSON strings to/from your types
export class Convert {
  public static toGraficasRes(json: string): GraficasRes {
      return JSON.parse(json);
  }

  public static graficasResToJson(value: GraficasRes): string {
      return JSON.stringify(value);
  }
}



================================================
FILE: src/app/interfaces/marcas.ts
================================================
// To parse this data:
//
//   import { Convert } from "./file";
//
//   const marcasRes = Convert.toMarcasRes(json);

export interface MarcasRes {
  id:    number;
  value: string;
}

// Converts JSON strings to/from your types
export class Convert {
  public static toMarcasRes(json: string): MarcasRes[] {
      return JSON.parse(json);
  }

  public static marcasResToJson(value: MarcasRes[]): string {
      return JSON.stringify(value);
  }
}



================================================
FILE: src/app/interfaces/report.ts
================================================
// To parse this data:
//
//   import { Convert, Report } from "./file";
//
//   const report = Convert.toReport(json);

export interface Report {
    user_report:     UserReport[];
    earnings_report: SReport[];
    service_report:  { [key: string]: number };
    express_report:  SReport[];
    external_report: ExternalReport[];
}

export interface SReport {
    id_encargado: number;
    encargado:    string;
    servicios:    number;
    porcentaje?:  number;
    importe:      number;
}

export interface ExternalReport {
    id_encargado: number;
    encargado:    string;
    servicios:    number;
    porcentaje:   number;
    pendientes:   number;
    agendado:     number;
    terminados:   number;
}

export interface UserReport {
    id_encargado:  number;
    encargado:     string;
    servicios:     number;
    porcentaje:    number;
    pendientes:    number;
    no_autorizado: number;
    por_autorizar: number;
    entregados:    number;
    terminados:    number;
}


// Converts JSON strings to/from your types
export class Convert {
    public static toReport(json: string): Report {
        return JSON.parse(json);
    }

    public static reportToJson(value: Report): string {
        return JSON.stringify(value);
    }
}



================================================
FILE: src/app/interfaces/response.ts
================================================
// To parse this data:
//
//   import { Convert, Login } from "./file";
//
//   const login = Convert.toLogin(json);

export interface Res {
    error: boolean;
    data:  any;
    code:  number;
}

// Converts JSON strings to/from your types
export class Convert {
    public static toRes(json: string): Res {
        return JSON.parse(json);
    }

    public static resToJson(value: Res): string {
        return JSON.stringify(value);
    }
}



================================================
FILE: src/app/interfaces/toolservice.ts
================================================
// To parse this data:
//
//   import { Convert } from "./file";
//
//   const toolService = Convert.toToolService(json);

export interface ToolService {
    id:               number;
    id_cliente:       number;
    id_usuario:       number;
    fecha_ingreso:    Date;
    producto:         string;
    marca:            string;
    modelo:           string;
    tipo:             string;
    serie:            string;
    falla_detectada:  string;
    cotizacion:       string;
    garantia:         number;
    fecha_terminado?:  Date;
    fecha_entrega?:    Date;
    importe:          number;
    estatus:          string;
    observaciones:    string;
    avisado:          number;
    id_marca:         number;
    impreso:          number;
    id_modificado:    number;
    nombre_cliente:   string;
    telefono_cliente: string;
    encargado:        string;
    modificador:      string;
}


// Converts JSON strings to/from your types
export class Convert {
    public static toToolService(json: string): ToolService[] {
        return JSON.parse(json);
    }

    public static toolServiceToJson(value: ToolService[]): string {
        return JSON.stringify(value);
    }
}



================================================
FILE: src/app/interfaces/user.ts
================================================
// To parse this data:
//
//   import { Convert } from "./file";
//
//   const user = Convert.toUser(json);

export interface User {
  id:        number;
  nombre:    string;
  apellido:  string;
  tipo:      number;
  curp:      string;
  token:     string;
  password?: string;
  activo?:   number;
}

// Converts JSON strings to/from your types
export class Convert {
  public static toUser(json: string): User {
      return JSON.parse(json);
  }

  public static userToJson(value: User): string {
      return JSON.stringify(value);
  }
}


================================================
FILE: src/app/services/auth.service.ts
================================================
import { Injectable } from '@angular/core';
import {
  HttpClient,
  HttpClientModule,
  HttpHeaders,
  HttpResponse,
} from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, retry } from 'rxjs/operators';
import { Res } from '../interfaces/response';
import { Convert, User } from '../interfaces/user';
import { environment } from 'src/enviroments/enviroment';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private api = environment.apiURL;
  private httpHeaders: HttpHeaders;
  constructor(private http: HttpClient) {
    this.httpHeaders = new HttpHeaders({
        'accept': 'application/json',
        'Content-Type': 'application/json; charset=utf-8',
      })
  }

  loginRequest(params: any, route: String): Observable<Res> {
    return this.http.post<Res>(this.api + route, params, { headers: this.httpHeaders });
  }

}



================================================
FILE: src/app/services/csv.service.ts
================================================
import { Injectable } from '@angular/core';


@Injectable()
export class CSVService {

    downloadFile(data: any, filename='data', headers: any) {
        data = data.replace(/(\r\n|\n|\r)/gm, "");

        let csvData = this.ConvertToCSV(data, headers);
        let blob = new Blob(['\ufeff' + csvData], { type: 'text/csv;charset=utf-8;' });
        let dwldLink = document.createElement("a");
        let url = URL.createObjectURL(blob);
        let isSafariBrowser = navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1;
        if (isSafariBrowser) {  //if Safari open in new window to save file with random filename.
            dwldLink.setAttribute("target", "_blank");
        }
        dwldLink.setAttribute("href", url);
        dwldLink.setAttribute("download", filename + ".csv");
        dwldLink.style.visibility = "hidden";
        document.body.appendChild(dwldLink);
        dwldLink.click();
        document.body.removeChild(dwldLink);
    }

    ConvertToCSV(objArray: any, headerList: any) {
         let array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
         let str = '';
         let row = 'registro;';

         for (let index in headerList) {
             row += headerList[index] + ';';
         }
         row = row.slice(0, -1);
         str += row + '\r\n';
         for (let i = 0; i < array.length; i++) {
             let line = (i+1)+'';
             for (let index in headerList) {
                let head = headerList[index];

                 line += ';' + array[i][head];
             }
             str += line + '\r\n';
         }
         return str;
     }
}



================================================
FILE: src/app/services/main.service.ts
================================================
import { Injectable, NgZone } from '@angular/core';
import {
  HttpClient,
  HttpClientModule,
  HttpHeaders,
  HttpResponse,
} from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, retry } from 'rxjs/operators';
import { Res } from '../interfaces/response';
import { environment } from 'src/enviroments/enviroment';
import { SseService } from './sse.service';

@Injectable({
  providedIn: 'root',
})
export class MainService {
  private api = environment.apiURL;
  private httpHeaders: HttpHeaders;
  private httpFileHeaders: HttpHeaders;
  private token: string;
  private eventSource!: EventSource;
  constructor(private http: HttpClient, private zone: NgZone, private sseService: SseService) {
    this.token = sessionStorage.getItem('token') ?? 'No token available';

    this.httpHeaders = new HttpHeaders({
        'accept': 'application/json',
        'Content-Type': 'application/json; charset=utf-8',
        'Authorization': `Bearer ${this.token}`,
      })
      this.httpFileHeaders = new HttpHeaders({
        'accept': 'application/json',
        'Authorization': `Bearer ${this.token}`,
      })
  }

  getRequest(params: any, route: String): Observable<Res> {
    return this.http.get<Res>(this.api + route, { params: params, headers: this.httpHeaders });
  }
  postRequest(params: any, route: String): Observable<Res> {
    return this.http.post<Res>(this.api + route, params, { headers: this.httpHeaders });
  }
  putRequest(params: any, route: String): Observable<Res> {
    return this.http.put<Res>(this.api + route, params, { headers: this.httpHeaders });
  }
  deleteRequest(params: any, route: String): Observable<Res> {
    return this.http.delete<Res>(this.api + route, { params: params, headers: this.httpHeaders });
  }
  uploadFile(params: any, route: String): Observable<Res> {
    return this.http.post<Res>(this.api + route, params, { headers: this.httpFileHeaders });
  }
  getFile(route: String): Observable<Blob> {
    return this.http.get<Blob>(this.api + route,  { responseType: 'blob' as 'json', headers: this.httpFileHeaders },);
  }

  getServerEvent(route: string){
    return new Observable((observer)=>{
       this.eventSource = this.sseService.getEventSource(route);
      this.eventSource.onmessage = (event) => {
        this.zone.run(()=>{
          observer.next(event);
        })
      };
      this.eventSource.onerror = (error) => {
        observer.error();
        this.eventSource.close();
      };
    })
  }

  disconnectEventSource(): void {
    this.eventSource.close();
  }

  sendWhatsappMsg(params: any, route: string): Observable<any>{
    return this.http.post<any>(route, { params: params, headers:  new HttpHeaders({
      'accept': 'application/json',
      'Content-Type': 'application/json'
    }) });
  }
}



================================================
FILE: src/app/services/sse.service.ts
================================================
import { Injectable } from '@angular/core';
import {
  HttpClient,
  HttpClientModule,
  HttpHeaders,
  HttpResponse,
} from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, retry } from 'rxjs/operators';
import { Res } from '../interfaces/response';
import { environment } from 'src/enviroments/enviroment';

@Injectable({
  providedIn: 'root',
})

export class SseService {
    private api = environment.apiURL;

    getEventSource(route: string): EventSource {
        return new EventSource(this.api + route);
    }
}


================================================
FILE: src/assets/.gitkeep
================================================



================================================
FILE: src/enviroments/enviroment.dev.ts
================================================
export const environment = {
    production: false,
    apiURL: 'http://192.168.50.200:8003'
  };


================================================
FILE: src/enviroments/enviroment.prod.ts
================================================
export const environment = {
    production: true,
    apiURL: 'http://192.168.50.200:8003'
  };


================================================
FILE: src/enviroments/enviroment.ts
================================================
export const environment = {
    production: false,
    apiURL: 'http://localhost:8003'
  };

